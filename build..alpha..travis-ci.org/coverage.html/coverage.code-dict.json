{"/home/travis/build/npmtest/node-npmtest-cssshrink/test.js":"/* istanbul instrument in package npmtest_cssshrink */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cssshrink/lib.npmtest_cssshrink.js":"/* istanbul instrument in package npmtest_cssshrink */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_cssshrink = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_cssshrink = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-cssshrink/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-cssshrink && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_cssshrink */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_cssshrink\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_cssshrink.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_cssshrink.rollup.js'] =\n            local.assetsDict['/assets.npmtest_cssshrink.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_cssshrink.__dirname + '/lib.npmtest_cssshrink.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cssshrink/node_modules/cssshrink/index.js":"module.exports = require('./lib/shrink.js');\n\n","/home/travis/build/npmtest/node-npmtest-cssshrink/node_modules/cssshrink/lib/shrink.js":"var gonzo = require('gonzales-ast');\nvar prettyugly = require('prettyugly');\n\nfunction traverseAST(ast) {\n  // individual values, etc., run once\n  var value_visitors = [\n    require('./visitors/numbers.js'),\n    require('./visitors/zero-dimensions.js'),\n    require('./visitors/unary.js'),\n    require('./visitors/lowercase-props.js'),\n    require('./visitors/lowercase-dimensions.js'),\n    require('./visitors/@keyframes.js'),\n    require('./visitors/pseudo-elements.js'),\n    require('./visitors/color-functions.js'),\n    require('./visitors/color-hex.js'),\n    require('./visitors/color-names.js'),\n    require('./visitors/@charset.js'),\n    require('./visitors/@import.js'), // before url.js and before quotes.js\n    require('./visitors/uri.js'),\n    require('./visitors/quotes.js'),\n    require('./visitors/font-weight.js'),\n    require('./visitors/font-family-unquote.js'),\n    require('./visitors/font-family-generic.js'),\n    require('./visitors/time.js'),\n    require('./visitors/angle.js'),\n    require('./visitors/zero-percentage.js'),\n  ];\n\n  // run while there's improvement\n  var structure_visitors = [\n    // structural transforms\n    require('./visitors/merge-media.js'),\n    require('./visitors/merge-blocks.js'),\n    require('./visitors/merge-blocks-in-blocks.js'),\n\n    // dedup\n    require('./visitors/dedup-selectors.js'),\n    require('./visitors/dedup-declarations.js'),\n    require('./visitors/dedup-keyframes.js'),\n    // again\n    prettyugly.visitors.ugly['dedup-delimiters'],\n    prettyugly.visitors.ugly['last-delimiter'],\n\n    // rm empty\n    require('./visitors/empty-blocks.js'),\n    require('./visitors/empty-media.js'),\n  ];\n\n  ast = prettyugly.uglyAST(ast);\n  ast = gonzo.traverse(ast, value_visitors);\n  var len = JSON.stringify(ast).length;\n  var newlen;\n\n  while (1) {\n    ast = gonzo.traverse(ast, structure_visitors);\n    newlen = JSON.stringify(ast).length;\n    if (newlen === len) {\n      return ast;\n    }\n    len = newlen;\n  }\n}\n\nexports.shrink = function shrink(css) {\n  var ast = gonzo.parse(css);\n  ast = traverseAST(ast);\n  return gonzo.toCSS(ast);\n};\n\nexports.shrinkAST = function shrinkAST(ast) {\n  return traverseAST(ast);\n};\n","/home/travis/build/npmtest/node-npmtest-cssshrink/node_modules/cssshrink/bin/cli.js":"#!/usr/bin/env node\n\nvar cssshrink = require(\"../index.js\");\nvar read = require('fs').readFileSync;\n\nvar css = read(process.argv[2], 'utf8').toString();\n\nconsole.log(cssshrink.shrink(css));\n","/home/travis/build/npmtest/node-npmtest-cssshrink/node_modules/cssshrink/demo/bundle.js":"(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error(\"Cannot find module '\"+o+\"'\")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nmodule.exports = require('./lib/bs.js');\n\n\n},{\"./lib/bs.js\":2}],2:[function(require,module,exports){\n// parser\nvar gonzo = require('gonzales-ast');\n// properties\nvar cssprops = require('cssprops');\n// visitors\nvar prefix = require('./visitors/prefix.js');\nvar iehacks = require('./visitors/iehacks.js');\nvar props = require('./visitors/props.js');\nvar empty_delimeters = require('./visitors/empty-delimiters.js');\nvar media_queries = require('./visitors/media-queries.js');\n\nfunction traverseAST(ast, browser) {\n  var conf = browsers[browser];\n  if (conf.prefix) {\n    prefix.setAllowedPrefix(conf.prefix);\n  } else {\n    prefix.setNoPrefix();\n  }\n\n  iehacks.setAllowedHacks(conf.hacks ? conf.hacks : []);\n\n  props.setProperties(cssprops[browser]);\n\n  var visitors = [\n    prefix,\n    iehacks,\n    props,\n    empty_delimeters];\n\n  if (conf.nomq) {\n    visitors.push(media_queries);\n  }\n\n  return gonzo.traverse(ast, visitors);\n}\n\nvar browsers = {\n  chrome: {\n    prefix: 'webkit'\n  },\n  ios: {\n    prefix: 'webkit'\n  },\n  safari: {\n    prefix: 'webkit'\n  },\n  firefox: {\n    prefix: 'moz'\n  },\n  opera: {\n    prefix: 'o'\n  },\n  ie6: {\n    hacks: ['_', '*'],\n    nomq: true\n  },\n  ie7: {\n    hacks: ['*'],\n    nomq: true\n  },\n  ie8: {\n    prefix: 'ms',\n    nomq: true\n  },\n  ie9: {\n    prefix: 'ms'\n  },\n  ie10: {\n    prefix: 'ms'\n  },\n  ie11: {\n    prefix: 'ms'\n  },\n\n};\n\nexports.transform = function transform(css, browser) {\n  var ast = gonzo.parse(css);\n  ast = traverseAST(ast, browser);\n  return gonzo.toCSS(ast);\n};\n\nexports.transformAST = function transformAst(ast, browser) {\n  return traverseAST(ast, browser);\n};\n\nexports.browsers = Object.keys(browsers);\n\nexports.stringGetStringIdStringFromUserAgentSring = function(ua) {\n  if (ua.indexOf('Firefox') !== -1) {\n    return 'firefox';\n  } else if (ua.indexOf('Chrome') !== -1) {\n    return 'chrome';\n  } else if (ua.indexOf('Opera') !== -1) {\n    return 'opera';\n  } else if (ua.indexOf('Safari') !== -1) {\n    var name = 'safari';\n    if (ua.indexOf('Mobile') !== -1) {\n      return 'ios'\n    }\n    return name;\n  } else if (ua.indexOf('Trident/7') !== -1) {\n    return 'ie11';\n  } else if (ua.indexOf('MSIE 10') !== -1) {\n    return 'ie10';\n  } else if (ua.indexOf('MSIE 9') !== -1) {\n    return 'ie9';\n  } else if (ua.indexOf('MSIE 8') !== -1) {\n    return 'ie8';\n  } else if (ua.indexOf('MSIE 7') !== -1) {\n    return 'ie7';\n  } else if (ua.indexOf('MSIE 6') !== -1) {\n    return 'ie6';\n  }\n};\n\n},{\"./visitors/empty-delimiters.js\":3,\"./visitors/iehacks.js\":4,\"./visitors/media-queries.js\":5,\"./visitors/prefix.js\":6,\"./visitors/props.js\":7,\"cssprops\":31,\"gonzales-ast\":32}],3:[function(require,module,exports){\nmodule.exports = {\n\n  test: function(name, nodes) {\n    return name === 'block';\n  },\n\n  process: function(node) {\n    var newnode = [];\n    for (var i = 0; i < node.length; i++) {\n      if (node[i][0] !== 'decldelim') {\n        // not interesting, push and keep going\n        newnode.push(node[i]);\n        continue;\n      }\n      if (i === 1) { // No previous node, skip\n        continue;\n      }\n\n      // If the previous node is space, remove both the\n      // space and skip the delimiter\n      var prev = node[i - 1];\n      if (prev[0] === 's') {\n        newnode.splice(i - 1, 1);\n      } else {\n        newnode.push(node[i]);\n      }\n    }\n    return newnode;\n  }\n\n};\n\n},{}],4:[function(require,module,exports){\n// TODO: support \\9 at the end of a value\n// requires gonzales fix\n// filed bug #9, oh sweet irony\n// https://github.com/css/gonzales/issues/9\n\nmodule.exports = {\n\n  test: function(name, nodes) {\n    // only looking for * or _ in front of a property\n    if (name !== 'declaration') {\n      return false;\n    }\n    var first = nodes[1][1].charAt(0);\n    return first === '_' || first === '*';\n  },\n\n  process: function(node) {\n    // if the prefix is in the map, keep the declaration\n    // but strip the prefix first\n    // if prefix not in the map, drop the declaration\n    var prop = node[1][1][1];\n\n    if (this.hacksMap[prop.charAt(0)]) { // it's a keeper!\n      node[1][1][1] = prop.substring(1);\n      return node;\n    }\n    return false;\n  },\n\n  hacksMap: {},\n\n  setAllowedHacks: function(hacks) {\n    var map = this.hacksMap = {};\n    hacks.forEach(function(h) {\n      map[h] = 1;\n    });\n    return this;\n  }\n\n};\n\n},{}],5:[function(require,module,exports){\n// @media screen, projection AND (color) {}\n/*\n['stylesheet',\n  ['atruler',\n    ['atkeyword',\n      ['ident', 'media']],\n    ['atrulerq',\n      ['s', ' '],\n      ['ident', 'screen'],\n      ['operator', ','],\n      ['s', ' '],\n      ['ident', 'projection'],\n      ['s', ' '],\n      ['ident', 'AND'],\n      ['s', ' '],\n      ['braces', '(', ')',\n        ['ident', 'color']],\n      ['s', ' ']],\n    ['atrulers']]]\n*/\n\nmodule.exports = {\n\n  test: function(name, nodes) {\n    return name === 'atruler' && nodes[1][1] === 'media';\n  },\n\n  process: function(node) {\n    var query = node[2];\n    for (var i = 0; i < query.length; i++) {\n      if (query[i][0] === 'braces') {\n        return false;\n      }\n      if (query[i][0] === 'ident' &&\n          this.unsupported.indexOf(query[i][1]) !== -1) {\n        return false;\n      }\n    }\n    return node;\n  },\n\n  unsupported: ['AND', 'NOT', 'OR']\n};\n\n},{}],6:[function(require,module,exports){\nmodule.exports = {\n\n  test: function(name, nodes) {\n    // only looking for prefixed properties\n    // node is e.g. [ 'property', [ 'ident', '-webkit-border-radius' ] ]\n    return name === 'declaration' && nodes[1][1].charAt(0) === '-';\n  },\n\n  process: function(node) {\n    // if wrong for the current browser, drop the declaration\n    if (node[1][1][1].indexOf(this.prefix) !== 0) {\n      return false;\n    }\n    return node;\n  },\n\n  prefix: null,\n\n  setAllowedPrefix: function(prefix) {\n    this.prefix = '-' + prefix + '-';\n    return this;\n  },\n\n  setNoPrefix: function() {\n    this.prefix = null;\n    return this;\n  }\n\n};\n\n},{}],7:[function(require,module,exports){\nmodule.exports = {\n\n  test: function(name, nodes) {\n    // prefixes are fine, worry about all others\n    return name === 'declaration' && nodes[1][1].charAt(0) !== '-';\n  },\n\n  process: function(node) {\n    var prop = node[1][1][1];\n    if (this.propertyMap[prop]) { // ok, known prop\n      return node;\n    }\n    return false;\n  },\n\n  propertyMap: {},\n\n  setProperties: function(allowed) {\n    var props = this.propertyMap = {};\n    allowed.forEach(function(p) {\n      props[p] = 1;\n    });\n    return this;\n  }\n\n};\n\n},{}],8:[function(require,module,exports){\n/* MIT license */\nvar convert = require(\"color-convert\");\n\nmodule.exports = {\n   getRgba: getRgba,\n   getHsla: getHsla,\n   getRgb: getRgb,\n   getHsl: getHsl,\n   getAlpha: getAlpha,\n\n   hexString: hexString,\n   rgbString: rgbString,\n   rgbaString: rgbaString,\n   percentString: percentString,\n   percentaString: percentaString,\n   hslString: hslString,\n   hslaString: hslaString,\n   keyword: keyword\n}\n\nfunction getRgba(string) {\n   if (!string) {\n      return;\n   }\n   var abbr =  /^#([a-fA-F0-9]{3})$/,\n       hex =  /^#([a-fA-F0-9]{6})$/,\n       rgba = /^rgba?\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(?:,\\s*([\\d\\.]+)\\s*)?\\)$/,\n       per = /^rgba?\\(\\s*([\\d\\.]+)\\%\\s*,\\s*([\\d\\.]+)\\%\\s*,\\s*([\\d\\.]+)\\%\\s*(?:,\\s*([\\d\\.]+)\\s*)?\\)$/,\n       keyword = /(\\D+)/;\n\n   var rgb = [0, 0, 0],\n       a = 1,\n       match = string.match(abbr);\n   if (match) {\n      match = match[1];\n      for (var i = 0; i < rgb.length; i++) {\n         rgb[i] = parseInt(match[i] + match[i], 16);\n      }\n   }\n   else if (match = string.match(hex)) {\n      match = match[1];\n      for (var i = 0; i < rgb.length; i++) {\n         rgb[i] = parseInt(match.slice(i * 2, i * 2 + 2), 16);\n      }\n   }\n   else if (match = string.match(rgba)) {\n      for (var i = 0; i < rgb.length; i++) {\n         rgb[i] = parseInt(match[i + 1]);\n      }\n      a = parseFloat(match[4]);\n   }\n   else if (match = string.match(per)) {\n      for (var i = 0; i < rgb.length; i++) {\n         rgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);\n      }\n      a = parseFloat(match[4]);\n   }\n   else if (match = string.match(keyword)) {\n      if (match[1] == \"transparent\") {\n         return [0, 0, 0, 0];\n      }\n      rgb = convert.keyword2rgb(match[1]);\n      if (!rgb) {\n         return;\n      }\n   }\n\n   for (var i = 0; i < rgb.length; i++) {\n      rgb[i] = scale(rgb[i], 0, 255);\n   }\n   if (!a && a != 0) {\n      a = 1;\n   }\n   else {\n      a = scale(a, 0, 1);\n   }\n   rgb.push(a);\n   return rgb;\n}\n\nfunction getHsla(string) {\n   if (!string) {\n      return;\n   }\n   var hsl = /^hsla?\\(\\s*(\\d+)\\s*,\\s*([\\d\\.]+)%\\s*,\\s*([\\d\\.]+)%\\s*(?:,\\s*([\\d\\.]+)\\s*)?\\)/;\n   var match = string.match(hsl);\n   if (match) {\n      var h = scale(parseInt(match[1]), 0, 360),\n          s = scale(parseFloat(match[2]), 0, 100),\n          l = scale(parseFloat(match[3]), 0, 100),\n          a = scale(parseFloat(match[4]) || 1, 0, 1);\n      return [h, s, l, a];\n   }\n}\n\nfunction getRgb(string) {\n   return getRgba(string).slice(0, 3);\n}\n\nfunction getHsl(string) {\n   return getHsla(string).slice(0, 3);\n}\n\nfunction getAlpha(string) {\n   var vals = getRgba(string);\n   if (vals) {\n      return vals[3];\n   }\n   else if (vals = getHsla(string)) {\n      return vals[3];\n   }\n}\n\n// generators\nfunction hexString(rgb) {\n   return \"#\" + hexDouble(rgb[0]) + hexDouble(rgb[1])\n              + hexDouble(rgb[2]);\n}\n\nfunction rgbString(rgba, alpha) {\n   if (alpha < 1 || (rgba[3] && rgba[3] < 1)) {\n      return rgbaString(rgba, alpha);\n   }\n   return \"rgb(\" + rgba[0] + \", \" + rgba[1] + \", \" + rgba[2] + \")\";\n}\n\nfunction rgbaString(rgba, alpha) {\n   if (alpha === undefined) {\n      alpha = (rgba[3] !== undefined ? rgba[3] : 1);\n   }\n   return \"rgba(\" + rgba[0] + \", \" + rgba[1] + \", \" + rgba[2]\n           + \", \" + alpha + \")\";\n}\n\nfunction percentString(rgba, alpha) {\n   if (alpha < 1 || (rgba[3] && rgba[3] < 1)) {\n      return percentaString(rgba, alpha);\n   }\n   var r = Math.round(rgba[0]/255 * 100),\n       g = Math.round(rgba[1]/255 * 100),\n       b = Math.round(rgba[2]/255 * 100);\n\n   return \"rgb(\" + r + \"%, \" + g + \"%, \" + b + \"%)\";\n}\n\nfunction percentaString(rgba, alpha) {\n   var r = Math.round(rgba[0]/255 * 100),\n       g = Math.round(rgba[1]/255 * 100),\n       b = Math.round(rgba[2]/255 * 100);\n   return \"rgba(\" + r + \"%, \" + g + \"%, \" + b + \"%, \" + (alpha || rgba[3] || 1) + \")\";\n}\n\nfunction hslString(hsla, alpha) {\n   if (alpha < 1 || (hsla[3] && hsla[3] < 1)) {\n      return hslaString(hsla, alpha);\n   }\n   return \"hsl(\" + hsla[0] + \", \" + hsla[1] + \"%, \" + hsla[2] + \"%)\";\n}\n\nfunction hslaString(hsla, alpha) {\n   if (alpha === undefined) {\n      alpha = (hsla[3] !== undefined ? hsla[3] : 1);\n   }\n   return \"hsla(\" + hsla[0] + \", \" + hsla[1] + \"%, \" + hsla[2] + \"%, \"\n           + alpha + \")\";\n}\n\nfunction keyword(rgb) {\n   return convert.rgb2keyword(rgb.slice(0, 3));\n}\n\n// helpers\nfunction scale(num, min, max) {\n   return Math.min(Math.max(min, num), max);\n}\n\nfunction hexDouble(num) {\n  var str = num.toString(16).toUpperCase();\n  return (str.length < 2) ? \"0\" + str : str;\n}\n\n},{\"color-convert\":10}],9:[function(require,module,exports){\n/* MIT license */\n\nmodule.exports = {\n  rgb2hsl: rgb2hsl,\n  rgb2hsv: rgb2hsv,\n  rgb2cmyk: rgb2cmyk,\n  rgb2keyword: rgb2keyword,\n  rgb2xyz: rgb2xyz,\n  rgb2lab: rgb2lab,\n\n  hsl2rgb: hsl2rgb,\n  hsl2hsv: hsl2hsv,\n  hsl2cmyk: hsl2cmyk,\n  hsl2keyword: hsl2keyword,\n\n  hsv2rgb: hsv2rgb,\n  hsv2hsl: hsv2hsl,\n  hsv2cmyk: hsv2cmyk,\n  hsv2keyword: hsv2keyword,\n\n  cmyk2rgb: cmyk2rgb,\n  cmyk2hsl: cmyk2hsl,\n  cmyk2hsv: cmyk2hsv,\n  cmyk2keyword: cmyk2keyword,\n  \n  keyword2rgb: keyword2rgb,\n  keyword2hsl: keyword2hsl,\n  keyword2hsv: keyword2hsv,\n  keyword2cmyk: keyword2cmyk,\n  \n  xyz2rgb: xyz2rgb,\n}\n\n\nfunction rgb2hsl(rgb) {\n  var r = rgb[0]/255,\n      g = rgb[1]/255,\n      b = rgb[2]/255,\n      min = Math.min(r, g, b),\n      max = Math.max(r, g, b),\n      delta = max - min,\n      h, s, l;\n\n  if (max == min)\n    h = 0;\n  else if (r == max) \n    h = (g - b) / delta; \n  else if (g == max)\n    h = 2 + (b - r) / delta; \n  else if (b == max)\n    h = 4 + (r - g)/ delta;\n\n  h = Math.min(h * 60, 360);\n\n  if (h < 0)\n    h += 360;\n\n  l = (min + max) / 2;\n\n  if (max == min)\n    s = 0;\n  else if (l <= 0.5)\n    s = delta / (max + min);\n  else\n    s = delta / (2 - max - min);\n\n  return [h, s * 100, l * 100];\n}\n\nfunction rgb2hsv(rgb) {\n  var r = rgb[0],\n      g = rgb[1],\n      b = rgb[2],\n      min = Math.min(r, g, b),\n      max = Math.max(r, g, b),\n      delta = max - min,\n      h, s, v;\n\n  if (max == 0)\n    s = 0;\n  else\n    s = (delta/max * 1000)/10;\n\n  if (max == min)\n    h = 0;\n  else if (r == max) \n    h = (g - b) / delta; \n  else if (g == max)\n    h = 2 + (b - r) / delta; \n  else if (b == max)\n    h = 4 + (r - g) / delta;\n\n  h = Math.min(h * 60, 360);\n\n  if (h < 0) \n    h += 360;\n\n  v = ((max / 255) * 1000) / 10;\n\n  return [h, s, v];\n}\n\nfunction rgb2cmyk(rgb) {\n  var r = rgb[0] / 255,\n      g = rgb[1] / 255,\n      b = rgb[2] / 255,\n      c, m, y, k;\n      \n  k = Math.min(1 - r, 1 - g, 1 - b);\n  c = (1 - r - k) / (1 - k);\n  m = (1 - g - k) / (1 - k);\n  y = (1 - b - k) / (1 - k);\n  return [c * 100, m * 100, y * 100, k * 100];\n}\n\nfunction rgb2keyword(rgb) {\n  return reverseKeywords[JSON.stringify(rgb)];\n}\n\nfunction rgb2xyz(rgb) {\n  var r = rgb[0] / 255,\n      g = rgb[1] / 255,\n      b = rgb[2] / 255;\n\n  // assume sRGB\n  r = r > 0.04045 ? Math.pow(((r + 0.055) / 1.055), 2.4) : (r / 12.92);\n  g = g > 0.04045 ? Math.pow(((g + 0.055) / 1.055), 2.4) : (g / 12.92);\n  b = b > 0.04045 ? Math.pow(((b + 0.055) / 1.055), 2.4) : (b / 12.92);\n  \n  var x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);\n  var y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);\n  var z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);\n\n  return [x * 100, y *100, z * 100];\n}\n\nfunction rgb2lab(rgb) {\n  var xyz = rgb2xyz(rgb),\n        x = xyz[0],\n        y = xyz[1],\n        z = xyz[2],\n        l, a, b;\n\n  x /= 95.047;\n  y /= 100;\n  z /= 108.883;\n\n  x = x > 0.008856 ? Math.pow(x, 1/3) : (7.787 * x) + (16 / 116);\n  y = y > 0.008856 ? Math.pow(y, 1/3) : (7.787 * y) + (16 / 116);\n  z = z > 0.008856 ? Math.pow(z, 1/3) : (7.787 * z) + (16 / 116);\n\n  l = (116 * y) - 16;\n  a = 500 * (x - y);\n  b = 200 * (y - z);\n  \n  return [l, a, b];\n}\n\n\nfunction hsl2rgb(hsl) {\n  var h = hsl[0] / 360,\n      s = hsl[1] / 100,\n      l = hsl[2] / 100,\n      t1, t2, t3, rgb, val;\n\n  if (s == 0) {\n    val = l * 255;\n    return [val, val, val];\n  }\n\n  if (l < 0.5)\n    t2 = l * (1 + s);\n  else\n    t2 = l + s - l * s;\n  t1 = 2 * l - t2;\n\n  rgb = [0, 0, 0];\n  for (var i = 0; i < 3; i++) {\n    t3 = h + 1 / 3 * - (i - 1);\n    t3 < 0 && t3++;\n    t3 > 1 && t3--;\n\n    if (6 * t3 < 1)\n      val = t1 + (t2 - t1) * 6 * t3;\n    else if (2 * t3 < 1)\n      val = t2;\n    else if (3 * t3 < 2)\n      val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;\n    else\n      val = t1;\n\n    rgb[i] = val * 255;\n  }\n  \n  return rgb;\n}\n\nfunction hsl2hsv(hsl) {\n  var h = hsl[0],\n      s = hsl[1] / 100,\n      l = hsl[2] / 100,\n      sv, v;\n  l *= 2;\n  s *= (l <= 1) ? l : 2 - l;\n  v = (l + s) / 2;\n  sv = (2 * s) / (l + s);\n  return [h, s * 100, v * 100];\n}\n\nfunction hsl2cmyk(args) {\n  return rgb2cmyk(hsl2rgb(args));\n}\n\nfunction hsl2keyword(args) {\n  return rgb2keyword(hsl2rgb(args));\n}\n\n\nfunction hsv2rgb(hsv) {\n  var h = hsv[0] / 60,\n      s = hsv[1] / 100,\n      v = hsv[2] / 100,\n      hi = Math.floor(h) % 6;\n\n  var f = h - Math.floor(h),\n      p = 255 * v * (1 - s),\n      q = 255 * v * (1 - (s * f)),\n      t = 255 * v * (1 - (s * (1 - f))),\n      v = 255 * v;\n\n  switch(hi) {\n    case 0:\n      return [v, t, p];\n    case 1:\n      return [q, v, p];\n    case 2:\n      return [p, v, t];\n    case 3:\n      return [p, q, v];\n    case 4:\n      return [t, p, v];\n    case 5:\n      return [v, p, q];\n  }\n}\n\nfunction hsv2hsl(hsv) {\n  var h = hsv[0],\n      s = hsv[1] / 100,\n      v = hsv[2] / 100,\n      sl, l;\n\n  l = (2 - s) * v;  \n  sl = s * v;\n  sl /= (l <= 1) ? l : 2 - l;\n  l /= 2;\n  return [h, sl * 100, l * 100];\n}\n\nfunction hsv2cmyk(args) {\n  return rgb2cmyk(hsv2rgb(args));\n}\n\nfunction hsv2keyword(args) {\n  return rgb2keyword(hsv2rgb(args));\n}\n\nfunction cmyk2rgb(cmyk) {\n  var c = cmyk[0] / 100,\n      m = cmyk[1] / 100,\n      y = cmyk[2] / 100,\n      k = cmyk[3] / 100,\n      r, g, b;\n\n  r = 1 - Math.min(1, c * (1 - k) + k);\n  g = 1 - Math.min(1, m * (1 - k) + k);\n  b = 1 - Math.min(1, y * (1 - k) + k);\n  return [r * 255, g * 255, b * 255];\n}\n\nfunction cmyk2hsl(args) {\n  return rgb2hsl(cmyk2rgb(args));\n}\n\nfunction cmyk2hsv(args) {\n  return rgb2hsv(cmyk2rgb(args));\n}\n\nfunction cmyk2keyword(args) {\n  return rgb2keyword(cmyk2rgb(args));\n}\n\n\nfunction xyz2rgb(xyz) {\n  var x = xyz[0] / 100,\n      y = xyz[1] / 100,\n      z = xyz[2] / 100,\n      r, g, b;\n\n  r = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);\n  g = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);\n  b = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);\n\n  // assume sRGB\n  r = r > 0.0031308 ? ((1.055 * Math.pow(r, 1.0 / 2.4)) - 0.055)\n    : r = (r * 12.92);\n\n  g = g > 0.0031308 ? ((1.055 * Math.pow(g, 1.0 / 2.4)) - 0.055)\n    : g = (g * 12.92);\n        \n  b = b > 0.0031308 ? ((1.055 * Math.pow(b, 1.0 / 2.4)) - 0.055)\n    : b = (b * 12.92);\n\n  r = (r < 0) ? 0 : r;\n  g = (g < 0) ? 0 : g;\n  b = (b < 0) ? 0 : b;\n\n  return [r * 255, g * 255, b * 255];\n}\n\n\nfunction keyword2rgb(keyword) {\n  return cssKeywords[keyword];\n}\n\nfunction keyword2hsl(args) {\n  return rgb2hsl(keyword2rgb(args));\n}\n\nfunction keyword2hsv(args) {\n  return rgb2hsv(keyword2rgb(args));\n}\n\nfunction keyword2cmyk(args) {\n  return rgb2cmyk(keyword2rgb(args));\n}\n\nvar cssKeywords = {\n  aliceblue:  [240,248,255],\n  antiquewhite: [250,235,215],\n  aqua: [0,255,255],\n  aquamarine: [127,255,212],\n  azure:  [240,255,255],\n  beige:  [245,245,220],\n  bisque: [255,228,196],\n  black:  [0,0,0],\n  blanchedalmond: [255,235,205],\n  blue: [0,0,255],\n  blueviolet: [138,43,226],\n  brown:  [165,42,42],\n  burlywood:  [222,184,135],\n  cadetblue:  [95,158,160],\n  chartreuse: [127,255,0],\n  chocolate:  [210,105,30],\n  coral:  [255,127,80],\n  cornflowerblue: [100,149,237],\n  cornsilk: [255,248,220],\n  crimson:  [220,20,60],\n  cyan: [0,255,255],\n  darkblue: [0,0,139],\n  darkcyan: [0,139,139],\n  darkgoldenrod:  [184,134,11],\n  darkgray: [169,169,169],\n  darkgreen:  [0,100,0],\n  darkgrey: [169,169,169],\n  darkkhaki:  [189,183,107],\n  darkmagenta:  [139,0,139],\n  darkolivegreen: [85,107,47],\n  darkorange: [255,140,0],\n  darkorchid: [153,50,204],\n  darkred:  [139,0,0],\n  darksalmon: [233,150,122],\n  darkseagreen: [143,188,143],\n  darkslateblue:  [72,61,139],\n  darkslategray:  [47,79,79],\n  darkslategrey:  [47,79,79],\n  darkturquoise:  [0,206,209],\n  darkviolet: [148,0,211],\n  deeppink: [255,20,147],\n  deepskyblue:  [0,191,255],\n  dimgray:  [105,105,105],\n  dimgrey:  [105,105,105],\n  dodgerblue: [30,144,255],\n  firebrick:  [178,34,34],\n  floralwhite:  [255,250,240],\n  forestgreen:  [34,139,34],\n  fuchsia:  [255,0,255],\n  gainsboro:  [220,220,220],\n  ghostwhite: [248,248,255],\n  gold: [255,215,0],\n  goldenrod:  [218,165,32],\n  gray: [128,128,128],\n  green:  [0,128,0],\n  greenyellow:  [173,255,47],\n  grey: [128,128,128],\n  honeydew: [240,255,240],\n  hotpink:  [255,105,180],\n  indianred:  [205,92,92],\n  indigo: [75,0,130],\n  ivory:  [255,255,240],\n  khaki:  [240,230,140],\n  lavender: [230,230,250],\n  lavenderblush:  [255,240,245],\n  lawngreen:  [124,252,0],\n  lemonchiffon: [255,250,205],\n  lightblue:  [173,216,230],\n  lightcoral: [240,128,128],\n  lightcyan:  [224,255,255],\n  lightgoldenrodyellow: [250,250,210],\n  lightgray:  [211,211,211],\n  lightgreen: [144,238,144],\n  lightgrey:  [211,211,211],\n  lightpink:  [255,182,193],\n  lightsalmon:  [255,160,122],\n  lightseagreen:  [32,178,170],\n  lightskyblue: [135,206,250],\n  lightslategray: [119,136,153],\n  lightslategrey: [119,136,153],\n  lightsteelblue: [176,196,222],\n  lightyellow:  [255,255,224],\n  lime: [0,255,0],\n  limegreen:  [50,205,50],\n  linen:  [250,240,230],\n  magenta:  [255,0,255],\n  maroon: [128,0,0],\n  mediumaquamarine: [102,205,170],\n  mediumblue: [0,0,205],\n  mediumorchid: [186,85,211],\n  mediumpurple: [147,112,219],\n  mediumseagreen: [60,179,113],\n  mediumslateblue:  [123,104,238],\n  mediumspringgreen:  [0,250,154],\n  mediumturquoise:  [72,209,204],\n  mediumvioletred:  [199,21,133],\n  midnightblue: [25,25,112],\n  mintcream:  [245,255,250],\n  mistyrose:  [255,228,225],\n  moccasin: [255,228,181],\n  navajowhite:  [255,222,173],\n  navy: [0,0,128],\n  oldlace:  [253,245,230],\n  olive:  [128,128,0],\n  olivedrab:  [107,142,35],\n  orange: [255,165,0],\n  orangered:  [255,69,0],\n  orchid: [218,112,214],\n  palegoldenrod:  [238,232,170],\n  palegreen:  [152,251,152],\n  paleturquoise:  [175,238,238],\n  palevioletred:  [219,112,147],\n  papayawhip: [255,239,213],\n  peachpuff:  [255,218,185],\n  peru: [205,133,63],\n  pink: [255,192,203],\n  plum: [221,160,221],\n  powderblue: [176,224,230],\n  purple: [128,0,128],\n  red:  [255,0,0],\n  rosybrown:  [188,143,143],\n  royalblue:  [65,105,225],\n  saddlebrown:  [139,69,19],\n  salmon: [250,128,114],\n  sandybrown: [244,164,96],\n  seagreen: [46,139,87],\n  seashell: [255,245,238],\n  sienna: [160,82,45],\n  silver: [192,192,192],\n  skyblue:  [135,206,235],\n  slateblue:  [106,90,205],\n  slategray:  [112,128,144],\n  slategrey:  [112,128,144],\n  snow: [255,250,250],\n  springgreen:  [0,255,127],\n  steelblue:  [70,130,180],\n  tan:  [210,180,140],\n  teal: [0,128,128],\n  thistle:  [216,191,216],\n  tomato: [255,99,71],\n  turquoise:  [64,224,208],\n  violet: [238,130,238],\n  wheat:  [245,222,179],\n  white:  [255,255,255],\n  whitesmoke: [245,245,245],\n  yellow: [255,255,0],\n  yellowgreen:  [154,205,50]\n};\n\nvar reverseKeywords = {};\nfor (var key in cssKeywords) {\n  reverseKeywords[JSON.stringify(cssKeywords[key])] = key;\n}\n\n},{}],10:[function(require,module,exports){\nvar conversions = require(\"./conversions\");\n\nvar exports = {};\nmodule.exports = exports;\n\nfor (var func in conversions) {\n  // export rgb2hslRaw\n  exports[func + \"Raw\"] =  (function(func) {\n    // accept array or plain args\n    return function(arg) {\n      if (typeof arg == \"number\")\n        arg = Array.prototype.slice.call(arguments);\n      return conversions[func](arg);\n    }\n  })(func);\n\n  var pair = /(\\w+)2(\\w+)/.exec(func),\n      from = pair[1],\n      to = pair[2];\n\n  // export rgb2hsl and [\"rgb\"][\"hsl\"]\n  exports[from] = exports[from] || {};\n\n  exports[from][to] = exports[func] = (function(func) { \n    return function(arg) {\n      if (typeof arg == \"number\")\n        arg = Array.prototype.slice.call(arguments);\n      \n      var val = conversions[func](arg);\n      if (typeof val == \"string\" || val === undefined)\n        return val; // keyword\n\n      for (var i = 0; i < val.length; i++)\n        val[i] = Math.round(val[i]);\n      return val;\n    }\n  })(func);\n}\n},{\"./conversions\":9}],11:[function(require,module,exports){\n/* MIT license */\nvar convert = require(\"color-convert\"),\n    string = require(\"color-string\");\n\nmodule.exports = function(cssString) {\n   return new Color(cssString);\n};\n\nvar Color = function(cssString) {\n   this.values = {\n      rgb: [0, 0, 0],\n      hsl: [0, 0, 0],\n      hsv: [0, 0, 0],\n      cmyk: [0, 0, 0, 0],\n      alpha: 1\n   }\n\n   // parse Color() argument\n   if (typeof cssString == \"string\") {\n      var vals = string.getRgba(cssString);\n      if (vals) {\n         this.setValues(\"rgb\", vals);\n      }\n      else if(vals = string.getHsla(cssString)) {\n         this.setValues(\"hsl\", vals);\n      }\n   }\n   else if (typeof cssString == \"object\") {\n      var vals = cssString;\n      if(vals[\"r\"] !== undefined || vals[\"red\"] !== undefined) {\n         this.setValues(\"rgb\", vals)\n      }\n      else if(vals[\"l\"] !== undefined || vals[\"lightness\"] !== undefined) {\n         this.setValues(\"hsl\", vals)\n      }\n      else if(vals[\"v\"] !== undefined || vals[\"value\"] !== undefined) {\n         this.setValues(\"hsv\", vals)\n      }\n      else if(vals[\"c\"] !== undefined || vals[\"cyan\"] !== undefined) {\n         this.setValues(\"cmyk\", vals)\n      }\n   }\n}\n\nColor.prototype = {\n   rgb: function (vals) {\n      return this.setSpace(\"rgb\", arguments);\n   },\n   hsl: function(vals) {\n      return this.setSpace(\"hsl\", arguments);\n   },\n   hsv: function(vals) {\n      return this.setSpace(\"hsv\", arguments);\n   },\n   cmyk: function(vals) {\n      return this.setSpace(\"cmyk\", arguments);\n   },\n\n   rgbArray: function() {\n      return this.values.rgb;\n   },\n   hslArray: function() {\n      return this.values.hsl;\n   },\n   hsvArray: function() {\n      return this.values.hsv;\n   },\n   cmykArray: function() {\n      return this.values.cmyk;\n   },\n   rgbaArray: function() {\n      var rgb = this.values.rgb;\n      return rgb.concat([this.values.alpha]);\n   },\n   hslaArray: function() {\n      var hsl = this.values.hsl;\n      return hsl.concat([this.values.alpha]);\n   },\n\n   alpha: function(val) {\n      if (val === undefined) {\n         return this.values.alpha;\n      }\n      this.setValues(\"alpha\", val);\n      return this;\n   },\n\n   red: function(val) {\n      return this.setChannel(\"rgb\", 0, val);\n   },\n   green: function(val) {\n      return this.setChannel(\"rgb\", 1, val);\n   },\n   blue: function(val) {\n      return this.setChannel(\"rgb\", 2, val);\n   },\n   hue: function(val) {\n      return this.setChannel(\"hsl\", 0, val);\n   },\n   saturation: function(val) {\n      return this.setChannel(\"hsl\", 1, val);\n   },\n   lightness: function(val) {\n      return this.setChannel(\"hsl\", 2, val);\n   },\n   saturationv: function(val) {\n      return this.setChannel(\"hsv\", 1, val);\n   },\n   value: function(val) {\n      return this.setChannel(\"hsv\", 2, val);\n   },\n   cyan: function(val) {\n      return this.setChannel(\"cmyk\", 0, val);\n   },\n   magenta: function(val) {\n      return this.setChannel(\"cmyk\", 1, val);\n   },\n   yellow: function(val) {\n      return this.setChannel(\"cmyk\", 2, val);\n   },\n   black: function(val) {\n      return this.setChannel(\"cmyk\", 3, val);\n   },\n\n   hexString: function() {\n      return string.hexString(this.values.rgb);\n   },\n   rgbString: function() {\n      return string.rgbString(this.values.rgb, this.values.alpha);\n   },\n   rgbaString: function() {\n      return string.rgbaString(this.values.rgb, this.values.alpha);\n   },\n   percentString: function() {\n      return string.percentString(this.values.rgb, this.values.alpha);\n   },\n   hslString: function() {\n      return string.hslString(this.values.hsl, this.values.alpha);\n   },\n   hslaString: function() {\n      return string.hslaString(this.values.hsl, this.values.alpha);\n   },\n   keyword: function() {\n      return string.keyword(this.values.rgb, this.values.alpha);\n   },\n\n   luminosity: function() {\n      // http://www.w3.org/TR/WCAG20/#relativeluminancedef\n      var rgb = this.values.rgb;\n      var lum = [];\n      for (var i = 0; i < rgb.length; i++) {\n         var chan = rgb[i] / 255;\n         lum[i] = (chan <= 0.03928) ? chan / 12.92\n                  : Math.pow(((chan + 0.055) / 1.055), 2.4)\n      }\n      return 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];\n   },\n\n   contrast: function(color2) {\n      // http://www.w3.org/TR/WCAG20/#contrast-ratiodef\n      var lum1 = this.luminosity();\n      var lum2 = color2.luminosity();\n      if (lum1 > lum2) {\n         return (lum1 + 0.05) / (lum2 + 0.05)\n      };\n      return (lum2 + 0.05) / (lum1 + 0.05);\n   },\n\n   level: function(color2) {\n     var contrastRatio = this.contrast(color2);\n     return (contrastRatio >= 7.1)\n       ? 'AAA'\n       : (contrastRatio >= 4.5)\n        ? 'AA'\n        : '';\n   },\n\n   dark: function() {\n      // YIQ equation from http://24ways.org/2010/calculating-color-contrast\n      var rgb = this.values.rgb,\n          yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000;\n   \treturn yiq < 128;\n   },\n\n   light: function() {\n      return !this.dark();\n   },\n\n   negate: function() {\n      var rgb = []\n      for (var i = 0; i < 3; i++) {\n         rgb[i] = 255 - this.values.rgb[i];\n      }\n      this.setValues(\"rgb\", rgb);\n      return this;\n   },\n\n   lighten: function(ratio) {\n      this.values.hsl[2] += this.values.hsl[2] * ratio;\n      this.setValues(\"hsl\", this.values.hsl);\n      return this;\n   },\n\n   darken: function(ratio) {\n      this.values.hsl[2] -= this.values.hsl[2] * ratio;\n      this.setValues(\"hsl\", this.values.hsl);\n      return this;\n   },\n\n   saturate: function(ratio) {\n      this.values.hsl[1] += this.values.hsl[1] * ratio;\n      this.setValues(\"hsl\", this.values.hsl);\n      return this;\n   },\n\n   desaturate: function(ratio) {\n      this.values.hsl[1] -= this.values.hsl[1] * ratio;\n      this.setValues(\"hsl\", this.values.hsl);\n      return this;\n   },\n\n   greyscale: function() {\n      var rgb = this.values.rgb;\n      // http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale\n      var val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;\n      this.setValues(\"rgb\", [val, val, val]);\n      return this;\n   },\n\n   clearer: function(ratio) {\n      this.setValues(\"alpha\", this.values.alpha - (this.values.alpha * ratio));\n      return this;\n   },\n\n   opaquer: function(ratio) {\n      this.setValues(\"alpha\", this.values.alpha + (this.values.alpha * ratio));\n      return this;\n   },\n\n   rotate: function(degrees) {\n      var hue = this.values.hsl[0];\n      hue = (hue + degrees) % 360;\n      hue = hue < 0 ? 360 + hue : hue;\n      this.values.hsl[0] = hue;\n      this.setValues(\"hsl\", this.values.hsl);\n      return this;\n   },\n\n   mix: function(color2, weight) {\n      weight = 1 - (weight == null ? 0.5 : weight);\n\n      // algorithm from Sass's mix(). Ratio of first color in mix is\n      // determined by the alphas of both colors and the weight\n      var t1 = weight * 2 - 1,\n          d = this.alpha() - color2.alpha();\n\n      var weight1 = (((t1 * d == -1) ? t1 : (t1 + d) / (1 + t1 * d)) + 1) / 2;\n      var weight2 = 1 - weight1;\n\n      var rgb = this.rgbArray();\n      var rgb2 = color2.rgbArray();\n\n      for (var i = 0; i < rgb.length; i++) {\n         rgb[i] = rgb[i] * weight1 + rgb2[i] * weight2;\n      }\n      this.setValues(\"rgb\", rgb);\n\n      var alpha = this.alpha() * weight + color2.alpha() * (1 - weight);\n      this.setValues(\"alpha\", alpha);\n\n      return this;\n   },\n\n   toJSON: function() {\n     return this.rgb();\n   },\n\n   clone: function() {\n     return new Color(this.rgb());\n   },\n}\n\n\nColor.prototype.getValues = function(space) {\n   var vals = {};\n   for (var i = 0; i < space.length; i++) {\n      vals[space[i]] = this.values[space][i];\n   }\n   if (this.values.alpha != 1) {\n      vals[\"a\"] = this.values.alpha;\n   }\n   // {r: 255, g: 255, b: 255, a: 0.4}\n   return vals;\n}\n\nColor.prototype.setValues = function(space, vals) {\n   var spaces = {\n      \"rgb\": [\"red\", \"green\", \"blue\"],\n      \"hsl\": [\"hue\", \"saturation\", \"lightness\"],\n      \"hsv\": [\"hue\", \"saturation\", \"value\"],\n      \"cmyk\": [\"cyan\", \"magenta\", \"yellow\", \"black\"]\n   };\n\n   var maxes = {\n      \"rgb\": [255, 255, 255],\n      \"hsl\": [360, 100, 100],\n      \"hsv\": [360, 100, 100],\n      \"cmyk\": [100, 100, 100, 100],\n   };\n\n   var alpha = 1;\n   if (space == \"alpha\") {\n      alpha = vals;\n   }\n   else if (vals.length) {\n      // [10, 10, 10]\n      this.values[space] = vals.slice(0, space.length);\n      alpha = vals[space.length];\n   }\n   else if (vals[space[0]] !== undefined) {\n      // {r: 10, g: 10, b: 10}\n      for (var i = 0; i < space.length; i++) {\n        this.values[space][i] = vals[space[i]];\n      }\n      alpha = vals.a;\n   }\n   else if (vals[spaces[space][0]] !== undefined) {\n      // {red: 10, green: 10, blue: 10}\n      var chans = spaces[space];\n      for (var i = 0; i < space.length; i++) {\n        this.values[space][i] = vals[chans[i]];\n      }\n      alpha = vals.alpha;\n   }\n   this.values.alpha = Math.max(0, Math.min(1, (alpha !== undefined ? alpha : this.values.alpha) ));\n   if (space == \"alpha\") {\n      return;\n   }\n\n   // convert to all the other color spaces\n   for (var sname in spaces) {\n      if (sname != space) {\n         this.values[sname] = convert[space][sname](this.values[space])\n      }\n\n      // cap values\n      for (var i = 0; i < sname.length; i++) {\n         var capped = Math.max(0, Math.min(maxes[sname][i], this.values[sname][i]));\n         this.values[sname][i] = Math.round(capped);\n      }\n   }\n   return true;\n}\n\nColor.prototype.setSpace = function(space, args) {\n   var vals = args[0];\n   if (vals === undefined) {\n      // color.rgb()\n      return this.getValues(space);\n   }\n   // color.rgb(10, 10, 10)\n   if (typeof vals == \"number\") {\n      vals = Array.prototype.slice.call(args);\n   }\n   this.setValues(space, vals);\n   return this;\n}\n\nColor.prototype.setChannel = function(space, index, val) {\n   if (val === undefined) {\n      // color.red()\n      return this.values[space][index];\n   }\n   // color.red(100)\n   this.values[space][index] = val;\n   this.setValues(space, this.values[space]);\n   return this;\n}\n\n},{\"color-convert\":13,\"color-string\":14}],12:[function(require,module,exports){\nmodule.exports=require(9)\n},{}],13:[function(require,module,exports){\nmodule.exports=require(10)\n},{\"./conversions\":12}],14:[function(require,module,exports){\nmodule.exports=require(8)\n},{\"color-convert\":16}],15:[function(require,module,exports){\nmodule.exports=require(9)\n},{}],16:[function(require,module,exports){\nmodule.exports=require(10)\n},{\"./conversions\":15}],17:[function(require,module,exports){\nvar color = require(\"color\");\nvar string = require(\"color-string\");\n\nexports.min = function min(c) {\n\n  if (Array.isArray(c)) {\n    var colour = color({\n      r: c[0],\n      g: c[1],\n      b: c[2],\n    });\n    if ('3' in c) {\n      colour.alpha(c[3]);\n    }\n  } else {\n    var colour = color(c);\n  }\n  var alpha = colour.values.alpha;\n  var rgb = colour.values.rgb;\n\n  if (rgb[0] === 0 && rgb[1] === 0 && rgb[2] === 0 && alpha === 0) {\n    return 'transparent';\n  }\n\n  if (alpha !== 1) {\n    // no choice, gotta be rgba\n    if (alpha < 1) {\n      alpha = String(alpha).replace('0.', '.');\n    }\n    return string\n      .rgbaString(rgb, alpha)\n      .replace(/ /g, '')\n      .toLowerCase();\n  }\n\n  // hex, short hex, or keyword\n  var hex = colour.hexString();\n  if (hex[1] === hex[2] && hex[3] === hex[4] && hex[5] === hex[6]) {\n    hex = ['#', hex[1], hex[3], hex[5]].join('');\n  }\n  var word = colour.keyword();\n  if (!word || hex.length < word.length) {\n    return hex.toLowerCase();\n  }\n  return word.toLowerCase();\n};\n\n\n// only key names that have shorter equivalents\n// e.g. \"red\" and \"blue\" are not here\nexports.keywords = {\n  \"aliceblue\": \"#f0f8ff\",\n  \"antiquewhite\": \"#faebd7\",\n  \"aquamarine\": \"#7fffd4\",\n  \"black\": \"#000\",\n  \"blanchedalmond\": \"#ffebcd\",\n  \"blueviolet\": \"#8a2be2\",\n  \"burlywood\": \"#deb887\",\n  \"cadetblue\": \"#5f9ea0\",\n  \"chartreuse\": \"#7fff00\",\n  \"chocolate\": \"#d2691e\",\n  \"cornflowerblue\": \"#6495ed\",\n  \"cornsilk\": \"#fff8dc\",\n  \"darkblue\": \"#00008b\",\n  \"darkcyan\": \"#008b8b\",\n  \"darkgoldenrod\": \"#b8860b\",\n  \"darkgray\": \"#a9a9a9\",\n  \"darkgreen\": \"#006400\",\n  \"darkgrey\": \"#a9a9a9\",\n  \"darkkhaki\": \"#bdb76b\",\n  \"darkmagenta\": \"#8b008b\",\n  \"darkolivegreen\": \"#556b2f\",\n  \"darkorange\": \"#ff8c00\",\n  \"darkorchid\": \"#9932cc\",\n  \"darksalmon\": \"#e9967a\",\n  \"darkseagreen\": \"#8fbc8f\",\n  \"darkslateblue\": \"#483d8b\",\n  \"darkslategray\": \"#2f4f4f\",\n  \"darkslategrey\": \"#2f4f4f\",\n  \"darkturquoise\": \"#00ced1\",\n  \"darkviolet\": \"#9400d3\",\n  \"deeppink\": \"#ff1493\",\n  \"deepskyblue\": \"#00bfff\",\n  \"dodgerblue\": \"#1e90ff\",\n  \"firebrick\": \"#b22222\",\n  \"floralwhite\": \"#fffaf0\",\n  \"forestgreen\": \"#228b22\",\n  \"fuchsia\": \"#f0f\",\n  \"gainsboro\": \"#dcdcdc\",\n  \"ghostwhite\": \"#f8f8ff\",\n  \"goldenrod\": \"#daa520\",\n  \"greenyellow\": \"#adff2f\",\n  \"honeydew\": \"#f0fff0\",\n  \"indianred\": \"#cd5c5c\",\n  \"lavender\": \"#e6e6fa\",\n  \"lavenderblush\": \"#fff0f5\",\n  \"lawngreen\": \"#7cfc00\",\n  \"lemonchiffon\": \"#fffacd\",\n  \"lightblue\": \"#add8e6\",\n  \"lightcoral\": \"#f08080\",\n  \"lightcyan\": \"#e0ffff\",\n  \"lightgoldenrodyellow\": \"#fafad2\",\n  \"lightgray\": \"#d3d3d3\",\n  \"lightgreen\": \"#90ee90\",\n  \"lightgrey\": \"#d3d3d3\",\n  \"lightpink\": \"#ffb6c1\",\n  \"lightsalmon\": \"#ffa07a\",\n  \"lightseagreen\": \"#20b2aa\",\n  \"lightskyblue\": \"#87cefa\",\n  \"lightslategray\": \"#789\",\n  \"lightslategrey\": \"#789\",\n  \"lightsteelblue\": \"#b0c4de\",\n  \"lightyellow\": \"#ffffe0\",\n  \"limegreen\": \"#32cd32\",\n  \"magenta\": \"#f0f\",\n  \"mediumaquamarine\": \"#66cdaa\",\n  \"mediumblue\": \"#0000cd\",\n  \"mediumorchid\": \"#ba55d3\",\n  \"mediumpurple\": \"#9370db\",\n  \"mediumseagreen\": \"#3cb371\",\n  \"mediumslateblue\": \"#7b68ee\",\n  \"mediumspringgreen\": \"#00fa9a\",\n  \"mediumturquoise\": \"#48d1cc\",\n  \"mediumvioletred\": \"#c71585\",\n  \"midnightblue\": \"#191970\",\n  \"mintcream\": \"#f5fffa\",\n  \"mistyrose\": \"#ffe4e1\",\n  \"moccasin\": \"#ffe4b5\",\n  \"navajowhite\": \"#ffdead\",\n  \"olivedrab\": \"#6b8e23\",\n  \"orangered\": \"#ff4500\",\n  \"palegoldenrod\": \"#eee8aa\",\n  \"palegreen\": \"#98fb98\",\n  \"paleturquoise\": \"#afeeee\",\n  \"palevioletred\": \"#db7093\",\n  \"papayawhip\": \"#ffefd5\",\n  \"peachpuff\": \"#ffdab9\",\n  \"powderblue\": \"#b0e0e6\",\n  \"rosybrown\": \"#bc8f8f\",\n  \"royalblue\": \"#4169e1\",\n  \"saddlebrown\": \"#8b4513\",\n  \"sandybrown\": \"#f4a460\",\n  \"seagreen\": \"#2e8b57\",\n  \"seashell\": \"#fff5ee\",\n  \"slateblue\": \"#6a5acd\",\n  \"slategray\": \"#708090\",\n  \"slategrey\": \"#708090\",\n  \"springgreen\": \"#00ff7f\",\n  \"steelblue\": \"#4682b4\",\n  \"turquoise\": \"#40e0d0\",\n  \"white\": \"#fff\",\n  \"whitesmoke\": \"#f5f5f5\",\n  \"yellow\": \"#ff0\",\n  \"yellowgreen\": \"#9acd32\"\n};\n\n\n},{\"color\":11,\"color-string\":8}],18:[function(require,module,exports){\nmodule.exports = [\n  \"align-content\",\n  \"align-items\",\n  \"align-self\",\n  \"alignment-baseline\",\n  \"animation\",\n  \"animation-delay\",\n  \"animation-direction\",\n  \"animation-duration\",\n  \"animation-fill-mode\",\n  \"animation-iteration-count\",\n  \"animation-name\",\n  \"animation-play-state\",\n  \"animation-timing-function\",\n  \"app-region\",\n  \"appearance\",\n  \"aspect-ratio\",\n  \"backface-visibility\",\n  \"background\",\n  \"background-attachment\",\n  \"background-blend-mode\",\n  \"background-clip\",\n  \"background-color\",\n  \"background-composite\",\n  \"background-image\",\n  \"background-origin\",\n  \"background-position\",\n  \"background-position-x\",\n  \"background-position-y\",\n  \"background-repeat\",\n  \"background-repeat-x\",\n  \"background-repeat-y\",\n  \"background-size\",\n  \"baseline-shift\",\n  \"border\",\n  \"border-after\",\n  \"border-after-color\",\n  \"border-after-style\",\n  \"border-after-width\",\n  \"border-before\",\n  \"border-before-color\",\n  \"border-before-style\",\n  \"border-before-width\",\n  \"border-bottom\",\n  \"border-bottom-color\",\n  \"border-bottom-left-radius\",\n  \"border-bottom-right-radius\",\n  \"border-bottom-style\",\n  \"border-bottom-width\",\n  \"border-collapse\",\n  \"border-color\",\n  \"border-end\",\n  \"border-end-color\",\n  \"border-end-style\",\n  \"border-end-width\",\n  \"border-fit\",\n  \"border-horizontal-spacing\",\n  \"border-image\",\n  \"border-image-outset\",\n  \"border-image-repeat\",\n  \"border-image-slice\",\n  \"border-image-source\",\n  \"border-image-width\",\n  \"border-left\",\n  \"border-left-color\",\n  \"border-left-style\",\n  \"border-left-width\",\n  \"border-radius\",\n  \"border-right\",\n  \"border-right-color\",\n  \"border-right-style\",\n  \"border-right-width\",\n  \"border-spacing\",\n  \"border-start\",\n  \"border-start-color\",\n  \"border-start-style\",\n  \"border-start-width\",\n  \"border-style\",\n  \"border-top\",\n  \"border-top-color\",\n  \"border-top-left-radius\",\n  \"border-top-right-radius\",\n  \"border-top-style\",\n  \"border-top-width\",\n  \"border-vertical-spacing\",\n  \"border-width\",\n  \"bottom\",\n  \"box-align\",\n  \"box-decoration-break\",\n  \"box-direction\",\n  \"box-flex\",\n  \"box-flex-group\",\n  \"box-lines\",\n  \"box-ordinal-group\",\n  \"box-orient\",\n  \"box-pack\",\n  \"box-reflect\",\n  \"box-shadow\",\n  \"box-sizing\",\n  \"buffered-rendering\",\n  \"caption-side\",\n  \"clear\",\n  \"clip\",\n  \"clip-path\",\n  \"clip-rule\",\n  \"color\",\n  \"color-interpolation\",\n  \"color-interpolation-filters\",\n  \"color-profile\",\n  \"color-rendering\",\n  \"column-break-after\",\n  \"column-break-before\",\n  \"column-break-inside\",\n  \"column-count\",\n  \"column-gap\",\n  \"column-rule\",\n  \"column-rule-color\",\n  \"column-rule-style\",\n  \"column-rule-width\",\n  \"column-span\",\n  \"column-width\",\n  \"columns\",\n  \"content\",\n  \"counter-increment\",\n  \"counter-reset\",\n  \"cursor\",\n  \"direction\",\n  \"display\",\n  \"dominant-baseline\",\n  \"empty-cells\",\n  \"enable-background\",\n  \"fill\",\n  \"fill-opacity\",\n  \"fill-rule\",\n  \"filter\",\n  \"flex\",\n  \"flex-basis\",\n  \"flex-direction\",\n  \"flex-flow\",\n  \"flex-grow\",\n  \"flex-shrink\",\n  \"flex-wrap\",\n  \"float\",\n  \"flood-color\",\n  \"flood-opacity\",\n  \"font\",\n  \"font-family\",\n  \"font-feature-settings\",\n  \"font-kerning\",\n  \"font-size\",\n  \"font-size-delta\",\n  \"font-smoothing\",\n  \"font-stretch\",\n  \"font-style\",\n  \"font-variant\",\n  \"font-variant-ligatures\",\n  \"font-weight\",\n  \"glyph-orientation-horizontal\",\n  \"glyph-orientation-vertical\",\n  \"height\",\n  \"highlight\",\n  \"hyphenate-character\",\n  \"image-rendering\",\n  \"justify-content\",\n  \"kerning\",\n  \"left\",\n  \"letter-spacing\",\n  \"lighting-color\",\n  \"line-box-contain\",\n  \"line-break\",\n  \"line-clamp\",\n  \"line-height\",\n  \"list-style\",\n  \"list-style-image\",\n  \"list-style-position\",\n  \"list-style-type\",\n  \"locale\",\n  \"logical-height\",\n  \"logical-width\",\n  \"margin\",\n  \"margin-after\",\n  \"margin-after-collapse\",\n  \"margin-before\",\n  \"margin-before-collapse\",\n  \"margin-bottom\",\n  \"margin-bottom-collapse\",\n  \"margin-collapse\",\n  \"margin-end\",\n  \"margin-left\",\n  \"margin-right\",\n  \"margin-start\",\n  \"margin-top\",\n  \"margin-top-collapse\",\n  \"marker\",\n  \"marker-end\",\n  \"marker-mid\",\n  \"marker-start\",\n  \"mask\",\n  \"mask-box-image\",\n  \"mask-box-image-outset\",\n  \"mask-box-image-repeat\",\n  \"mask-box-image-slice\",\n  \"mask-box-image-source\",\n  \"mask-box-image-width\",\n  \"mask-clip\",\n  \"mask-composite\",\n  \"mask-image\",\n  \"mask-origin\",\n  \"mask-position\",\n  \"mask-position-x\",\n  \"mask-position-y\",\n  \"mask-repeat\",\n  \"mask-repeat-x\",\n  \"mask-repeat-y\",\n  \"mask-size\",\n  \"mask-type\",\n  \"max-height\",\n  \"max-logical-height\",\n  \"max-logical-width\",\n  \"max-width\",\n  \"max-zoom\",\n  \"min-height\",\n  \"min-logical-height\",\n  \"min-logical-width\",\n  \"min-width\",\n  \"min-zoom\",\n  \"object-fit\",\n  \"object-position\",\n  \"opacity\",\n  \"order\",\n  \"orientation\",\n  \"orphans\",\n  \"outline\",\n  \"outline-color\",\n  \"outline-offset\",\n  \"outline-style\",\n  \"outline-width\",\n  \"overflow\",\n  \"overflow-wrap\",\n  \"overflow-x\",\n  \"overflow-y\",\n  \"padding\",\n  \"padding-after\",\n  \"padding-before\",\n  \"padding-bottom\",\n  \"padding-end\",\n  \"padding-left\",\n  \"padding-right\",\n  \"padding-start\",\n  \"padding-top\",\n  \"page\",\n  \"page-break-after\",\n  \"page-break-before\",\n  \"page-break-inside\",\n  \"paint-order\",\n  \"perspective\",\n  \"perspective-origin\",\n  \"perspective-origin-x\",\n  \"perspective-origin-y\",\n  \"pointer-events\",\n  \"position\",\n  \"print-color-adjust\",\n  \"quotes\",\n  \"resize\",\n  \"right\",\n  \"rtl-ordering\",\n  \"ruby-position\",\n  \"shape-rendering\",\n  \"size\",\n  \"speak\",\n  \"src\",\n  \"stop-color\",\n  \"stop-opacity\",\n  \"stroke\",\n  \"stroke-dasharray\",\n  \"stroke-dashoffset\",\n  \"stroke-linecap\",\n  \"stroke-linejoin\",\n  \"stroke-miterlimit\",\n  \"stroke-opacity\",\n  \"stroke-width\",\n  \"tab-size\",\n  \"table-layout\",\n  \"tap-highlight-color\",\n  \"text-align\",\n  \"text-anchor\",\n  \"text-combine\",\n  \"text-decoration\",\n  \"text-decorations-in-effect\",\n  \"text-emphasis\",\n  \"text-emphasis-color\",\n  \"text-emphasis-position\",\n  \"text-emphasis-style\",\n  \"text-fill-color\",\n  \"text-indent\",\n  \"text-line-through-color\",\n  \"text-line-through-mode\",\n  \"text-line-through-style\",\n  \"text-line-through-width\",\n  \"text-orientation\",\n  \"text-overflow\",\n  \"text-overline-color\",\n  \"text-overline-mode\",\n  \"text-overline-style\",\n  \"text-overline-width\",\n  \"text-rendering\",\n  \"text-security\",\n  \"text-shadow\",\n  \"text-stroke\",\n  \"text-stroke-color\",\n  \"text-stroke-width\",\n  \"text-transform\",\n  \"text-underline-color\",\n  \"text-underline-mode\",\n  \"text-underline-style\",\n  \"text-underline-width\",\n  \"top\",\n  \"touch-action\",\n  \"transform\",\n  \"transform-origin\",\n  \"transform-origin-x\",\n  \"transform-origin-y\",\n  \"transform-origin-z\",\n  \"transform-style\",\n  \"transition\",\n  \"transition-delay\",\n  \"transition-duration\",\n  \"transition-property\",\n  \"transition-timing-function\",\n  \"unicode-bidi\",\n  \"unicode-range\",\n  \"user-drag\",\n  \"user-modify\",\n  \"user-select\",\n  \"user-zoom\",\n  \"vector-effect\",\n  \"vertical-align\",\n  \"visibility\",\n  \"white-space\",\n  \"widows\",\n  \"width\",\n  \"word-break\",\n  \"word-spacing\",\n  \"word-wrap\",\n  \"writing-mode\",\n  \"z-index\",\n  \"zoom\"\n];\n},{}],19:[function(require,module,exports){\nmodule.exports = [\n  \"align-content\",\n  \"align-items\",\n  \"align-self\",\n  \"all\",\n  \"animation\",\n  \"animation-delay\",\n  \"animation-direction\",\n  \"animation-duration\",\n  \"animation-fill-mode\",\n  \"animation-iteration-count\",\n  \"animation-name\",\n  \"animation-play-state\",\n  \"animation-timing-function\",\n  \"appearance\",\n  \"backface-visibility\",\n  \"background\",\n  \"background-attachment\",\n  \"background-blend-mode\",\n  \"background-clip\",\n  \"background-color\",\n  \"background-image\",\n  \"background-origin\",\n  \"background-position\",\n  \"background-repeat\",\n  \"background-size\",\n  \"binding\",\n  \"border\",\n  \"border-bottom\",\n  \"border-bottom-color\",\n  \"border-bottom-colors\",\n  \"border-bottom-left-radius\",\n  \"border-bottom-right-radius\",\n  \"border-bottom-style\",\n  \"border-bottom-width\",\n  \"border-collapse\",\n  \"border-color\",\n  \"border-end\",\n  \"border-end-color\",\n  \"border-end-style\",\n  \"border-end-width\",\n  \"border-image\",\n  \"border-image-outset\",\n  \"border-image-repeat\",\n  \"border-image-slice\",\n  \"border-image-source\",\n  \"border-image-width\",\n  \"border-left\",\n  \"border-left-color\",\n  \"border-left-colors\",\n  \"border-left-style\",\n  \"border-left-width\",\n  \"border-radius\",\n  \"border-right\",\n  \"border-right-color\",\n  \"border-right-colors\",\n  \"border-right-style\",\n  \"border-right-width\",\n  \"border-spacing\",\n  \"border-start\",\n  \"border-start-color\",\n  \"border-start-style\",\n  \"border-start-width\",\n  \"border-style\",\n  \"border-top\",\n  \"border-top-color\",\n  \"border-top-colors\",\n  \"border-top-left-radius\",\n  \"border-top-right-radius\",\n  \"border-top-style\",\n  \"border-top-width\",\n  \"border-width\",\n  \"bottom\",\n  \"box-align\",\n  \"box-direction\",\n  \"box-flex\",\n  \"box-ordinal-group\",\n  \"box-orient\",\n  \"box-pack\",\n  \"box-shadow\",\n  \"box-sizing\",\n  \"caption-side\",\n  \"clear\",\n  \"clip\",\n  \"clip-path\",\n  \"clip-rule\",\n  \"color\",\n  \"color-interpolation\",\n  \"color-interpolation-filters\",\n  \"column-count\",\n  \"column-fill\",\n  \"column-gap\",\n  \"column-rule\",\n  \"column-rule-color\",\n  \"column-rule-style\",\n  \"column-rule-width\",\n  \"column-width\",\n  \"columns\",\n  \"content\",\n  \"counter-increment\",\n  \"counter-reset\",\n  \"cursor\",\n  \"direction\",\n  \"display\",\n  \"dominant-baseline\",\n  \"empty-cells\",\n  \"fill\",\n  \"fill-opacity\",\n  \"fill-rule\",\n  \"filter\",\n  \"flex\",\n  \"flex-basis\",\n  \"flex-direction\",\n  \"flex-flow\",\n  \"flex-grow\",\n  \"flex-shrink\",\n  \"flex-wrap\",\n  \"float-edge\",\n  \"flood-color\",\n  \"flood-opacity\",\n  \"font\",\n  \"font-family\",\n  \"font-feature-settings\",\n  \"font-kerning\",\n  \"font-language-override\",\n  \"font-size\",\n  \"font-size-adjust\",\n  \"font-stretch\",\n  \"font-style\",\n  \"font-synthesis\",\n  \"font-variant\",\n  \"font-variant-alternates\",\n  \"font-variant-caps\",\n  \"font-variant-east-asian\",\n  \"font-variant-ligatures\",\n  \"font-variant-numeric\",\n  \"font-variant-position\",\n  \"font-weight\",\n  \"force-broken-image-icon\",\n  \"height\",\n  \"hyphens\",\n  \"image-orientation\",\n  \"image-region\",\n  \"image-rendering\",\n  \"ime-mode\",\n  \"justify-content\",\n  \"left\",\n  \"letter-spacing\",\n  \"lighting-color\",\n  \"line-height\",\n  \"list-style\",\n  \"list-style-image\",\n  \"list-style-position\",\n  \"list-style-type\",\n  \"margin\",\n  \"margin-bottom\",\n  \"margin-end\",\n  \"margin-left\",\n  \"margin-right\",\n  \"margin-start\",\n  \"margin-top\",\n  \"marker\",\n  \"marker-end\",\n  \"marker-mid\",\n  \"marker-offset\",\n  \"marker-start\",\n  \"marks\",\n  \"mask\",\n  \"mask-type\",\n  \"max-height\",\n  \"max-width\",\n  \"min-height\",\n  \"min-width\",\n  \"mix-blend-mode\",\n  \"opacity\",\n  \"order\",\n  \"orient\",\n  \"orphans\",\n  \"osx-font-smoothing\",\n  \"outline\",\n  \"outline-color\",\n  \"outline-offset\",\n  \"outline-radius\",\n  \"outline-radius-bottomleft\",\n  \"outline-radius-bottomright\",\n  \"outline-radius-topleft\",\n  \"outline-radius-topright\",\n  \"outline-style\",\n  \"outline-width\",\n  \"overflow\",\n  \"overflow-x\",\n  \"overflow-y\",\n  \"padding\",\n  \"padding-bottom\",\n  \"padding-end\",\n  \"padding-left\",\n  \"padding-right\",\n  \"padding-start\",\n  \"padding-top\",\n  \"page\",\n  \"page-break-after\",\n  \"page-break-before\",\n  \"page-break-inside\",\n  \"paint-order\",\n  \"perspective\",\n  \"perspective-origin\",\n  \"pointer-events\",\n  \"position\",\n  \"quotes\",\n  \"resize\",\n  \"right\",\n  \"shape-rendering\",\n  \"size\",\n  \"stack-sizing\",\n  \"stop-color\",\n  \"stop-opacity\",\n  \"stroke\",\n  \"stroke-dasharray\",\n  \"stroke-dashoffset\",\n  \"stroke-linecap\",\n  \"stroke-linejoin\",\n  \"stroke-miterlimit\",\n  \"stroke-opacity\",\n  \"stroke-width\",\n  \"tab-size\",\n  \"table-layout\",\n  \"text-align\",\n  \"text-align-last\",\n  \"text-anchor\",\n  \"text-decoration\",\n  \"text-decoration-color\",\n  \"text-decoration-line\",\n  \"text-decoration-style\",\n  \"text-indent\",\n  \"text-overflow\",\n  \"text-rendering\",\n  \"text-shadow\",\n  \"text-size-adjust\",\n  \"text-transform\",\n  \"top\",\n  \"transform\",\n  \"transform-origin\",\n  \"transform-style\",\n  \"transition\",\n  \"transition-delay\",\n  \"transition-duration\",\n  \"transition-property\",\n  \"transition-timing-function\",\n  \"unicode-bidi\",\n  \"user-focus\",\n  \"user-input\",\n  \"user-modify\",\n  \"user-select\",\n  \"vector-effect\",\n  \"vertical-align\",\n  \"visibility\",\n  \"white-space\",\n  \"widows\",\n  \"width\",\n  \"window-shadow\",\n  \"word-break\",\n  \"word-spacing\",\n  \"word-wrap\",\n  \"z-index\"\n];\n},{}],20:[function(require,module,exports){\nmodule.exports = [\n  \"align-content\",\n  \"align-items\",\n  \"align-self\",\n  \"alignment-baseline\",\n  \"animation\",\n  \"animation-delay\",\n  \"animation-direction\",\n  \"animation-duration\",\n  \"animation-fill-mode\",\n  \"animation-iteration-count\",\n  \"animation-name\",\n  \"animation-play-state\",\n  \"animation-timing-function\",\n  \"app-region\",\n  \"appearance\",\n  \"aspect-ratio\",\n  \"backface-visibility\",\n  \"background\",\n  \"background-attachment\",\n  \"background-blend-mode\",\n  \"background-clip\",\n  \"background-color\",\n  \"background-composite\",\n  \"background-image\",\n  \"background-origin\",\n  \"background-position\",\n  \"background-position-x\",\n  \"background-position-y\",\n  \"background-repeat\",\n  \"background-repeat-x\",\n  \"background-repeat-y\",\n  \"background-size\",\n  \"baseline-shift\",\n  \"border\",\n  \"border-after\",\n  \"border-after-color\",\n  \"border-after-style\",\n  \"border-after-width\",\n  \"border-before\",\n  \"border-before-color\",\n  \"border-before-style\",\n  \"border-before-width\",\n  \"border-bottom\",\n  \"border-bottom-color\",\n  \"border-bottom-left-radius\",\n  \"border-bottom-right-radius\",\n  \"border-bottom-style\",\n  \"border-bottom-width\",\n  \"border-collapse\",\n  \"border-color\",\n  \"border-end\",\n  \"border-end-color\",\n  \"border-end-style\",\n  \"border-end-width\",\n  \"border-fit\",\n  \"border-horizontal-spacing\",\n  \"border-image\",\n  \"border-image-outset\",\n  \"border-image-repeat\",\n  \"border-image-slice\",\n  \"border-image-source\",\n  \"border-image-width\",\n  \"border-left\",\n  \"border-left-color\",\n  \"border-left-style\",\n  \"border-left-width\",\n  \"border-radius\",\n  \"border-right\",\n  \"border-right-color\",\n  \"border-right-style\",\n  \"border-right-width\",\n  \"border-spacing\",\n  \"border-start\",\n  \"border-start-color\",\n  \"border-start-style\",\n  \"border-start-width\",\n  \"border-style\",\n  \"border-top\",\n  \"border-top-color\",\n  \"border-top-left-radius\",\n  \"border-top-right-radius\",\n  \"border-top-style\",\n  \"border-top-width\",\n  \"border-vertical-spacing\",\n  \"border-width\",\n  \"bottom\",\n  \"box-align\",\n  \"box-decoration-break\",\n  \"box-direction\",\n  \"box-flex\",\n  \"box-flex-group\",\n  \"box-lines\",\n  \"box-ordinal-group\",\n  \"box-orient\",\n  \"box-pack\",\n  \"box-reflect\",\n  \"box-shadow\",\n  \"box-sizing\",\n  \"buffered-rendering\",\n  \"caption-side\",\n  \"clear\",\n  \"clip\",\n  \"clip-path\",\n  \"clip-rule\",\n  \"color\",\n  \"color-interpolation\",\n  \"color-interpolation-filters\",\n  \"color-profile\",\n  \"color-rendering\",\n  \"column-break-after\",\n  \"column-break-before\",\n  \"column-break-inside\",\n  \"column-count\",\n  \"column-gap\",\n  \"column-rule\",\n  \"column-rule-color\",\n  \"column-rule-style\",\n  \"column-rule-width\",\n  \"column-span\",\n  \"column-width\",\n  \"columns\",\n  \"content\",\n  \"counter-increment\",\n  \"counter-reset\",\n  \"cursor\",\n  \"direction\",\n  \"display\",\n  \"dominant-baseline\",\n  \"empty-cells\",\n  \"enable-background\",\n  \"fill\",\n  \"fill-opacity\",\n  \"fill-rule\",\n  \"filter\",\n  \"flex\",\n  \"flex-basis\",\n  \"flex-direction\",\n  \"flex-flow\",\n  \"flex-grow\",\n  \"flex-shrink\",\n  \"flex-wrap\",\n  \"float\",\n  \"flood-color\",\n  \"flood-opacity\",\n  \"font\",\n  \"font-family\",\n  \"font-feature-settings\",\n  \"font-kerning\",\n  \"font-size\",\n  \"font-size-delta\",\n  \"font-smoothing\",\n  \"font-stretch\",\n  \"font-style\",\n  \"font-variant\",\n  \"font-variant-ligatures\",\n  \"font-weight\",\n  \"glyph-orientation-horizontal\",\n  \"glyph-orientation-vertical\",\n  \"height\",\n  \"highlight\",\n  \"hyphenate-character\",\n  \"image-rendering\",\n  \"justify-content\",\n  \"kerning\",\n  \"left\",\n  \"letter-spacing\",\n  \"lighting-color\",\n  \"line-box-contain\",\n  \"line-break\",\n  \"line-clamp\",\n  \"line-height\",\n  \"list-style\",\n  \"list-style-image\",\n  \"list-style-position\",\n  \"list-style-type\",\n  \"locale\",\n  \"logical-height\",\n  \"logical-width\",\n  \"margin\",\n  \"margin-after\",\n  \"margin-after-collapse\",\n  \"margin-before\",\n  \"margin-before-collapse\",\n  \"margin-bottom\",\n  \"margin-bottom-collapse\",\n  \"margin-collapse\",\n  \"margin-end\",\n  \"margin-left\",\n  \"margin-right\",\n  \"margin-start\",\n  \"margin-top\",\n  \"margin-top-collapse\",\n  \"marker\",\n  \"marker-end\",\n  \"marker-mid\",\n  \"marker-start\",\n  \"mask\",\n  \"mask-box-image\",\n  \"mask-box-image-outset\",\n  \"mask-box-image-repeat\",\n  \"mask-box-image-slice\",\n  \"mask-box-image-source\",\n  \"mask-box-image-width\",\n  \"mask-clip\",\n  \"mask-composite\",\n  \"mask-image\",\n  \"mask-origin\",\n  \"mask-position\",\n  \"mask-position-x\",\n  \"mask-position-y\",\n  \"mask-repeat\",\n  \"mask-repeat-x\",\n  \"mask-repeat-y\",\n  \"mask-size\",\n  \"mask-type\",\n  \"max-height\",\n  \"max-logical-height\",\n  \"max-logical-width\",\n  \"max-width\",\n  \"max-zoom\",\n  \"min-height\",\n  \"min-logical-height\",\n  \"min-logical-width\",\n  \"min-width\",\n  \"min-zoom\",\n  \"object-fit\",\n  \"object-position\",\n  \"opacity\",\n  \"order\",\n  \"orientation\",\n  \"orphans\",\n  \"outline\",\n  \"outline-color\",\n  \"outline-offset\",\n  \"outline-style\",\n  \"outline-width\",\n  \"overflow\",\n  \"overflow-wrap\",\n  \"overflow-x\",\n  \"overflow-y\",\n  \"padding\",\n  \"padding-after\",\n  \"padding-before\",\n  \"padding-bottom\",\n  \"padding-end\",\n  \"padding-left\",\n  \"padding-right\",\n  \"padding-start\",\n  \"padding-top\",\n  \"page\",\n  \"page-break-after\",\n  \"page-break-before\",\n  \"page-break-inside\",\n  \"paint-order\",\n  \"perspective\",\n  \"perspective-origin\",\n  \"perspective-origin-x\",\n  \"perspective-origin-y\",\n  \"pointer-events\",\n  \"position\",\n  \"print-color-adjust\",\n  \"quotes\",\n  \"resize\",\n  \"right\",\n  \"rtl-ordering\",\n  \"ruby-position\",\n  \"shape-rendering\",\n  \"size\",\n  \"speak\",\n  \"src\",\n  \"stop-color\",\n  \"stop-opacity\",\n  \"stroke\",\n  \"stroke-dasharray\",\n  \"stroke-dashoffset\",\n  \"stroke-linecap\",\n  \"stroke-linejoin\",\n  \"stroke-miterlimit\",\n  \"stroke-opacity\",\n  \"stroke-width\",\n  \"tab-size\",\n  \"table-layout\",\n  \"tap-highlight-color\",\n  \"text-align\",\n  \"text-anchor\",\n  \"text-combine\",\n  \"text-decoration\",\n  \"text-decorations-in-effect\",\n  \"text-emphasis\",\n  \"text-emphasis-color\",\n  \"text-emphasis-position\",\n  \"text-emphasis-style\",\n  \"text-fill-color\",\n  \"text-indent\",\n  \"text-line-through-color\",\n  \"text-line-through-mode\",\n  \"text-line-through-style\",\n  \"text-line-through-width\",\n  \"text-orientation\",\n  \"text-overflow\",\n  \"text-overline-color\",\n  \"text-overline-mode\",\n  \"text-overline-style\",\n  \"text-overline-width\",\n  \"text-rendering\",\n  \"text-security\",\n  \"text-shadow\",\n  \"text-stroke\",\n  \"text-stroke-color\",\n  \"text-stroke-width\",\n  \"text-transform\",\n  \"text-underline-color\",\n  \"text-underline-mode\",\n  \"text-underline-style\",\n  \"text-underline-width\",\n  \"top\",\n  \"touch-action\",\n  \"transform\",\n  \"transform-origin\",\n  \"transform-origin-x\",\n  \"transform-origin-y\",\n  \"transform-origin-z\",\n  \"transform-style\",\n  \"transition\",\n  \"transition-delay\",\n  \"transition-duration\",\n  \"transition-property\",\n  \"transition-timing-function\",\n  \"unicode-bidi\",\n  \"unicode-range\",\n  \"user-drag\",\n  \"user-modify\",\n  \"user-select\",\n  \"user-zoom\",\n  \"vector-effect\",\n  \"vertical-align\",\n  \"visibility\",\n  \"white-space\",\n  \"widows\",\n  \"width\",\n  \"word-break\",\n  \"word-spacing\",\n  \"word-wrap\",\n  \"writing-mode\",\n  \"z-index\",\n  \"zoom\",\n  \"all\",\n  \"binding\",\n  \"border-bottom-colors\",\n  \"border-left-colors\",\n  \"border-right-colors\",\n  \"border-top-colors\",\n  \"column-fill\",\n  \"float-edge\",\n  \"font-language-override\",\n  \"font-size-adjust\",\n  \"font-synthesis\",\n  \"font-variant-alternates\",\n  \"font-variant-caps\",\n  \"font-variant-east-asian\",\n  \"font-variant-numeric\",\n  \"font-variant-position\",\n  \"force-broken-image-icon\",\n  \"hyphens\",\n  \"image-orientation\",\n  \"image-region\",\n  \"ime-mode\",\n  \"marker-offset\",\n  \"marks\",\n  \"mix-blend-mode\",\n  \"orient\",\n  \"osx-font-smoothing\",\n  \"outline-radius\",\n  \"outline-radius-bottomleft\",\n  \"outline-radius-bottomright\",\n  \"outline-radius-topleft\",\n  \"outline-radius-topright\",\n  \"stack-sizing\",\n  \"text-align-last\",\n  \"text-decoration-color\",\n  \"text-decoration-line\",\n  \"text-decoration-style\",\n  \"text-size-adjust\",\n  \"user-focus\",\n  \"user-input\",\n  \"window-shadow\",\n  \"accelerator\",\n  \"block-progression\",\n  \"break-after\",\n  \"break-before\",\n  \"break-inside\",\n  \"content-zoom-chaining\",\n  \"content-zoom-limit\",\n  \"content-zoom-limit-max\",\n  \"content-zoom-limit-min\",\n  \"content-zoom-snap\",\n  \"content-zoom-snap-points\",\n  \"content-zoom-snap-type\",\n  \"content-zooming\",\n  \"flex-align\",\n  \"flex-item-align\",\n  \"flex-line-pack\",\n  \"flex-negative\",\n  \"flex-order\",\n  \"flex-pack\",\n  \"flex-positive\",\n  \"flex-preferred-size\",\n  \"flow-from\",\n  \"flow-into\",\n  \"grid-column\",\n  \"grid-column-align\",\n  \"grid-column-span\",\n  \"grid-columns\",\n  \"grid-row\",\n  \"grid-row-align\",\n  \"grid-row-span\",\n  \"grid-rows\",\n  \"high-contrast-adjust\",\n  \"hyphenate-limit-chars\",\n  \"hyphenate-limit-lines\",\n  \"hyphenate-limit-zone\",\n  \"ime-align\",\n  \"interpolation-mode\",\n  \"layout-flow\",\n  \"layout-grid\",\n  \"layout-grid-char\",\n  \"layout-grid-line\",\n  \"layout-grid-mode\",\n  \"layout-grid-type\",\n  \"overflow-style\",\n  \"ruby-align\",\n  \"ruby-overhang\",\n  \"scroll-chaining\",\n  \"scroll-limit\",\n  \"scroll-limit-x-max\",\n  \"scroll-limit-x-min\",\n  \"scroll-limit-y-max\",\n  \"scroll-limit-y-min\",\n  \"scroll-rails\",\n  \"scroll-snap-points-x\",\n  \"scroll-snap-points-y\",\n  \"scroll-snap-type\",\n  \"scroll-snap-x\",\n  \"scroll-snap-y\",\n  \"scroll-translation\",\n  \"scrollbar-arrow-color\",\n  \"scrollbar-base-color\",\n  \"scrollbar-dark-shadow-color\",\n  \"scrollbar-face-color\",\n  \"scrollbar-highlight-color\",\n  \"scrollbar-shadow-color\",\n  \"scrollbar-track-color\",\n  \"scrollbar3d-light-color\",\n  \"style-float\",\n  \"text-autospace\",\n  \"text-combine-horizontal\",\n  \"text-justify\",\n  \"text-justify-trim\",\n  \"text-kashida\",\n  \"text-kashida-space\",\n  \"text-underline-position\",\n  \"touch-select\",\n  \"wrap-flow\",\n  \"wrap-margin\",\n  \"wrap-through\",\n  \"color-correction\",\n  \"column-axis\",\n  \"column-progression\",\n  \"composition-fill-color\",\n  \"composition-frame-color\",\n  \"hyphenate-limit-after\",\n  \"hyphenate-limit-before\",\n  \"line-align\",\n  \"line-grid\",\n  \"line-snap\",\n  \"marquee\",\n  \"marquee-direction\",\n  \"marquee-increment\",\n  \"marquee-repetition\",\n  \"marquee-speed\",\n  \"marquee-style\",\n  \"mask-attachment\",\n  \"match-nearest-mail-blockquote-color\",\n  \"nbsp-mode\",\n  \"overflow-scrolling\",\n  \"svg-shadow\",\n  \"text-line-through\",\n  \"text-overline\",\n  \"text-underline\",\n  \"touch-callout\",\n  \"accesskey\",\n  \"audio-level\",\n  \"dashboard-region\",\n  \"display-align\",\n  \"input-format\",\n  \"input-required\",\n  \"line-increment\",\n  \"link\",\n  \"link-source\",\n  \"marquee-dir\",\n  \"marquee-loop\",\n  \"nav-down\",\n  \"nav-index\",\n  \"nav-left\",\n  \"nav-right\",\n  \"nav-up\",\n  \"scrollbar-darkshadow-color\",\n  \"scrollbar3dlight-color\",\n  \"solid-color\",\n  \"solid-opacity\",\n  \"table-baseline\",\n  \"viewport-fill\",\n  \"viewport-fill-opacity\",\n  \"cursor-visibility\",\n  \"grid-after\",\n  \"grid-auto-columns\",\n  \"grid-auto-flow\",\n  \"grid-auto-rows\",\n  \"grid-before\",\n  \"grid-end\",\n  \"grid-start\",\n  \"region-break-after\",\n  \"region-break-before\",\n  \"region-break-inside\",\n  \"region-fragment\"\n];\n},{}],21:[function(require,module,exports){\nmodule.exports = [\n  \"accelerator\",\n  \"align-content\",\n  \"align-items\",\n  \"align-self\",\n  \"alignment-baseline\",\n  \"animation\",\n  \"animation-delay\",\n  \"animation-direction\",\n  \"animation-duration\",\n  \"animation-fill-mode\",\n  \"animation-iteration-count\",\n  \"animation-name\",\n  \"animation-play-state\",\n  \"animation-timing-function\",\n  \"backface-visibility\",\n  \"background\",\n  \"background-attachment\",\n  \"background-clip\",\n  \"background-color\",\n  \"background-image\",\n  \"background-origin\",\n  \"background-position\",\n  \"background-position-x\",\n  \"background-position-y\",\n  \"background-repeat\",\n  \"background-size\",\n  \"baseline-shift\",\n  \"block-progression\",\n  \"border\",\n  \"border-bottom\",\n  \"border-bottom-color\",\n  \"border-bottom-left-radius\",\n  \"border-bottom-right-radius\",\n  \"border-bottom-style\",\n  \"border-bottom-width\",\n  \"border-collapse\",\n  \"border-color\",\n  \"border-image\",\n  \"border-image-outset\",\n  \"border-image-repeat\",\n  \"border-image-slice\",\n  \"border-image-source\",\n  \"border-image-width\",\n  \"border-left\",\n  \"border-left-color\",\n  \"border-left-style\",\n  \"border-left-width\",\n  \"border-radius\",\n  \"border-right\",\n  \"border-right-color\",\n  \"border-right-style\",\n  \"border-right-width\",\n  \"border-spacing\",\n  \"border-style\",\n  \"border-top\",\n  \"border-top-color\",\n  \"border-top-left-radius\",\n  \"border-top-right-radius\",\n  \"border-top-style\",\n  \"border-top-width\",\n  \"border-width\",\n  \"bottom\",\n  \"box-shadow\",\n  \"box-sizing\",\n  \"break-after\",\n  \"break-before\",\n  \"break-inside\",\n  \"caption-side\",\n  \"clear\",\n  \"clip\",\n  \"clip-path\",\n  \"clip-rule\",\n  \"color\",\n  \"color-interpolation-filters\",\n  \"column-count\",\n  \"column-fill\",\n  \"column-gap\",\n  \"column-rule\",\n  \"column-rule-color\",\n  \"column-rule-style\",\n  \"column-rule-width\",\n  \"column-span\",\n  \"column-width\",\n  \"columns\",\n  \"content\",\n  \"content-zoom-chaining\",\n  \"content-zoom-limit\",\n  \"content-zoom-limit-max\",\n  \"content-zoom-limit-min\",\n  \"content-zoom-snap\",\n  \"content-zoom-snap-points\",\n  \"content-zoom-snap-type\",\n  \"content-zooming\",\n  \"counter-increment\",\n  \"counter-reset\",\n  \"cursor\",\n  \"direction\",\n  \"display\",\n  \"dominant-baseline\",\n  \"empty-cells\",\n  \"enable-background\",\n  \"fill\",\n  \"fill-opacity\",\n  \"fill-rule\",\n  \"filter\",\n  \"flex\",\n  \"flex-align\",\n  \"flex-basis\",\n  \"flex-direction\",\n  \"flex-flow\",\n  \"flex-grow\",\n  \"flex-item-align\",\n  \"flex-line-pack\",\n  \"flex-negative\",\n  \"flex-order\",\n  \"flex-pack\",\n  \"flex-positive\",\n  \"flex-preferred-size\",\n  \"flex-shrink\",\n  \"flex-wrap\",\n  \"flood-color\",\n  \"flood-opacity\",\n  \"flow-from\",\n  \"flow-into\",\n  \"font\",\n  \"font-family\",\n  \"font-feature-settings\",\n  \"font-size\",\n  \"font-size-adjust\",\n  \"font-stretch\",\n  \"font-style\",\n  \"font-variant\",\n  \"font-weight\",\n  \"glyph-orientation-horizontal\",\n  \"glyph-orientation-vertical\",\n  \"grid-column\",\n  \"grid-column-align\",\n  \"grid-column-span\",\n  \"grid-columns\",\n  \"grid-row\",\n  \"grid-row-align\",\n  \"grid-row-span\",\n  \"grid-rows\",\n  \"height\",\n  \"high-contrast-adjust\",\n  \"hyphenate-limit-chars\",\n  \"hyphenate-limit-lines\",\n  \"hyphenate-limit-zone\",\n  \"hyphens\",\n  \"ime-align\",\n  \"ime-mode\",\n  \"interpolation-mode\",\n  \"justify-content\",\n  \"kerning\",\n  \"layout-flow\",\n  \"layout-grid\",\n  \"layout-grid-char\",\n  \"layout-grid-line\",\n  \"layout-grid-mode\",\n  \"layout-grid-type\",\n  \"left\",\n  \"letter-spacing\",\n  \"lighting-color\",\n  \"line-break\",\n  \"line-height\",\n  \"list-style\",\n  \"list-style-image\",\n  \"list-style-position\",\n  \"list-style-type\",\n  \"margin\",\n  \"margin-bottom\",\n  \"margin-left\",\n  \"margin-right\",\n  \"margin-top\",\n  \"marker\",\n  \"marker-end\",\n  \"marker-mid\",\n  \"marker-start\",\n  \"mask\",\n  \"max-height\",\n  \"max-width\",\n  \"min-height\",\n  \"min-width\",\n  \"opacity\",\n  \"order\",\n  \"orphans\",\n  \"outline\",\n  \"outline-color\",\n  \"outline-style\",\n  \"outline-width\",\n  \"overflow\",\n  \"overflow-style\",\n  \"overflow-x\",\n  \"overflow-y\",\n  \"padding\",\n  \"padding-bottom\",\n  \"padding-left\",\n  \"padding-right\",\n  \"padding-top\",\n  \"page-break-after\",\n  \"page-break-before\",\n  \"page-break-inside\",\n  \"perspective\",\n  \"perspective-origin\",\n  \"pointer-events\",\n  \"position\",\n  \"quotes\",\n  \"right\",\n  \"ruby-align\",\n  \"ruby-overhang\",\n  \"ruby-position\",\n  \"scroll-chaining\",\n  \"scroll-limit\",\n  \"scroll-limit-x-max\",\n  \"scroll-limit-x-min\",\n  \"scroll-limit-y-max\",\n  \"scroll-limit-y-min\",\n  \"scroll-rails\",\n  \"scroll-snap-points-x\",\n  \"scroll-snap-points-y\",\n  \"scroll-snap-type\",\n  \"scroll-snap-x\",\n  \"scroll-snap-y\",\n  \"scroll-translation\",\n  \"scrollbar-arrow-color\",\n  \"scrollbar-base-color\",\n  \"scrollbar-dark-shadow-color\",\n  \"scrollbar-face-color\",\n  \"scrollbar-highlight-color\",\n  \"scrollbar-shadow-color\",\n  \"scrollbar-track-color\",\n  \"scrollbar3d-light-color\",\n  \"stop-color\",\n  \"stop-opacity\",\n  \"stroke\",\n  \"stroke-dasharray\",\n  \"stroke-dashoffset\",\n  \"stroke-linecap\",\n  \"stroke-linejoin\",\n  \"stroke-miterlimit\",\n  \"stroke-opacity\",\n  \"stroke-width\",\n  \"style-float\",\n  \"table-layout\",\n  \"text-align\",\n  \"text-align-last\",\n  \"text-anchor\",\n  \"text-autospace\",\n  \"text-combine-horizontal\",\n  \"text-decoration\",\n  \"text-indent\",\n  \"text-justify\",\n  \"text-justify-trim\",\n  \"text-kashida\",\n  \"text-kashida-space\",\n  \"text-overflow\",\n  \"text-shadow\",\n  \"text-transform\",\n  \"text-underline-position\",\n  \"top\",\n  \"touch-action\",\n  \"touch-select\",\n  \"transform\",\n  \"transform-origin\",\n  \"transform-style\",\n  \"transition\",\n  \"transition-delay\",\n  \"transition-duration\",\n  \"transition-property\",\n  \"transition-timing-function\",\n  \"unicode-bidi\",\n  \"user-select\",\n  \"vertical-align\",\n  \"visibility\",\n  \"white-space\",\n  \"widows\",\n  \"width\",\n  \"word-break\",\n  \"word-spacing\",\n  \"word-wrap\",\n  \"wrap-flow\",\n  \"wrap-margin\",\n  \"wrap-through\",\n  \"writing-mode\",\n  \"z-index\",\n  \"zoom\"\n];\n},{}],22:[function(require,module,exports){\nmodule.exports = [\n  \"accelerator\",\n  \"alignment-baseline\",\n  \"animation\",\n  \"animation-delay\",\n  \"animation-direction\",\n  \"animation-duration\",\n  \"animation-fill-mode\",\n  \"animation-iteration-count\",\n  \"animation-name\",\n  \"animation-play-state\",\n  \"animation-timing-function\",\n  \"backface-visibility\",\n  \"background\",\n  \"background-attachment\",\n  \"background-clip\",\n  \"background-color\",\n  \"background-image\",\n  \"background-origin\",\n  \"background-position\",\n  \"background-position-x\",\n  \"background-position-y\",\n  \"background-repeat\",\n  \"background-size\",\n  \"baseline-shift\",\n  \"behavior\",\n  \"block-progression\",\n  \"border\",\n  \"border-bottom\",\n  \"border-bottom-color\",\n  \"border-bottom-left-radius\",\n  \"border-bottom-right-radius\",\n  \"border-bottom-style\",\n  \"border-bottom-width\",\n  \"border-collapse\",\n  \"border-color\",\n  \"border-left\",\n  \"border-left-color\",\n  \"border-left-style\",\n  \"border-left-width\",\n  \"border-radius\",\n  \"border-right\",\n  \"border-right-color\",\n  \"border-right-style\",\n  \"border-right-width\",\n  \"border-spacing\",\n  \"border-style\",\n  \"border-top\",\n  \"border-top-color\",\n  \"border-top-left-radius\",\n  \"border-top-right-radius\",\n  \"border-top-style\",\n  \"border-top-width\",\n  \"border-width\",\n  \"bottom\",\n  \"box-shadow\",\n  \"box-sizing\",\n  \"break-after\",\n  \"break-before\",\n  \"break-inside\",\n  \"caption-side\",\n  \"clear\",\n  \"clip\",\n  \"clip-path\",\n  \"clip-rule\",\n  \"color\",\n  \"color-interpolation-filters\",\n  \"column-count\",\n  \"column-fill\",\n  \"column-gap\",\n  \"column-rule\",\n  \"column-rule-color\",\n  \"column-rule-style\",\n  \"column-rule-width\",\n  \"column-span\",\n  \"column-width\",\n  \"columns\",\n  \"content\",\n  \"content-zoom-chaining\",\n  \"content-zoom-limit\",\n  \"content-zoom-limit-max\",\n  \"content-zoom-limit-min\",\n  \"content-zoom-snap\",\n  \"content-zoom-snap-points\",\n  \"content-zoom-snap-type\",\n  \"content-zooming\",\n  \"counter-increment\",\n  \"counter-reset\",\n  \"cursor\",\n  \"direction\",\n  \"display\",\n  \"dominant-baseline\",\n  \"empty-cells\",\n  \"enable-background\",\n  \"fill\",\n  \"fill-opacity\",\n  \"fill-rule\",\n  \"filter\",\n  \"flex\",\n  \"flex-align\",\n  \"flex-direction\",\n  \"flex-flow\",\n  \"flex-item-align\",\n  \"flex-line-pack\",\n  \"flex-negative\",\n  \"flex-order\",\n  \"flex-pack\",\n  \"flex-positive\",\n  \"flex-preferred-size\",\n  \"flex-wrap\",\n  \"flood-color\",\n  \"flood-opacity\",\n  \"flow-from\",\n  \"flow-into\",\n  \"font\",\n  \"font-family\",\n  \"font-feature-settings\",\n  \"font-size\",\n  \"font-size-adjust\",\n  \"font-stretch\",\n  \"font-style\",\n  \"font-variant\",\n  \"font-weight\",\n  \"glyph-orientation-horizontal\",\n  \"glyph-orientation-vertical\",\n  \"grid-column\",\n  \"grid-column-align\",\n  \"grid-column-span\",\n  \"grid-columns\",\n  \"grid-row\",\n  \"grid-row-align\",\n  \"grid-row-span\",\n  \"grid-rows\",\n  \"height\",\n  \"high-contrast-adjust\",\n  \"hyphenate-limit-chars\",\n  \"hyphenate-limit-lines\",\n  \"hyphenate-limit-zone\",\n  \"hyphens\",\n  \"ime-mode\",\n  \"interpolation-mode\",\n  \"kerning\",\n  \"layout-flow\",\n  \"layout-grid\",\n  \"layout-grid-char\",\n  \"layout-grid-line\",\n  \"layout-grid-mode\",\n  \"layout-grid-type\",\n  \"left\",\n  \"letter-spacing\",\n  \"lighting-color\",\n  \"line-break\",\n  \"line-height\",\n  \"list-style\",\n  \"list-style-image\",\n  \"list-style-position\",\n  \"list-style-type\",\n  \"margin\",\n  \"margin-bottom\",\n  \"margin-left\",\n  \"margin-right\",\n  \"margin-top\",\n  \"marker\",\n  \"marker-end\",\n  \"marker-mid\",\n  \"marker-start\",\n  \"mask\",\n  \"max-height\",\n  \"max-width\",\n  \"min-height\",\n  \"min-width\",\n  \"opacity\",\n  \"orphans\",\n  \"outline\",\n  \"outline-color\",\n  \"outline-style\",\n  \"outline-width\",\n  \"overflow\",\n  \"overflow-style\",\n  \"overflow-x\",\n  \"overflow-y\",\n  \"padding\",\n  \"padding-bottom\",\n  \"padding-left\",\n  \"padding-right\",\n  \"padding-top\",\n  \"page-break-after\",\n  \"page-break-before\",\n  \"page-break-inside\",\n  \"perspective\",\n  \"perspective-origin\",\n  \"pointer-events\",\n  \"position\",\n  \"quotes\",\n  \"right\",\n  \"ruby-align\",\n  \"ruby-overhang\",\n  \"ruby-position\",\n  \"scroll-chaining\",\n  \"scroll-limit\",\n  \"scroll-limit-x-max\",\n  \"scroll-limit-x-min\",\n  \"scroll-limit-y-max\",\n  \"scroll-limit-y-min\",\n  \"scroll-rails\",\n  \"scroll-snap-points-x\",\n  \"scroll-snap-points-y\",\n  \"scroll-snap-type\",\n  \"scroll-snap-x\",\n  \"scroll-snap-y\",\n  \"scroll-translation\",\n  \"scrollbar-arrow-color\",\n  \"scrollbar-base-color\",\n  \"scrollbar-dark-shadow-color\",\n  \"scrollbar-face-color\",\n  \"scrollbar-highlight-color\",\n  \"scrollbar-shadow-color\",\n  \"scrollbar-track-color\",\n  \"scrollbar3d-light-color\",\n  \"stop-color\",\n  \"stop-opacity\",\n  \"stroke\",\n  \"stroke-dasharray\",\n  \"stroke-dashoffset\",\n  \"stroke-linecap\",\n  \"stroke-linejoin\",\n  \"stroke-miterlimit\",\n  \"stroke-opacity\",\n  \"stroke-width\",\n  \"style-float\",\n  \"table-layout\",\n  \"text-align\",\n  \"text-align-last\",\n  \"text-anchor\",\n  \"text-autospace\",\n  \"text-decoration\",\n  \"text-indent\",\n  \"text-justify\",\n  \"text-justify-trim\",\n  \"text-kashida\",\n  \"text-kashida-space\",\n  \"text-overflow\",\n  \"text-shadow\",\n  \"text-transform\",\n  \"text-underline-position\",\n  \"top\",\n  \"touch-action\",\n  \"touch-select\",\n  \"transform\",\n  \"transform-origin\",\n  \"transform-style\",\n  \"transition\",\n  \"transition-delay\",\n  \"transition-duration\",\n  \"transition-property\",\n  \"transition-timing-function\",\n  \"unicode-bidi\",\n  \"user-select\",\n  \"vertical-align\",\n  \"visibility\",\n  \"white-space\",\n  \"widows\",\n  \"width\",\n  \"word-break\",\n  \"word-spacing\",\n  \"word-wrap\",\n  \"wrap-flow\",\n  \"wrap-margin\",\n  \"wrap-through\",\n  \"writing-mode\",\n  \"z-index\",\n  \"zoom\"\n];\n},{}],23:[function(require,module,exports){\nmodule.exports=require(21)\n},{}],24:[function(require,module,exports){\nmodule.exports = [\n  \"accelerator\",\n  \"background\",\n  \"background-attachment\",\n  \"background-color\",\n  \"background-image\",\n  \"background-position\",\n  \"background-position-x\",\n  \"background-position-y\",\n  \"background-repeat\",\n  \"behavior\",\n  \"border\",\n  \"border-bottom\",\n  \"border-bottom-color\",\n  \"border-bottom-style\",\n  \"border-bottom-width\",\n  \"border-collapse\",\n  \"border-color\",\n  \"border-left\",\n  \"border-left-color\",\n  \"border-left-style\",\n  \"border-left-width\",\n  \"border-right\",\n  \"border-right-color\",\n  \"border-right-style\",\n  \"border-right-width\",\n  \"border-style\",\n  \"border-top\",\n  \"border-top-color\",\n  \"border-top-style\",\n  \"border-top-width\",\n  \"border-width\",\n  \"bottom\",\n  \"clear\",\n  \"clip\",\n  \"color\",\n  \"cursor\",\n  \"direction\",\n  \"display\",\n  \"filter\",\n  \"font\",\n  \"font-family\",\n  \"font-size\",\n  \"font-style\",\n  \"font-variant\",\n  \"font-weight\",\n  \"height\",\n  \"ime-mode\",\n  \"layout-flow\",\n  \"layout-grid\",\n  \"layout-grid-char\",\n  \"layout-grid-line\",\n  \"layout-grid-mode\",\n  \"layout-grid-type\",\n  \"left\",\n  \"letter-spacing\",\n  \"line-break\",\n  \"line-height\",\n  \"list-style\",\n  \"list-style-image\",\n  \"list-style-position\",\n  \"list-style-type\",\n  \"margin\",\n  \"margin-bottom\",\n  \"margin-left\",\n  \"margin-right\",\n  \"margin-top\",\n  \"min-height\",\n  \"overflow\",\n  \"overflow-x\",\n  \"overflow-y\",\n  \"padding\",\n  \"padding-bottom\",\n  \"padding-left\",\n  \"padding-right\",\n  \"padding-top\",\n  \"page-break-after\",\n  \"page-break-before\",\n  \"position\",\n  \"right\",\n  \"ruby-align\",\n  \"ruby-overhang\",\n  \"ruby-position\",\n  \"scrollbar-arrow-color\",\n  \"scrollbar-base-color\",\n  \"scrollbar-dark-shadow-color\",\n  \"scrollbar-face-color\",\n  \"scrollbar-highlight-color\",\n  \"scrollbar-shadow-color\",\n  \"scrollbar-track-color\",\n  \"scrollbar3d-light-color\",\n  \"style-float\",\n  \"table-layout\",\n  \"text-align\",\n  \"text-align-last\",\n  \"text-autospace\",\n  \"text-decoration\",\n  \"text-indent\",\n  \"text-justify\",\n  \"text-justify-trim\",\n  \"text-kashida\",\n  \"text-kashida-space\",\n  \"text-overflow\",\n  \"text-transform\",\n  \"text-underline-position\",\n  \"top\",\n  \"unicode-bidi\",\n  \"vertical-align\",\n  \"visibility\",\n  \"white-space\",\n  \"width\",\n  \"word-break\",\n  \"word-spacing\",\n  \"word-wrap\",\n  \"writing-mode\",\n  \"zoom\"\n];\n},{}],25:[function(require,module,exports){\nmodule.exports = [\n  \"accelerator\",\n  \"background\",\n  \"background-attachment\",\n  \"background-color\",\n  \"background-image\",\n  \"background-position\",\n  \"background-position-x\",\n  \"background-position-y\",\n  \"background-repeat\",\n  \"behavior\",\n  \"border\",\n  \"border-bottom\",\n  \"border-bottom-color\",\n  \"border-bottom-style\",\n  \"border-bottom-width\",\n  \"border-collapse\",\n  \"border-color\",\n  \"border-left\",\n  \"border-left-color\",\n  \"border-left-style\",\n  \"border-left-width\",\n  \"border-right\",\n  \"border-right-color\",\n  \"border-right-style\",\n  \"border-right-width\",\n  \"border-style\",\n  \"border-top\",\n  \"border-top-color\",\n  \"border-top-style\",\n  \"border-top-width\",\n  \"border-width\",\n  \"bottom\",\n  \"clear\",\n  \"clip\",\n  \"color\",\n  \"cursor\",\n  \"direction\",\n  \"display\",\n  \"filter\",\n  \"font\",\n  \"font-family\",\n  \"font-size\",\n  \"font-style\",\n  \"font-variant\",\n  \"font-weight\",\n  \"height\",\n  \"ime-mode\",\n  \"interpolation-mode\",\n  \"layout-flow\",\n  \"layout-grid\",\n  \"layout-grid-char\",\n  \"layout-grid-line\",\n  \"layout-grid-mode\",\n  \"layout-grid-type\",\n  \"left\",\n  \"letter-spacing\",\n  \"line-break\",\n  \"line-height\",\n  \"list-style\",\n  \"list-style-image\",\n  \"list-style-position\",\n  \"list-style-type\",\n  \"margin\",\n  \"margin-bottom\",\n  \"margin-left\",\n  \"margin-right\",\n  \"margin-top\",\n  \"max-height\",\n  \"max-width\",\n  \"min-height\",\n  \"min-width\",\n  \"overflow\",\n  \"overflow-x\",\n  \"overflow-y\",\n  \"padding\",\n  \"padding-bottom\",\n  \"padding-left\",\n  \"padding-right\",\n  \"padding-top\",\n  \"page-break-after\",\n  \"page-break-before\",\n  \"position\",\n  \"right\",\n  \"ruby-align\",\n  \"ruby-overhang\",\n  \"ruby-position\",\n  \"scrollbar-arrow-color\",\n  \"scrollbar-base-color\",\n  \"scrollbar-dark-shadow-color\",\n  \"scrollbar-face-color\",\n  \"scrollbar-highlight-color\",\n  \"scrollbar-shadow-color\",\n  \"scrollbar-track-color\",\n  \"scrollbar3d-light-color\",\n  \"style-float\",\n  \"table-layout\",\n  \"text-align\",\n  \"text-align-last\",\n  \"text-autospace\",\n  \"text-decoration\",\n  \"text-indent\",\n  \"text-justify\",\n  \"text-justify-trim\",\n  \"text-kashida\",\n  \"text-kashida-space\",\n  \"text-overflow\",\n  \"text-transform\",\n  \"text-underline-position\",\n  \"top\",\n  \"unicode-bidi\",\n  \"vertical-align\",\n  \"visibility\",\n  \"white-space\",\n  \"width\",\n  \"word-break\",\n  \"word-spacing\",\n  \"word-wrap\",\n  \"writing-mode\",\n  \"zoom\"\n];\n},{}],26:[function(require,module,exports){\nmodule.exports = [\n  \"accelerator\",\n  \"background\",\n  \"background-attachment\",\n  \"background-color\",\n  \"background-image\",\n  \"background-position\",\n  \"background-position-x\",\n  \"background-position-y\",\n  \"background-repeat\",\n  \"behavior\",\n  \"block-progression\",\n  \"border\",\n  \"border-bottom\",\n  \"border-bottom-color\",\n  \"border-bottom-style\",\n  \"border-bottom-width\",\n  \"border-collapse\",\n  \"border-color\",\n  \"border-left\",\n  \"border-left-color\",\n  \"border-left-style\",\n  \"border-left-width\",\n  \"border-right\",\n  \"border-right-color\",\n  \"border-right-style\",\n  \"border-right-width\",\n  \"border-spacing\",\n  \"border-style\",\n  \"border-top\",\n  \"border-top-color\",\n  \"border-top-style\",\n  \"border-top-width\",\n  \"border-width\",\n  \"bottom\",\n  \"box-sizing\",\n  \"caption-side\",\n  \"clear\",\n  \"clip\",\n  \"color\",\n  \"content\",\n  \"counter-increment\",\n  \"counter-reset\",\n  \"cursor\",\n  \"direction\",\n  \"display\",\n  \"empty-cells\",\n  \"filter\",\n  \"font\",\n  \"font-family\",\n  \"font-size\",\n  \"font-style\",\n  \"font-variant\",\n  \"font-weight\",\n  \"height\",\n  \"ime-mode\",\n  \"interpolation-mode\",\n  \"layout-flow\",\n  \"layout-grid\",\n  \"layout-grid-char\",\n  \"layout-grid-line\",\n  \"layout-grid-mode\",\n  \"layout-grid-type\",\n  \"left\",\n  \"letter-spacing\",\n  \"line-break\",\n  \"line-height\",\n  \"list-style\",\n  \"list-style-image\",\n  \"list-style-position\",\n  \"list-style-type\",\n  \"margin\",\n  \"margin-bottom\",\n  \"margin-left\",\n  \"margin-right\",\n  \"margin-top\",\n  \"max-height\",\n  \"max-width\",\n  \"min-height\",\n  \"min-width\",\n  \"orphans\",\n  \"outline\",\n  \"outline-color\",\n  \"outline-style\",\n  \"outline-width\",\n  \"overflow\",\n  \"overflow-x\",\n  \"overflow-y\",\n  \"padding\",\n  \"padding-bottom\",\n  \"padding-left\",\n  \"padding-right\",\n  \"padding-top\",\n  \"page-break-after\",\n  \"page-break-before\",\n  \"page-break-inside\",\n  \"position\",\n  \"quotes\",\n  \"right\",\n  \"ruby-align\",\n  \"ruby-overhang\",\n  \"ruby-position\",\n  \"scrollbar-arrow-color\",\n  \"scrollbar-base-color\",\n  \"scrollbar-dark-shadow-color\",\n  \"scrollbar-face-color\",\n  \"scrollbar-highlight-color\",\n  \"scrollbar-shadow-color\",\n  \"scrollbar-track-color\",\n  \"scrollbar3d-light-color\",\n  \"style-float\",\n  \"table-layout\",\n  \"text-align\",\n  \"text-align-last\",\n  \"text-autospace\",\n  \"text-decoration\",\n  \"text-indent\",\n  \"text-justify\",\n  \"text-justify-trim\",\n  \"text-kashida\",\n  \"text-kashida-space\",\n  \"text-overflow\",\n  \"text-transform\",\n  \"text-underline-position\",\n  \"top\",\n  \"unicode-bidi\",\n  \"vertical-align\",\n  \"visibility\",\n  \"white-space\",\n  \"widows\",\n  \"width\",\n  \"word-break\",\n  \"word-spacing\",\n  \"word-wrap\",\n  \"writing-mode\",\n  \"z-index\",\n  \"zoom\"\n];\n},{}],27:[function(require,module,exports){\nmodule.exports = [\n  \"accelerator\",\n  \"alignment-baseline\",\n  \"background\",\n  \"background-attachment\",\n  \"background-clip\",\n  \"background-color\",\n  \"background-image\",\n  \"background-origin\",\n  \"background-position\",\n  \"background-position-x\",\n  \"background-position-y\",\n  \"background-repeat\",\n  \"background-size\",\n  \"baseline-shift\",\n  \"behavior\",\n  \"block-progression\",\n  \"border\",\n  \"border-bottom\",\n  \"border-bottom-color\",\n  \"border-bottom-left-radius\",\n  \"border-bottom-right-radius\",\n  \"border-bottom-style\",\n  \"border-bottom-width\",\n  \"border-collapse\",\n  \"border-color\",\n  \"border-left\",\n  \"border-left-color\",\n  \"border-left-style\",\n  \"border-left-width\",\n  \"border-radius\",\n  \"border-right\",\n  \"border-right-color\",\n  \"border-right-style\",\n  \"border-right-width\",\n  \"border-spacing\",\n  \"border-style\",\n  \"border-top\",\n  \"border-top-color\",\n  \"border-top-left-radius\",\n  \"border-top-right-radius\",\n  \"border-top-style\",\n  \"border-top-width\",\n  \"border-width\",\n  \"bottom\",\n  \"box-shadow\",\n  \"box-sizing\",\n  \"caption-side\",\n  \"clear\",\n  \"clip\",\n  \"clip-path\",\n  \"clip-rule\",\n  \"color\",\n  \"content\",\n  \"counter-increment\",\n  \"counter-reset\",\n  \"cursor\",\n  \"direction\",\n  \"display\",\n  \"dominant-baseline\",\n  \"empty-cells\",\n  \"fill\",\n  \"fill-opacity\",\n  \"fill-rule\",\n  \"filter\",\n  \"font\",\n  \"font-family\",\n  \"font-size\",\n  \"font-size-adjust\",\n  \"font-stretch\",\n  \"font-style\",\n  \"font-variant\",\n  \"font-weight\",\n  \"glyph-orientation-horizontal\",\n  \"glyph-orientation-vertical\",\n  \"height\",\n  \"ime-mode\",\n  \"interpolation-mode\",\n  \"kerning\",\n  \"layout-flow\",\n  \"layout-grid\",\n  \"layout-grid-char\",\n  \"layout-grid-line\",\n  \"layout-grid-mode\",\n  \"layout-grid-type\",\n  \"left\",\n  \"letter-spacing\",\n  \"line-break\",\n  \"line-height\",\n  \"list-style\",\n  \"list-style-image\",\n  \"list-style-position\",\n  \"list-style-type\",\n  \"margin\",\n  \"margin-bottom\",\n  \"margin-left\",\n  \"margin-right\",\n  \"margin-top\",\n  \"marker\",\n  \"marker-end\",\n  \"marker-mid\",\n  \"marker-start\",\n  \"mask\",\n  \"max-height\",\n  \"max-width\",\n  \"min-height\",\n  \"min-width\",\n  \"opacity\",\n  \"orphans\",\n  \"outline\",\n  \"outline-color\",\n  \"outline-style\",\n  \"outline-width\",\n  \"overflow\",\n  \"overflow-x\",\n  \"overflow-y\",\n  \"padding\",\n  \"padding-bottom\",\n  \"padding-left\",\n  \"padding-right\",\n  \"padding-top\",\n  \"page-break-after\",\n  \"page-break-before\",\n  \"page-break-inside\",\n  \"pointer-events\",\n  \"position\",\n  \"quotes\",\n  \"right\",\n  \"ruby-align\",\n  \"ruby-overhang\",\n  \"ruby-position\",\n  \"scrollbar-arrow-color\",\n  \"scrollbar-base-color\",\n  \"scrollbar-dark-shadow-color\",\n  \"scrollbar-face-color\",\n  \"scrollbar-highlight-color\",\n  \"scrollbar-shadow-color\",\n  \"scrollbar-track-color\",\n  \"scrollbar3d-light-color\",\n  \"stop-color\",\n  \"stop-opacity\",\n  \"stroke\",\n  \"stroke-dasharray\",\n  \"stroke-dashoffset\",\n  \"stroke-linecap\",\n  \"stroke-linejoin\",\n  \"stroke-miterlimit\",\n  \"stroke-opacity\",\n  \"stroke-width\",\n  \"style-float\",\n  \"table-layout\",\n  \"text-align\",\n  \"text-align-last\",\n  \"text-anchor\",\n  \"text-autospace\",\n  \"text-decoration\",\n  \"text-indent\",\n  \"text-justify\",\n  \"text-justify-trim\",\n  \"text-kashida\",\n  \"text-kashida-space\",\n  \"text-overflow\",\n  \"text-transform\",\n  \"text-underline-position\",\n  \"top\",\n  \"transform\",\n  \"transform-origin\",\n  \"unicode-bidi\",\n  \"vertical-align\",\n  \"visibility\",\n  \"white-space\",\n  \"widows\",\n  \"width\",\n  \"word-break\",\n  \"word-spacing\",\n  \"word-wrap\",\n  \"writing-mode\",\n  \"z-index\",\n  \"zoom\"\n];\n},{}],28:[function(require,module,exports){\nmodule.exports = [\n  \"alignment-baseline\",\n  \"animation\",\n  \"animation-delay\",\n  \"animation-direction\",\n  \"animation-duration\",\n  \"animation-fill-mode\",\n  \"animation-iteration-count\",\n  \"animation-name\",\n  \"animation-play-state\",\n  \"animation-timing-function\",\n  \"appearance\",\n  \"aspect-ratio\",\n  \"backface-visibility\",\n  \"background\",\n  \"background-attachment\",\n  \"background-clip\",\n  \"background-color\",\n  \"background-composite\",\n  \"background-image\",\n  \"background-origin\",\n  \"background-position\",\n  \"background-position-x\",\n  \"background-position-y\",\n  \"background-repeat\",\n  \"background-repeat-x\",\n  \"background-repeat-y\",\n  \"background-size\",\n  \"baseline-shift\",\n  \"border\",\n  \"border-after\",\n  \"border-after-color\",\n  \"border-after-style\",\n  \"border-after-width\",\n  \"border-before\",\n  \"border-before-color\",\n  \"border-before-style\",\n  \"border-before-width\",\n  \"border-bottom\",\n  \"border-bottom-color\",\n  \"border-bottom-left-radius\",\n  \"border-bottom-right-radius\",\n  \"border-bottom-style\",\n  \"border-bottom-width\",\n  \"border-collapse\",\n  \"border-color\",\n  \"border-end\",\n  \"border-end-color\",\n  \"border-end-style\",\n  \"border-end-width\",\n  \"border-fit\",\n  \"border-horizontal-spacing\",\n  \"border-image\",\n  \"border-image-outset\",\n  \"border-image-repeat\",\n  \"border-image-slice\",\n  \"border-image-source\",\n  \"border-image-width\",\n  \"border-left\",\n  \"border-left-color\",\n  \"border-left-style\",\n  \"border-left-width\",\n  \"border-radius\",\n  \"border-right\",\n  \"border-right-color\",\n  \"border-right-style\",\n  \"border-right-width\",\n  \"border-spacing\",\n  \"border-start\",\n  \"border-start-color\",\n  \"border-start-style\",\n  \"border-start-width\",\n  \"border-style\",\n  \"border-top\",\n  \"border-top-color\",\n  \"border-top-left-radius\",\n  \"border-top-right-radius\",\n  \"border-top-style\",\n  \"border-top-width\",\n  \"border-vertical-spacing\",\n  \"border-width\",\n  \"bottom\",\n  \"box-align\",\n  \"box-direction\",\n  \"box-flex\",\n  \"box-flex-group\",\n  \"box-lines\",\n  \"box-ordinal-group\",\n  \"box-orient\",\n  \"box-pack\",\n  \"box-reflect\",\n  \"box-shadow\",\n  \"box-sizing\",\n  \"caption-side\",\n  \"clear\",\n  \"clip\",\n  \"clip-path\",\n  \"clip-rule\",\n  \"color\",\n  \"color-correction\",\n  \"color-interpolation\",\n  \"color-interpolation-filters\",\n  \"color-profile\",\n  \"color-rendering\",\n  \"column-axis\",\n  \"column-break-after\",\n  \"column-break-before\",\n  \"column-break-inside\",\n  \"column-count\",\n  \"column-gap\",\n  \"column-progression\",\n  \"column-rule\",\n  \"column-rule-color\",\n  \"column-rule-style\",\n  \"column-rule-width\",\n  \"column-span\",\n  \"column-width\",\n  \"columns\",\n  \"composition-fill-color\",\n  \"composition-frame-color\",\n  \"content\",\n  \"counter-increment\",\n  \"counter-reset\",\n  \"cursor\",\n  \"direction\",\n  \"display\",\n  \"dominant-baseline\",\n  \"empty-cells\",\n  \"enable-background\",\n  \"fill\",\n  \"fill-opacity\",\n  \"fill-rule\",\n  \"filter\",\n  \"float\",\n  \"flood-color\",\n  \"flood-opacity\",\n  \"font\",\n  \"font-family\",\n  \"font-feature-settings\",\n  \"font-kerning\",\n  \"font-size\",\n  \"font-size-delta\",\n  \"font-smoothing\",\n  \"font-stretch\",\n  \"font-style\",\n  \"font-variant\",\n  \"font-variant-ligatures\",\n  \"font-weight\",\n  \"glyph-orientation-horizontal\",\n  \"glyph-orientation-vertical\",\n  \"grid-column\",\n  \"grid-columns\",\n  \"grid-row\",\n  \"grid-rows\",\n  \"height\",\n  \"highlight\",\n  \"hyphenate-character\",\n  \"hyphenate-limit-after\",\n  \"hyphenate-limit-before\",\n  \"hyphenate-limit-lines\",\n  \"hyphens\",\n  \"image-rendering\",\n  \"kerning\",\n  \"left\",\n  \"letter-spacing\",\n  \"lighting-color\",\n  \"line-align\",\n  \"line-box-contain\",\n  \"line-break\",\n  \"line-clamp\",\n  \"line-grid\",\n  \"line-height\",\n  \"line-snap\",\n  \"list-style\",\n  \"list-style-image\",\n  \"list-style-position\",\n  \"list-style-type\",\n  \"locale\",\n  \"logical-height\",\n  \"logical-width\",\n  \"margin\",\n  \"margin-after\",\n  \"margin-after-collapse\",\n  \"margin-before\",\n  \"margin-before-collapse\",\n  \"margin-bottom\",\n  \"margin-bottom-collapse\",\n  \"margin-collapse\",\n  \"margin-end\",\n  \"margin-left\",\n  \"margin-right\",\n  \"margin-start\",\n  \"margin-top\",\n  \"margin-top-collapse\",\n  \"marker\",\n  \"marker-end\",\n  \"marker-mid\",\n  \"marker-start\",\n  \"marquee\",\n  \"marquee-direction\",\n  \"marquee-increment\",\n  \"marquee-repetition\",\n  \"marquee-speed\",\n  \"marquee-style\",\n  \"mask\",\n  \"mask-attachment\",\n  \"mask-box-image\",\n  \"mask-box-image-outset\",\n  \"mask-box-image-repeat\",\n  \"mask-box-image-slice\",\n  \"mask-box-image-source\",\n  \"mask-box-image-width\",\n  \"mask-clip\",\n  \"mask-composite\",\n  \"mask-image\",\n  \"mask-origin\",\n  \"mask-position\",\n  \"mask-position-x\",\n  \"mask-position-y\",\n  \"mask-repeat\",\n  \"mask-repeat-x\",\n  \"mask-repeat-y\",\n  \"mask-size\",\n  \"match-nearest-mail-blockquote-color\",\n  \"max-height\",\n  \"max-logical-height\",\n  \"max-logical-width\",\n  \"max-width\",\n  \"min-height\",\n  \"min-logical-height\",\n  \"min-logical-width\",\n  \"min-width\",\n  \"nbsp-mode\",\n  \"opacity\",\n  \"orphans\",\n  \"outline\",\n  \"outline-color\",\n  \"outline-offset\",\n  \"outline-style\",\n  \"outline-width\",\n  \"overflow\",\n  \"overflow-scrolling\",\n  \"overflow-x\",\n  \"overflow-y\",\n  \"padding\",\n  \"padding-after\",\n  \"padding-before\",\n  \"padding-bottom\",\n  \"padding-end\",\n  \"padding-left\",\n  \"padding-right\",\n  \"padding-start\",\n  \"padding-top\",\n  \"page\",\n  \"page-break-after\",\n  \"page-break-before\",\n  \"page-break-inside\",\n  \"perspective\",\n  \"perspective-origin\",\n  \"perspective-origin-x\",\n  \"perspective-origin-y\",\n  \"pointer-events\",\n  \"position\",\n  \"print-color-adjust\",\n  \"quotes\",\n  \"resize\",\n  \"right\",\n  \"rtl-ordering\",\n  \"shape-rendering\",\n  \"size\",\n  \"speak\",\n  \"src\",\n  \"stop-color\",\n  \"stop-opacity\",\n  \"stroke\",\n  \"stroke-dasharray\",\n  \"stroke-dashoffset\",\n  \"stroke-linecap\",\n  \"stroke-linejoin\",\n  \"stroke-miterlimit\",\n  \"stroke-opacity\",\n  \"stroke-width\",\n  \"svg-shadow\",\n  \"table-layout\",\n  \"tap-highlight-color\",\n  \"text-align\",\n  \"text-anchor\",\n  \"text-combine\",\n  \"text-decoration\",\n  \"text-decorations-in-effect\",\n  \"text-emphasis\",\n  \"text-emphasis-color\",\n  \"text-emphasis-position\",\n  \"text-emphasis-style\",\n  \"text-fill-color\",\n  \"text-indent\",\n  \"text-line-through\",\n  \"text-line-through-color\",\n  \"text-line-through-mode\",\n  \"text-line-through-style\",\n  \"text-line-through-width\",\n  \"text-orientation\",\n  \"text-overflow\",\n  \"text-overline\",\n  \"text-overline-color\",\n  \"text-overline-mode\",\n  \"text-overline-style\",\n  \"text-overline-width\",\n  \"text-rendering\",\n  \"text-security\",\n  \"text-shadow\",\n  \"text-size-adjust\",\n  \"text-stroke\",\n  \"text-stroke-color\",\n  \"text-stroke-width\",\n  \"text-transform\",\n  \"text-underline\",\n  \"text-underline-color\",\n  \"text-underline-mode\",\n  \"text-underline-style\",\n  \"text-underline-width\",\n  \"top\",\n  \"touch-callout\",\n  \"transform\",\n  \"transform-origin\",\n  \"transform-origin-x\",\n  \"transform-origin-y\",\n  \"transform-origin-z\",\n  \"transform-style\",\n  \"transition\",\n  \"transition-delay\",\n  \"transition-duration\",\n  \"transition-property\",\n  \"transition-timing-function\",\n  \"unicode-bidi\",\n  \"unicode-range\",\n  \"user-drag\",\n  \"user-modify\",\n  \"user-select\",\n  \"vector-effect\",\n  \"vertical-align\",\n  \"visibility\",\n  \"white-space\",\n  \"widows\",\n  \"width\",\n  \"word-break\",\n  \"word-spacing\",\n  \"word-wrap\",\n  \"writing-mode\",\n  \"z-index\",\n  \"zoom\"\n];\n},{}],29:[function(require,module,exports){\nmodule.exports = [\n  \"accesskey\",\n  \"align-content\",\n  \"align-items\",\n  \"align-self\",\n  \"alignment-baseline\",\n  \"animation\",\n  \"animation-delay\",\n  \"animation-direction\",\n  \"animation-duration\",\n  \"animation-fill-mode\",\n  \"animation-iteration-count\",\n  \"animation-name\",\n  \"animation-play-state\",\n  \"animation-timing-function\",\n  \"audio-level\",\n  \"background\",\n  \"background-attachment\",\n  \"background-clip\",\n  \"background-color\",\n  \"background-image\",\n  \"background-origin\",\n  \"background-position\",\n  \"background-repeat\",\n  \"background-size\",\n  \"baseline-shift\",\n  \"border\",\n  \"border-bottom\",\n  \"border-bottom-color\",\n  \"border-bottom-left-radius\",\n  \"border-bottom-right-radius\",\n  \"border-bottom-style\",\n  \"border-bottom-width\",\n  \"border-collapse\",\n  \"border-color\",\n  \"border-image\",\n  \"border-left\",\n  \"border-left-color\",\n  \"border-left-style\",\n  \"border-left-width\",\n  \"border-radius\",\n  \"border-right\",\n  \"border-right-color\",\n  \"border-right-style\",\n  \"border-right-width\",\n  \"border-spacing\",\n  \"border-style\",\n  \"border-top\",\n  \"border-top-color\",\n  \"border-top-left-radius\",\n  \"border-top-right-radius\",\n  \"border-top-style\",\n  \"border-top-width\",\n  \"border-width\",\n  \"bottom\",\n  \"box-decoration-break\",\n  \"box-shadow\",\n  \"box-sizing\",\n  \"break-after\",\n  \"break-before\",\n  \"break-inside\",\n  \"buffered-rendering\",\n  \"caption-side\",\n  \"clear\",\n  \"clip\",\n  \"clip-path\",\n  \"clip-rule\",\n  \"color\",\n  \"color-interpolation\",\n  \"color-interpolation-filters\",\n  \"color-profile\",\n  \"color-rendering\",\n  \"column-count\",\n  \"column-fill\",\n  \"column-gap\",\n  \"column-rule\",\n  \"column-rule-color\",\n  \"column-rule-style\",\n  \"column-rule-width\",\n  \"column-span\",\n  \"column-width\",\n  \"columns\",\n  \"content\",\n  \"counter-increment\",\n  \"counter-reset\",\n  \"cursor\",\n  \"dashboard-region\",\n  \"direction\",\n  \"display\",\n  \"display-align\",\n  \"dominant-baseline\",\n  \"empty-cells\",\n  \"enable-background\",\n  \"fill\",\n  \"fill-opacity\",\n  \"fill-rule\",\n  \"filter\",\n  \"flex\",\n  \"flex-basis\",\n  \"flex-direction\",\n  \"flex-flow\",\n  \"flex-grow\",\n  \"flex-shrink\",\n  \"flex-wrap\",\n  \"flood-color\",\n  \"flood-opacity\",\n  \"font\",\n  \"font-family\",\n  \"font-size\",\n  \"font-size-adjust\",\n  \"font-stretch\",\n  \"font-style\",\n  \"font-variant\",\n  \"font-weight\",\n  \"glyph-orientation-horizontal\",\n  \"glyph-orientation-vertical\",\n  \"height\",\n  \"image-rendering\",\n  \"input-format\",\n  \"input-required\",\n  \"justify-content\",\n  \"kerning\",\n  \"left\",\n  \"letter-spacing\",\n  \"lighting-color\",\n  \"line-height\",\n  \"line-increment\",\n  \"link\",\n  \"link-source\",\n  \"list-style\",\n  \"list-style-image\",\n  \"list-style-position\",\n  \"list-style-type\",\n  \"margin\",\n  \"margin-bottom\",\n  \"margin-left\",\n  \"margin-right\",\n  \"margin-top\",\n  \"marker\",\n  \"marker-end\",\n  \"marker-mid\",\n  \"marker-offset\",\n  \"marker-start\",\n  \"marquee-dir\",\n  \"marquee-loop\",\n  \"marquee-speed\",\n  \"marquee-style\",\n  \"mask\",\n  \"max-height\",\n  \"max-width\",\n  \"max-zoom\",\n  \"min-height\",\n  \"min-width\",\n  \"min-zoom\",\n  \"nav-down\",\n  \"nav-index\",\n  \"nav-left\",\n  \"nav-right\",\n  \"nav-up\",\n  \"object-fit\",\n  \"object-position\",\n  \"opacity\",\n  \"order\",\n  \"orientation\",\n  \"orphans\",\n  \"outline\",\n  \"outline-color\",\n  \"outline-offset\",\n  \"outline-style\",\n  \"outline-width\",\n  \"overflow\",\n  \"overflow-wrap\",\n  \"overflow-x\",\n  \"overflow-y\",\n  \"padding\",\n  \"padding-bottom\",\n  \"padding-left\",\n  \"padding-right\",\n  \"padding-top\",\n  \"page\",\n  \"page-break-after\",\n  \"page-break-before\",\n  \"page-break-inside\",\n  \"pointer-events\",\n  \"position\",\n  \"quotes\",\n  \"resize\",\n  \"right\",\n  \"scrollbar-arrow-color\",\n  \"scrollbar-base-color\",\n  \"scrollbar-darkshadow-color\",\n  \"scrollbar-face-color\",\n  \"scrollbar-highlight-color\",\n  \"scrollbar-shadow-color\",\n  \"scrollbar-track-color\",\n  \"scrollbar3dlight-color\",\n  \"shape-rendering\",\n  \"size\",\n  \"solid-color\",\n  \"solid-opacity\",\n  \"src\",\n  \"stop-color\",\n  \"stop-opacity\",\n  \"stroke\",\n  \"stroke-dasharray\",\n  \"stroke-dashoffset\",\n  \"stroke-linecap\",\n  \"stroke-linejoin\",\n  \"stroke-miterlimit\",\n  \"stroke-opacity\",\n  \"stroke-width\",\n  \"style-float\",\n  \"tab-size\",\n  \"table-baseline\",\n  \"table-layout\",\n  \"text-align\",\n  \"text-anchor\",\n  \"text-decoration\",\n  \"text-indent\",\n  \"text-overflow\",\n  \"text-rendering\",\n  \"text-shadow\",\n  \"text-transform\",\n  \"top\",\n  \"transform\",\n  \"transform-origin\",\n  \"transition\",\n  \"transition-delay\",\n  \"transition-duration\",\n  \"transition-property\",\n  \"transition-timing-function\",\n  \"unicode-bidi\",\n  \"user-zoom\",\n  \"vector-effect\",\n  \"vertical-align\",\n  \"viewport-fill\",\n  \"viewport-fill-opacity\",\n  \"visibility\",\n  \"white-space\",\n  \"widows\",\n  \"width\",\n  \"word-spacing\",\n  \"word-wrap\",\n  \"writing-mode\",\n  \"z-index\",\n  \"zoom\"\n];\n},{}],30:[function(require,module,exports){\nmodule.exports = [\n  \"align-content\",\n  \"align-items\",\n  \"align-self\",\n  \"alignment-baseline\",\n  \"animation\",\n  \"animation-delay\",\n  \"animation-direction\",\n  \"animation-duration\",\n  \"animation-fill-mode\",\n  \"animation-iteration-count\",\n  \"animation-name\",\n  \"animation-play-state\",\n  \"animation-timing-function\",\n  \"appearance\",\n  \"aspect-ratio\",\n  \"backface-visibility\",\n  \"background\",\n  \"background-attachment\",\n  \"background-clip\",\n  \"background-color\",\n  \"background-composite\",\n  \"background-image\",\n  \"background-origin\",\n  \"background-position\",\n  \"background-position-x\",\n  \"background-position-y\",\n  \"background-repeat\",\n  \"background-repeat-x\",\n  \"background-repeat-y\",\n  \"background-size\",\n  \"baseline-shift\",\n  \"border\",\n  \"border-after\",\n  \"border-after-color\",\n  \"border-after-style\",\n  \"border-after-width\",\n  \"border-before\",\n  \"border-before-color\",\n  \"border-before-style\",\n  \"border-before-width\",\n  \"border-bottom\",\n  \"border-bottom-color\",\n  \"border-bottom-left-radius\",\n  \"border-bottom-right-radius\",\n  \"border-bottom-style\",\n  \"border-bottom-width\",\n  \"border-collapse\",\n  \"border-color\",\n  \"border-end\",\n  \"border-end-color\",\n  \"border-end-style\",\n  \"border-end-width\",\n  \"border-fit\",\n  \"border-horizontal-spacing\",\n  \"border-image\",\n  \"border-image-outset\",\n  \"border-image-repeat\",\n  \"border-image-slice\",\n  \"border-image-source\",\n  \"border-image-width\",\n  \"border-left\",\n  \"border-left-color\",\n  \"border-left-style\",\n  \"border-left-width\",\n  \"border-radius\",\n  \"border-right\",\n  \"border-right-color\",\n  \"border-right-style\",\n  \"border-right-width\",\n  \"border-spacing\",\n  \"border-start\",\n  \"border-start-color\",\n  \"border-start-style\",\n  \"border-start-width\",\n  \"border-style\",\n  \"border-top\",\n  \"border-top-color\",\n  \"border-top-left-radius\",\n  \"border-top-right-radius\",\n  \"border-top-style\",\n  \"border-top-width\",\n  \"border-vertical-spacing\",\n  \"border-width\",\n  \"bottom\",\n  \"box-align\",\n  \"box-decoration-break\",\n  \"box-direction\",\n  \"box-flex\",\n  \"box-flex-group\",\n  \"box-lines\",\n  \"box-ordinal-group\",\n  \"box-orient\",\n  \"box-pack\",\n  \"box-reflect\",\n  \"box-shadow\",\n  \"box-sizing\",\n  \"buffered-rendering\",\n  \"caption-side\",\n  \"clear\",\n  \"clip\",\n  \"clip-path\",\n  \"clip-rule\",\n  \"color\",\n  \"color-correction\",\n  \"color-interpolation\",\n  \"color-interpolation-filters\",\n  \"color-profile\",\n  \"color-rendering\",\n  \"column-axis\",\n  \"column-break-after\",\n  \"column-break-before\",\n  \"column-break-inside\",\n  \"column-count\",\n  \"column-gap\",\n  \"column-progression\",\n  \"column-rule\",\n  \"column-rule-color\",\n  \"column-rule-style\",\n  \"column-rule-width\",\n  \"column-span\",\n  \"column-width\",\n  \"columns\",\n  \"content\",\n  \"counter-increment\",\n  \"counter-reset\",\n  \"cursor\",\n  \"cursor-visibility\",\n  \"dashboard-region\",\n  \"direction\",\n  \"display\",\n  \"dominant-baseline\",\n  \"empty-cells\",\n  \"enable-background\",\n  \"fill\",\n  \"fill-opacity\",\n  \"fill-rule\",\n  \"filter\",\n  \"flex\",\n  \"flex-basis\",\n  \"flex-direction\",\n  \"flex-flow\",\n  \"flex-grow\",\n  \"flex-shrink\",\n  \"flex-wrap\",\n  \"float\",\n  \"flood-color\",\n  \"flood-opacity\",\n  \"flow-from\",\n  \"flow-into\",\n  \"font\",\n  \"font-family\",\n  \"font-feature-settings\",\n  \"font-kerning\",\n  \"font-size\",\n  \"font-size-delta\",\n  \"font-smoothing\",\n  \"font-stretch\",\n  \"font-style\",\n  \"font-variant\",\n  \"font-variant-ligatures\",\n  \"font-weight\",\n  \"glyph-orientation-horizontal\",\n  \"glyph-orientation-vertical\",\n  \"grid-after\",\n  \"grid-auto-columns\",\n  \"grid-auto-flow\",\n  \"grid-auto-rows\",\n  \"grid-before\",\n  \"grid-column\",\n  \"grid-columns\",\n  \"grid-end\",\n  \"grid-row\",\n  \"grid-rows\",\n  \"grid-start\",\n  \"height\",\n  \"highlight\",\n  \"hyphenate-character\",\n  \"hyphenate-limit-after\",\n  \"hyphenate-limit-before\",\n  \"hyphenate-limit-lines\",\n  \"hyphens\",\n  \"image-rendering\",\n  \"justify-content\",\n  \"kerning\",\n  \"left\",\n  \"letter-spacing\",\n  \"lighting-color\",\n  \"line-align\",\n  \"line-box-contain\",\n  \"line-break\",\n  \"line-clamp\",\n  \"line-grid\",\n  \"line-height\",\n  \"line-snap\",\n  \"list-style\",\n  \"list-style-image\",\n  \"list-style-position\",\n  \"list-style-type\",\n  \"locale\",\n  \"logical-height\",\n  \"logical-width\",\n  \"margin\",\n  \"margin-after\",\n  \"margin-after-collapse\",\n  \"margin-before\",\n  \"margin-before-collapse\",\n  \"margin-bottom\",\n  \"margin-bottom-collapse\",\n  \"margin-collapse\",\n  \"margin-end\",\n  \"margin-left\",\n  \"margin-right\",\n  \"margin-start\",\n  \"margin-top\",\n  \"margin-top-collapse\",\n  \"marker\",\n  \"marker-end\",\n  \"marker-mid\",\n  \"marker-start\",\n  \"marquee\",\n  \"marquee-direction\",\n  \"marquee-increment\",\n  \"marquee-repetition\",\n  \"marquee-speed\",\n  \"marquee-style\",\n  \"mask\",\n  \"mask-box-image\",\n  \"mask-box-image-outset\",\n  \"mask-box-image-repeat\",\n  \"mask-box-image-slice\",\n  \"mask-box-image-source\",\n  \"mask-box-image-width\",\n  \"mask-clip\",\n  \"mask-composite\",\n  \"mask-image\",\n  \"mask-origin\",\n  \"mask-position\",\n  \"mask-position-x\",\n  \"mask-position-y\",\n  \"mask-repeat\",\n  \"mask-repeat-x\",\n  \"mask-repeat-y\",\n  \"mask-size\",\n  \"mask-type\",\n  \"max-height\",\n  \"max-logical-height\",\n  \"max-logical-width\",\n  \"max-width\",\n  \"min-height\",\n  \"min-logical-height\",\n  \"min-logical-width\",\n  \"min-width\",\n  \"nbsp-mode\",\n  \"opacity\",\n  \"order\",\n  \"orphans\",\n  \"outline\",\n  \"outline-color\",\n  \"outline-offset\",\n  \"outline-style\",\n  \"outline-width\",\n  \"overflow\",\n  \"overflow-wrap\",\n  \"overflow-x\",\n  \"overflow-y\",\n  \"padding\",\n  \"padding-after\",\n  \"padding-before\",\n  \"padding-bottom\",\n  \"padding-end\",\n  \"padding-left\",\n  \"padding-right\",\n  \"padding-start\",\n  \"padding-top\",\n  \"page\",\n  \"page-break-after\",\n  \"page-break-before\",\n  \"page-break-inside\",\n  \"perspective\",\n  \"perspective-origin\",\n  \"perspective-origin-x\",\n  \"perspective-origin-y\",\n  \"pointer-events\",\n  \"position\",\n  \"print-color-adjust\",\n  \"quotes\",\n  \"region-break-after\",\n  \"region-break-before\",\n  \"region-break-inside\",\n  \"region-fragment\",\n  \"resize\",\n  \"right\",\n  \"rtl-ordering\",\n  \"ruby-position\",\n  \"shape-rendering\",\n  \"size\",\n  \"speak\",\n  \"src\",\n  \"stop-color\",\n  \"stop-opacity\",\n  \"stroke\",\n  \"stroke-dasharray\",\n  \"stroke-dashoffset\",\n  \"stroke-linecap\",\n  \"stroke-linejoin\",\n  \"stroke-miterlimit\",\n  \"stroke-opacity\",\n  \"stroke-width\",\n  \"svg-shadow\",\n  \"tab-size\",\n  \"table-layout\",\n  \"text-align\",\n  \"text-anchor\",\n  \"text-combine\",\n  \"text-decoration\",\n  \"text-decorations-in-effect\",\n  \"text-emphasis\",\n  \"text-emphasis-color\",\n  \"text-emphasis-position\",\n  \"text-emphasis-style\",\n  \"text-fill-color\",\n  \"text-indent\",\n  \"text-line-through\",\n  \"text-line-through-color\",\n  \"text-line-through-mode\",\n  \"text-line-through-style\",\n  \"text-line-through-width\",\n  \"text-orientation\",\n  \"text-overflow\",\n  \"text-overline\",\n  \"text-overline-color\",\n  \"text-overline-mode\",\n  \"text-overline-style\",\n  \"text-overline-width\",\n  \"text-rendering\",\n  \"text-security\",\n  \"text-shadow\",\n  \"text-stroke\",\n  \"text-stroke-color\",\n  \"text-stroke-width\",\n  \"text-transform\",\n  \"text-underline\",\n  \"text-underline-color\",\n  \"text-underline-mode\",\n  \"text-underline-style\",\n  \"text-underline-width\",\n  \"top\",\n  \"transform\",\n  \"transform-origin\",\n  \"transform-origin-x\",\n  \"transform-origin-y\",\n  \"transform-origin-z\",\n  \"transform-style\",\n  \"transition\",\n  \"transition-delay\",\n  \"transition-duration\",\n  \"transition-property\",\n  \"transition-timing-function\",\n  \"unicode-bidi\",\n  \"unicode-range\",\n  \"user-drag\",\n  \"user-modify\",\n  \"user-select\",\n  \"vector-effect\",\n  \"vertical-align\",\n  \"visibility\",\n  \"white-space\",\n  \"widows\",\n  \"width\",\n  \"word-break\",\n  \"word-spacing\",\n  \"word-wrap\",\n  \"writing-mode\",\n  \"z-index\",\n  \"zoom\"\n];\n},{}],31:[function(require,module,exports){\nexports.chrome = require(\"./browsers/chrome.js\");\nexports.firefox = require(\"./browsers/firefox.js\");\nexports.ie10 = require(\"./browsers/ie10.js\");\nexports.ie11 = require(\"./browsers/ie11.js\");\nexports.ie = require(\"./browsers/ie.js\");\nexports.ie6 = require(\"./browsers/ie6.js\");\nexports.ie7 = require(\"./browsers/ie7.js\");\nexports.ie8 = require(\"./browsers/ie8.js\");\nexports.ie9 = require(\"./browsers/ie9.js\");\nexports.ios = require(\"./browsers/ios.js\");\nexports.opera = require(\"./browsers/opera.js\");\nexports.safari = require(\"./browsers/safari.js\");\nexports.forward = require(\"./browsers/forward.js\");\n\n},{\"./browsers/chrome.js\":18,\"./browsers/firefox.js\":19,\"./browsers/forward.js\":20,\"./browsers/ie.js\":21,\"./browsers/ie10.js\":22,\"./browsers/ie11.js\":23,\"./browsers/ie6.js\":24,\"./browsers/ie7.js\":25,\"./browsers/ie8.js\":26,\"./browsers/ie9.js\":27,\"./browsers/ios.js\":28,\"./browsers/opera.js\":29,\"./browsers/safari.js\":30}],32:[function(require,module,exports){\nvar gonzales = require('gonzales');\nvar traverse = require('./lib/traverse.js');\nvar utils = require('./lib/utils.js');\n\nexports.parse = gonzales.srcToCSSP;\nexports.toCSS = gonzales.csspToSrc;\nexports.toTree = gonzales.csspToTree;\nexports.traverse = traverse;\nexports.same = utils.same;\n},{\"./lib/traverse.js\":33,\"./lib/utils.js\":34,\"gonzales\":37}],33:[function(require,module,exports){\nfunction tree(node, visitor) {\n  if (!Array.isArray(node)) {\n    return node;\n  }\n\n  if (visitor.test && visitor.test(node[0], node[1])) {\n    node = visitor.process(node);\n    if (!node) {\n      return;\n    }\n  }\n\n  var res = [node[0]];\n  for (var i = 1; i < node.length; i++) {\n    var n = tree(node[i], visitor);\n    n && res.push(n);\n  }\n  return res;\n}\n\n\nmodule.exports = function traverse (ast, visitors) {\n  visitors.forEach(function(visitor) {\n    ast = tree(ast, visitor);\n  });\n  return ast;\n};\n\n},{}],34:[function(require,module,exports){\nexports.same = function same (ast1, ast2) {\n  return JSON.stringify(ast1) === JSON.stringify(ast2);\n};\n\n},{}],35:[function(require,module,exports){\n// version: 1.0.0\n\nfunction csspToSrc(tree, hasInfo) {\n\n    var _m_simple = {\n            'unary': 1, 'nth': 1, 'combinator': 1, 'ident': 1, 'number': 1, 's': 1,\n            'string': 1, 'attrselector': 1, 'operator': 1, 'raw': 1, 'unknown': 1\n        },\n        _m_composite = {\n            'simpleselector': 1, 'dimension': 1, 'selector': 1, 'property': 1, 'value': 1,\n            'filterv': 1, 'progid': 1, 'ruleset': 1, 'atruleb': 1, 'atrulerq': 1, 'atrulers': 1,\n            'stylesheet': 1\n        },\n        _m_primitive = {\n            'cdo': 'cdo', 'cdc': 'cdc', 'decldelim': ';', 'namespace': '|', 'delim': ','\n        };\n\n    function _t(tree) {\n        var t = tree[hasInfo? 1 : 0];\n        if (t in _m_primitive) return _m_primitive[t];\n        else if (t in _m_simple) return _simple(tree);\n        else if (t in _m_composite) return _composite(tree);\n        return _unique[t](tree);\n    }\n\n    function _composite(t, i) {\n        var s = '';\n        i = i === undefined ? (hasInfo? 2 : 1) : i;\n        for (; i < t.length; i++) s += _t(t[i]);\n        return s;\n    }\n\n    function _simple(t) {\n        return t[hasInfo? 2 : 1];\n    }\n\n    var _unique = {\n        percentage: function(t) {\n            return _t(t[hasInfo? 2 : 1]) + '%';\n        },\n        comment: function (t) {\n            return '/*' + t[hasInfo? 2 : 1] + '*/';\n        },\n        clazz: function(t) {\n            return '.' + _t(t[hasInfo? 2 : 1]);\n        },\n        atkeyword: function(t) {\n            return '@' + _t(t[hasInfo? 2 : 1]);\n        },\n        shash: function (t) {\n            return '#' + t[hasInfo? 2 : 1];\n        },\n        vhash: function(t) {\n            return '#' + t[hasInfo? 2 : 1];\n        },\n        attrib: function(t) {\n            return '[' + _composite(t) + ']';\n        },\n        important: function(t) {\n            return '!' + _composite(t) + 'important';\n        },\n        nthselector: function(t) {\n            return ':' + _simple(t[hasInfo? 2 : 1]) + '(' + _composite(t, hasInfo? 3 : 2) + ')';\n        },\n        funktion: function(t) {\n            return _simple(t[hasInfo? 2 : 1]) + '(' + _composite(t[hasInfo? 3: 2]) + ')';\n        },\n        declaration: function(t) {\n            return _t(t[hasInfo? 2 : 1]) + ':' + _t(t[hasInfo? 3 : 2]);\n        },\n        filter: function(t) {\n            return _t(t[hasInfo? 2 : 1]) + ':' + _t(t[hasInfo? 3 : 2]);\n        },\n        block: function(t) {\n            return '{' + _composite(t) + '}';\n        },\n        braces: function(t) {\n            return t[hasInfo? 2 : 1] + _composite(t, hasInfo? 4 : 3) + t[hasInfo? 3 : 2];\n        },\n        atrules: function(t) {\n            return _composite(t) + ';';\n        },\n        atruler: function(t) {\n            return _t(t[hasInfo? 2 : 1]) + _t(t[hasInfo? 3 : 2]) + '{' + _t(t[hasInfo? 4 : 3]) + '}';\n        },\n        pseudoe: function(t) {\n            return '::' + _t(t[hasInfo? 2 : 1]);\n        },\n        pseudoc: function(t) {\n            return ':' + _t(t[hasInfo? 2 : 1]);\n        },\n        uri: function(t) {\n            return 'url(' + _composite(t) + ')';\n        },\n        functionExpression: function(t) {\n            return 'expression(' + t[hasInfo? 2 : 1] + ')';\n        }\n    };\n\n    return _t(tree);\n}\nexports.csspToSrc = csspToSrc;\n\n},{}],36:[function(require,module,exports){\nvar srcToCSSP = (function() {\nvar TokenType = {\n    StringSQ: 'StringSQ',\n    StringDQ: 'StringDQ',\n    CommentML: 'CommentML',\n    CommentSL: 'CommentSL',\n\n    Newline: 'Newline',\n    Space: 'Space',\n    Tab: 'Tab',\n\n    ExclamationMark: 'ExclamationMark',         // !\n    QuotationMark: 'QuotationMark',             // \"\n    NumberSign: 'NumberSign',                   // #\n    DollarSign: 'DollarSign',                   // $\n    PercentSign: 'PercentSign',                 // %\n    Ampersand: 'Ampersand',                     // &\n    Apostrophe: 'Apostrophe',                   // '\n    LeftParenthesis: 'LeftParenthesis',         // (\n    RightParenthesis: 'RightParenthesis',       // )\n    Asterisk: 'Asterisk',                       // *\n    PlusSign: 'PlusSign',                       // +\n    Comma: 'Comma',                             // ,\n    HyphenMinus: 'HyphenMinus',                 // -\n    FullStop: 'FullStop',                       // .\n    Solidus: 'Solidus',                         // /\n    Colon: 'Colon',                             // :\n    Semicolon: 'Semicolon',                     // ;\n    LessThanSign: 'LessThanSign',               // <\n    EqualsSign: 'EqualsSign',                   // =\n    GreaterThanSign: 'GreaterThanSign',         // >\n    QuestionMark: 'QuestionMark',               // ?\n    CommercialAt: 'CommercialAt',               // @\n    LeftSquareBracket: 'LeftSquareBracket',     // [\n    ReverseSolidus: 'ReverseSolidus',           // \\\n    RightSquareBracket: 'RightSquareBracket',   // ]\n    CircumflexAccent: 'CircumflexAccent',       // ^\n    LowLine: 'LowLine',                         // _\n    LeftCurlyBracket: 'LeftCurlyBracket',       // {\n    VerticalLine: 'VerticalLine',               // |\n    RightCurlyBracket: 'RightCurlyBracket',     // }\n    Tilde: 'Tilde',                             // ~\n\n    Identifier: 'Identifier',\n    DecimalNumber: 'DecimalNumber'\n};\n\nvar getTokens = (function() {\n\n    var Punctuation,\n        urlMode = false,\n        blockMode = 0;\n\n    Punctuation = {\n        ' ': TokenType.Space,\n        '\\n': TokenType.Newline,\n        '\\r': TokenType.Newline,\n        '\\t': TokenType.Tab,\n        '!': TokenType.ExclamationMark,\n        '\"': TokenType.QuotationMark,\n        '#': TokenType.NumberSign,\n        '$': TokenType.DollarSign,\n        '%': TokenType.PercentSign,\n        '&': TokenType.Ampersand,\n        '\\'': TokenType.Apostrophe,\n        '(': TokenType.LeftParenthesis,\n        ')': TokenType.RightParenthesis,\n        '*': TokenType.Asterisk,\n        '+': TokenType.PlusSign,\n        ',': TokenType.Comma,\n        '-': TokenType.HyphenMinus,\n        '.': TokenType.FullStop,\n        '/': TokenType.Solidus,\n        ':': TokenType.Colon,\n        ';': TokenType.Semicolon,\n        '<': TokenType.LessThanSign,\n        '=': TokenType.EqualsSign,\n        '>': TokenType.GreaterThanSign,\n        '?': TokenType.QuestionMark,\n        '@': TokenType.CommercialAt,\n        '[': TokenType.LeftSquareBracket,\n    //        '\\\\': TokenType.ReverseSolidus,\n        ']': TokenType.RightSquareBracket,\n        '^': TokenType.CircumflexAccent,\n        '_': TokenType.LowLine,\n        '{': TokenType.LeftCurlyBracket,\n        '|': TokenType.VerticalLine,\n        '}': TokenType.RightCurlyBracket,\n        '~': TokenType.Tilde\n    };\n\n    function isDecimalDigit(c) {\n        return '0123456789'.indexOf(c) >= 0;\n    }\n\n    function throwError(message) {\n        throw message;\n    }\n\n    var buffer = '',\n        tokens = [],\n        pos,\n        tn = 0,\n        ln = 1;\n\n    function _getTokens(s) {\n        if (!s) return [];\n\n        tokens = [];\n\n        var c, cn;\n\n        for (pos = 0; pos < s.length; pos++) {\n            c = s.charAt(pos);\n            cn = s.charAt(pos + 1);\n\n            if (c === '/' && cn === '*') {\n                parseMLComment(s);\n            } else if (!urlMode && c === '/' && cn === '/') {\n                if (blockMode > 0) parseIdentifier(s); \n                else parseSLComment(s);\n            } else if (c === '\"' || c === \"'\") {\n                parseString(s, c);\n            } else if (c === ' ') {\n                parseSpaces(s)\n            } else if (c in Punctuation) {\n                pushToken(Punctuation[c], c);\n                if (c === '\\n' || c === '\\r') ln++;\n                if (c === ')') urlMode = false;\n                if (c === '{') blockMode++;\n                if (c === '}') blockMode--;\n            } else if (isDecimalDigit(c)) {\n                parseDecimalNumber(s);\n            } else {\n                parseIdentifier(s);\n            }\n        }\n\n        mark();\n\n        return tokens;\n    }\n\n    function pushToken(type, value) {\n        tokens.push({ tn: tn++, ln: ln, type: type, value: value });\n    }\n\n    function parseSpaces(s) {\n        var start = pos;\n\n        for (; pos < s.length; pos++) {\n            if (s.charAt(pos) !== ' ') break;\n        }\n\n        pushToken(TokenType.Space, s.substring(start, pos));\n        pos--;\n    }\n\n    function parseMLComment(s) {\n        var start = pos;\n\n        for (pos = pos + 2; pos < s.length; pos++) {\n            if (s.charAt(pos) === '*') {\n                if (s.charAt(pos + 1) === '/') {\n                    pos++;\n                    break;\n                }\n            }\n        }\n\n        pushToken(TokenType.CommentML, s.substring(start, pos + 1));\n    }\n\n    function parseSLComment(s) {\n        var start = pos;\n\n        for (pos = pos + 2; pos < s.length; pos++) {\n            if (s.charAt(pos) === '\\n' || s.charAt(pos) === '\\r') {\n                pos++;\n                break;\n            }\n        }\n\n        pushToken(TokenType.CommentSL, s.substring(start, pos));\n        pos--;\n    }\n\n    function parseString(s, q) {\n        var start = pos;\n\n        for (pos = pos + 1; pos < s.length; pos++) {\n            if (s.charAt(pos) === '\\\\') pos++;\n            else if (s.charAt(pos) === q) break;\n        }\n\n        pushToken(q === '\"' ? TokenType.StringDQ : TokenType.StringSQ, s.substring(start, pos + 1));\n    }\n\n    function parseDecimalNumber(s) {\n        var start = pos;\n\n        for (; pos < s.length; pos++) {\n            if (!isDecimalDigit(s.charAt(pos))) break;\n        }\n\n        pushToken(TokenType.DecimalNumber, s.substring(start, pos));\n        pos--;\n    }\n\n    function parseIdentifier(s) {\n        var start = pos;\n\n        while (s.charAt(pos) === '/') pos++;\n\n        for (; pos < s.length; pos++) {\n            if (s.charAt(pos) === '\\\\') pos++;\n            else if (s.charAt(pos) in Punctuation) break;\n        }\n\n        var ident = s.substring(start, pos);\n\n        urlMode = urlMode || ident === 'url';\n\n        pushToken(TokenType.Identifier, ident);\n        pos--;\n    }\n\n    // ====================================\n    // second run\n    // ====================================\n\n    function mark() {\n        var ps = [], // Parenthesis\n            sbs = [], // SquareBracket\n            cbs = [], // CurlyBracket\n            t;\n\n        for (var i = 0; i < tokens.length; i++) {\n            t = tokens[i];\n            switch(t.type) {\n                case TokenType.LeftParenthesis:\n                    ps.push(i);\n                    break;\n                case TokenType.RightParenthesis:\n                    if (ps.length) {\n                        t.left = ps.pop();\n                        tokens[t.left].right = i;\n                    }\n                    break;\n                case TokenType.LeftSquareBracket:\n                    sbs.push(i);\n                    break;\n                case TokenType.RightSquareBracket:\n                    if (sbs.length) {\n                        t.left = sbs.pop();\n                        tokens[t.left].right = i;\n                    }\n                    break;\n                case TokenType.LeftCurlyBracket:\n                    cbs.push(i);\n                    break;\n                case TokenType.RightCurlyBracket:\n                    if (cbs.length) {\n                        t.left = cbs.pop();\n                        tokens[t.left].right = i;\n                    }\n                    break;\n            }\n        }\n    }\n\n    return function(s) {\n        return _getTokens(s);\n    };\n\n}());\n// version: 1.0.0\n\nvar getCSSPAST = (function() {\n\n    var tokens,\n        pos,\n        failLN = 0,\n        currentBlockLN = 0,\n        needInfo = false;\n\n    var CSSPNodeType,\n        CSSLevel,\n        CSSPRules;\n\n    CSSPNodeType = {\n        IdentType: 'ident',\n        AtkeywordType: 'atkeyword',\n        StringType: 'string',\n        ShashType: 'shash',\n        VhashType: 'vhash',\n        NumberType: 'number',\n        PercentageType: 'percentage',\n        DimensionType: 'dimension',\n        CdoType: 'cdo',\n        CdcType: 'cdc',\n        DecldelimType: 'decldelim',\n        SType: 's',\n        AttrselectorType: 'attrselector',\n        AttribType: 'attrib',\n        NthType: 'nth',\n        NthselectorType: 'nthselector',\n        NamespaceType: 'namespace',\n        ClazzType: 'clazz',\n        PseudoeType: 'pseudoe',\n        PseudocType: 'pseudoc',\n        DelimType: 'delim',\n        StylesheetType: 'stylesheet',\n        AtrulebType: 'atruleb',\n        AtrulesType: 'atrules',\n        AtrulerqType: 'atrulerq',\n        AtrulersType: 'atrulers',\n        AtrulerType: 'atruler',\n        BlockType: 'block',\n        RulesetType: 'ruleset',\n        CombinatorType: 'combinator',\n        SimpleselectorType: 'simpleselector',\n        SelectorType: 'selector',\n        DeclarationType: 'declaration',\n        PropertyType: 'property',\n        ImportantType: 'important',\n        UnaryType: 'unary',\n        OperatorType: 'operator',\n        BracesType: 'braces',\n        ValueType: 'value',\n        ProgidType: 'progid',\n        FiltervType: 'filterv',\n        FilterType: 'filter',\n        CommentType: 'comment',\n        UriType: 'uri',\n        RawType: 'raw',\n        FunctionBodyType: 'functionBody',\n        FunktionType: 'funktion',\n        FunctionExpressionType: 'functionExpression',\n        UnknownType: 'unknown'\n    };\n\n    CSSPRules = {\n        'ident': function() { if (checkIdent(pos)) return getIdent() },\n        'atkeyword': function() { if (checkAtkeyword(pos)) return getAtkeyword() },\n        'string': function() { if (checkString(pos)) return getString() },\n        'shash': function() { if (checkShash(pos)) return getShash() },\n        'vhash': function() { if (checkVhash(pos)) return getVhash() },\n        'number': function() { if (checkNumber(pos)) return getNumber() },\n        'percentage': function() { if (checkPercentage(pos)) return getPercentage() },\n        'dimension': function() { if (checkDimension(pos)) return getDimension() },\n//        'cdo': function() { if (checkCDO()) return getCDO() },\n//        'cdc': function() { if (checkCDC()) return getCDC() },\n        'decldelim': function() { if (checkDecldelim(pos)) return getDecldelim() },\n        's': function() { if (checkS(pos)) return getS() },\n        'attrselector': function() { if (checkAttrselector(pos)) return getAttrselector() },\n        'attrib': function() { if (checkAttrib(pos)) return getAttrib() },\n        'nth': function() { if (checkNth(pos)) return getNth() },\n        'nthselector': function() { if (checkNthselector(pos)) return getNthselector() },\n        'namespace': function() { if (checkNamespace(pos)) return getNamespace() },\n        'clazz': function() { if (checkClazz(pos)) return getClazz() },\n        'pseudoe': function() { if (checkPseudoe(pos)) return getPseudoe() },\n        'pseudoc': function() { if (checkPseudoc(pos)) return getPseudoc() },\n        'delim': function() { if (checkDelim(pos)) return getDelim() },\n        'stylesheet': function() { if (checkStylesheet(pos)) return getStylesheet() },\n        'atruleb': function() { if (checkAtruleb(pos)) return getAtruleb() },\n        'atrules': function() { if (checkAtrules(pos)) return getAtrules() },\n        'atrulerq': function() { if (checkAtrulerq(pos)) return getAtrulerq() },\n        'atrulers': function() { if (checkAtrulers(pos)) return getAtrulers() },\n        'atruler': function() { if (checkAtruler(pos)) return getAtruler() },\n        'block': function() { if (checkBlock(pos)) return getBlock() },\n        'ruleset': function() { if (checkRuleset(pos)) return getRuleset() },\n        'combinator': function() { if (checkCombinator(pos)) return getCombinator() },\n        'simpleselector': function() { if (checkSimpleselector(pos)) return getSimpleSelector() },\n        'selector': function() { if (checkSelector(pos)) return getSelector() },\n        'declaration': function() { if (checkDeclaration(pos)) return getDeclaration() },\n        'property': function() { if (checkProperty(pos)) return getProperty() },\n        'important': function() { if (checkImportant(pos)) return getImportant() },\n        'unary': function() { if (checkUnary(pos)) return getUnary() },\n        'operator': function() { if (checkOperator(pos)) return getOperator() },\n        'braces': function() { if (checkBraces(pos)) return getBraces() },\n        'value': function() { if (checkValue(pos)) return getValue() },\n        'progid': function() { if (checkProgid(pos)) return getProgid() },\n        'filterv': function() { if (checkFilterv(pos)) return getFilterv() },\n        'filter': function() { if (checkFilter(pos)) return getFilter() },\n        'comment': function() { if (checkComment(pos)) return getComment() },\n        'uri': function() { if (checkUri(pos)) return getUri() },\n        'raw': function() { if (checkRaw(pos)) return getRaw() },\n        'funktion': function() { if (checkFunktion(pos)) return getFunktion() },\n        'functionExpression': function() { if (checkFunctionExpression(pos)) return getFunctionExpression() },\n        'unknown': function() { if (checkUnknown(pos)) return getUnknown() }\n    };\n\n    function fail(token) {\n        if (token && token.ln > failLN) failLN = token.ln;\n    }\n\n    function throwError() {\n        throw new Error('Please check the validity of the CSS block starting from the line #' + currentBlockLN);\n    }\n\n    function _getAST(_tokens, rule, _needInfo) {\n        tokens = _tokens;\n        needInfo = _needInfo;\n        pos = 0;\n\n        markSC();\n\n        return rule ? CSSPRules[rule]() : CSSPRules['stylesheet']();\n    }\n\n//any = braces | string | percentage | dimension | number | uri | functionExpression | funktion | ident | unary\n    function checkAny(_i) {\n        return checkBraces(_i) ||\n               checkString(_i) ||\n               checkPercentage(_i) ||\n               checkDimension(_i) ||\n               checkNumber(_i) ||\n               checkUri(_i) ||\n               checkFunctionExpression(_i) ||\n               checkFunktion(_i) ||\n               checkIdent(_i) ||\n               checkUnary(_i);\n    }\n\n    function getAny() {\n        if (checkBraces(pos)) return getBraces();\n        else if (checkString(pos)) return getString();\n        else if (checkPercentage(pos)) return getPercentage();\n        else if (checkDimension(pos)) return getDimension();\n        else if (checkNumber(pos)) return getNumber();\n        else if (checkUri(pos)) return getUri();\n        else if (checkFunctionExpression(pos)) return getFunctionExpression();\n        else if (checkFunktion(pos)) return getFunktion();\n        else if (checkIdent(pos)) return getIdent();\n        else if (checkUnary(pos)) return getUnary();\n    }\n\n//atkeyword = '@' ident:x -> [#atkeyword, x]\n    function checkAtkeyword(_i) {\n        var l;\n\n        if (tokens[_i++].type !== TokenType.CommercialAt) return fail(tokens[_i - 1]);\n\n        if (l = checkIdent(_i)) return l + 1;\n\n        return fail(tokens[_i]);\n    }\n\n    function getAtkeyword() {\n        var startPos = pos;\n\n        pos++;\n\n        return needInfo?\n            [{ ln: tokens[startPos].ln }, CSSPNodeType.AtkeywordType, getIdent()]:\n            [CSSPNodeType.AtkeywordType, getIdent()];\n    }\n\n//attrib = '[' sc*:s0 ident:x sc*:s1 attrselector:a sc*:s2 (ident | string):y sc*:s3 ']' -> this.concat([#attrib], s0, [x], s1, [a], s2, [y], s3)\n//       | '[' sc*:s0 ident:x sc*:s1 ']' -> this.concat([#attrib], s0, [x], s1),\n    function checkAttrib(_i) {\n        if (tokens[_i].type !== TokenType.LeftSquareBracket) return fail(tokens[_i]);\n\n        if (!tokens[_i].right) return fail(tokens[_i]);\n\n        return tokens[_i].right - _i + 1;\n    }\n\n    function checkAttrib1(_i) {\n        var start = _i;\n\n        _i++;\n\n        var l = checkSC(_i); // s0\n\n        if (l) _i += l;\n\n        if (l = checkIdent(_i)) _i += l; // x\n        else return fail(tokens[_i]);\n\n        if (l = checkSC(_i)) _i += l; // s1\n\n        if (l = checkAttrselector(_i)) _i += l; // a\n        else return fail(tokens[_i]);\n\n        if (l = checkSC(_i)) _i += l; // s2\n\n        if ((l = checkIdent(_i)) || (l = checkString(_i))) _i += l; // y\n        else return fail(tokens[_i]);\n\n        if (l = checkSC(_i)) _i += l; // s3\n\n        if (tokens[_i].type === TokenType.RightSquareBracket) return _i - start;\n\n        return fail(tokens[_i]);\n    }\n\n    function getAttrib1() {\n        var startPos = pos;\n\n        pos++;\n\n        var a = (needInfo? [{ ln: tokens[startPos].ln }, CSSPNodeType.AttribType] : [CSSPNodeType.AttribType])\n                .concat(getSC())\n                .concat([getIdent()])\n                .concat(getSC())\n                .concat([getAttrselector()])\n                .concat(getSC())\n                .concat([checkString(pos)? getString() : getIdent()])\n                .concat(getSC());\n\n        pos++;\n\n        return a;\n    }\n\n    function checkAttrib2(_i) {\n        var start = _i;\n\n        _i++;\n\n        var l = checkSC(_i);\n\n        if (l) _i += l;\n\n        if (l = checkIdent(_i)) _i += l;\n\n        if (l = checkSC(_i)) _i += l;\n\n        if (tokens[_i].type === TokenType.RightSquareBracket) return _i - start;\n\n        return fail(tokens[_i]);\n    }\n\n    function getAttrib2() {\n        var startPos = pos;\n\n        pos++;\n\n        var a = (needInfo? [{ ln: tokens[startPos].ln }, CSSPNodeType.AttribType] : [CSSPNodeType.AttribType])\n                .concat(getSC())\n                .concat([getIdent()])\n                .concat(getSC());\n\n        pos++;\n\n        return a;\n    }\n\n    function getAttrib() {\n        if (checkAttrib1(pos)) return getAttrib1(); \n        if (checkAttrib2(pos)) return getAttrib2(); \n    }\n\n//attrselector = (seq('=') | seq('~=') | seq('^=') | seq('$=') | seq('*=') | seq('|=')):x -> [#attrselector, x]\n    function checkAttrselector(_i) {\n        if (tokens[_i].type === TokenType.EqualsSign) return 1;\n        if (tokens[_i].type === TokenType.VerticalLine && (!tokens[_i + 1] || tokens[_i + 1].type !== TokenType.EqualsSign)) return 1;\n\n        if (!tokens[_i + 1] || tokens[_i + 1].type !== TokenType.EqualsSign) return fail(tokens[_i]);\n\n        switch(tokens[_i].type) {\n            case TokenType.Tilde:\n            case TokenType.CircumflexAccent:\n            case TokenType.DollarSign:\n            case TokenType.Asterisk:\n            case TokenType.VerticalLine:\n                return 2;\n        }\n\n        return fail(tokens[_i]);\n    }\n\n    function getAttrselector() {\n        var startPos = pos,\n            s = tokens[pos++].value;\n\n        if (tokens[pos] && tokens[pos].type === TokenType.EqualsSign) s += tokens[pos++].value;\n\n        return needInfo?\n                [{ ln: tokens[startPos].ln }, CSSPNodeType.AttrselectorType, s] :\n                [CSSPNodeType.AttrselectorType, s];\n    }\n\n//atrule = atruler | atruleb | atrules\n    function checkAtrule(_i) {\n        var start = _i,\n            l;\n\n        if (tokens[start].atrule_l !== undefined) return tokens[start].atrule_l;\n\n        if (l = checkAtruler(_i)) tokens[_i].atrule_type = 1;\n        else if (l = checkAtruleb(_i)) tokens[_i].atrule_type = 2;\n        else if (l = checkAtrules(_i)) tokens[_i].atrule_type = 3;\n        else return fail(tokens[start]);\n\n        tokens[start].atrule_l = l;\n\n        return l;\n    }\n\n    function getAtrule() {\n        switch (tokens[pos].atrule_type) {\n            case 1: return getAtruler();\n            case 2: return getAtruleb();\n            case 3: return getAtrules();\n        }\n    }\n\n//atruleb = atkeyword:ak tset*:ap block:b -> this.concat([#atruleb, ak], ap, [b])\n    function checkAtruleb(_i) {\n        var start = _i,\n            l;\n\n        if (l = checkAtkeyword(_i)) _i += l;\n        else return fail(tokens[_i]);\n\n        if (l = checkTsets(_i)) _i += l;\n\n        if (l = checkBlock(_i)) _i += l;\n        else return fail(tokens[_i]);\n\n        return _i - start;\n    }\n\n    function getAtruleb() {\n        return (needInfo?\n                    [{ ln: tokens[pos].ln }, CSSPNodeType.AtrulebType, getAtkeyword()] :\n                    [CSSPNodeType.AtrulebType, getAtkeyword()])\n                        .concat(getTsets())\n                        .concat([getBlock()]);\n    }\n\n//atruler = atkeyword:ak atrulerq:x '{' atrulers:y '}' -> [#atruler, ak, x, y]\n    function checkAtruler(_i) {\n        var start = _i,\n            l;\n\n        if (l = checkAtkeyword(_i)) _i += l;\n        else return fail(tokens[_i]);\n\n        if (l = checkAtrulerq(_i)) _i += l;\n\n        if (_i < tokens.length && tokens[_i].type === TokenType.LeftCurlyBracket) _i++;\n        else return fail(tokens[_i]);\n\n        if (l = checkAtrulers(_i)) _i += l;\n\n        if (_i < tokens.length && tokens[_i].type === TokenType.RightCurlyBracket) _i++;\n        else return fail(tokens[_i]);\n\n        return _i - start;\n    }\n\n    function getAtruler() {\n        var atruler = needInfo?\n                        [{ ln: tokens[pos].ln }, CSSPNodeType.AtrulerType, getAtkeyword(), getAtrulerq()] :\n                        [CSSPNodeType.AtrulerType, getAtkeyword(), getAtrulerq()];\n\n        pos++;\n\n        atruler.push(getAtrulers());\n\n        pos++;\n\n        return atruler;\n    }\n\n//atrulerq = tset*:ap -> [#atrulerq].concat(ap)\n    function checkAtrulerq(_i) {\n        return checkTsets(_i);\n    }\n\n    function getAtrulerq() {\n        return (needInfo? [{ ln: tokens[pos].ln }, CSSPNodeType.AtrulerqType] : [CSSPNodeType.AtrulerqType]).concat(getTsets());\n    }\n\n//atrulers = sc*:s0 ruleset*:r sc*:s1 -> this.concat([#atrulers], s0, r, s1)\n    function checkAtrulers(_i) {\n        var start = _i,\n            l;\n\n        if (l = checkSC(_i)) _i += l;\n\n        while ((l = checkRuleset(_i)) || (l = checkAtrule(_i)) || (l = checkSC(_i))) {\n            _i += l;\n        }\n\n        tokens[_i].atrulers_end = 1;\n\n        if (l = checkSC(_i)) _i += l;\n\n        return _i - start;\n    }\n\n    function getAtrulers() {\n        var atrulers = (needInfo? [{ ln: tokens[pos].ln }, CSSPNodeType.AtrulersType] : [CSSPNodeType.AtrulersType]).concat(getSC()),\n            x;\n\n        while (!tokens[pos].atrulers_end) {\n            if (checkSC(pos)) {\n                atrulers = atrulers.concat(getSC());\n            } else if (checkRuleset(pos)) {\n                atrulers.push(getRuleset());\n            } else {\n                atrulers.push(getAtrule());\n            }\n        }\n\n        return atrulers.concat(getSC());\n    }\n\n//atrules = atkeyword:ak tset*:ap ';' -> this.concat([#atrules, ak], ap)\n    function checkAtrules(_i) {\n        var start = _i,\n            l;\n\n        if (l = checkAtkeyword(_i)) _i += l;\n        else return fail(tokens[_i]);\n\n        if (l = checkTsets(_i)) _i += l;\n\n        if (_i >= tokens.length) return _i - start;\n\n        if (tokens[_i].type === TokenType.Semicolon) _i++;\n        else return fail(tokens[_i]);\n\n        return _i - start;\n    }\n\n    function getAtrules() {\n        var atrules = (needInfo? [{ ln: tokens[pos].ln }, CSSPNodeType.AtrulesType, getAtkeyword()] : [CSSPNodeType.AtrulesType, getAtkeyword()]).concat(getTsets());\n\n        pos++;\n\n        return atrules;\n    }\n\n//block = '{' blockdecl*:x '}' -> this.concatContent([#block], x)\n    function checkBlock(_i) {\n        if (_i < tokens.length && tokens[_i].type === TokenType.LeftCurlyBracket) return tokens[_i].right - _i + 1;\n\n        return fail(tokens[_i]);\n    }\n\n    function getBlock() {\n        var block = needInfo? [{ ln: tokens[pos].ln }, CSSPNodeType.BlockType] : [CSSPNodeType.BlockType],\n            end = tokens[pos].right;\n\n        pos++;\n\n        while (pos < end) {\n            if (checkBlockdecl(pos)) block = block.concat(getBlockdecl());\n            else throwError();\n        }\n\n        pos = end + 1;\n\n        return block;\n    }\n\n//blockdecl = sc*:s0 (filter | declaration):x decldelim:y sc*:s1 -> this.concat(s0, [x], [y], s1)\n//          | sc*:s0 (filter | declaration):x sc*:s1 -> this.concat(s0, [x], s1)\n//          | sc*:s0 decldelim:x sc*:s1 -> this.concat(s0, [x], s1)\n//          | sc+:s0 -> s0\n\n    function checkBlockdecl(_i) {\n        var l;\n\n        if (l = _checkBlockdecl0(_i)) tokens[_i].bd_type = 1;\n        else if (l = _checkBlockdecl1(_i)) tokens[_i].bd_type = 2;\n        else if (l = _checkBlockdecl2(_i)) tokens[_i].bd_type = 3;\n        else if (l = _checkBlockdecl3(_i)) tokens[_i].bd_type = 4;\n        else return fail(tokens[_i]);\n\n        return l;\n    }\n\n    function getBlockdecl() {\n        switch (tokens[pos].bd_type) {\n            case 1: return _getBlockdecl0();\n            case 2: return _getBlockdecl1();\n            case 3: return _getBlockdecl2();\n            case 4: return _getBlockdecl3();\n        }\n    }\n\n    //sc*:s0 (filter | declaration):x decldelim:y sc*:s1 -> this.concat(s0, [x], [y], s1)\n    function _checkBlockdecl0(_i) {\n        var start = _i,\n            l;\n\n        if (l = checkSC(_i)) _i += l;\n\n        if (l = checkFilter(_i)) {\n            tokens[_i].bd_filter = 1;\n            _i += l;\n        } else if (l = checkDeclaration(_i)) {\n            tokens[_i].bd_decl = 1;\n            _i += l;\n        } else return fail(tokens[_i]);\n\n        if (_i < tokens.length && (l = checkDecldelim(_i))) _i += l;\n        else return fail(tokens[_i]);\n\n        if (l = checkSC(_i)) _i += l;\n\n        return _i - start;\n    }\n\n    function _getBlockdecl0() {\n        return getSC()\n                .concat([tokens[pos].bd_filter? getFilter() : getDeclaration()])\n                .concat([getDecldelim()])\n                .concat(getSC());\n    }\n\n    //sc*:s0 (filter | declaration):x sc*:s1 -> this.concat(s0, [x], s1)\n    function _checkBlockdecl1(_i) {\n        var start = _i,\n            l;\n\n        if (l = checkSC(_i)) _i += l;\n\n        if (l = checkFilter(_i)) {\n            tokens[_i].bd_filter = 1;\n            _i += l;\n        } else if (l = checkDeclaration(_i)) {\n            tokens[_i].bd_decl = 1;\n            _i += l;\n        } else return fail(tokens[_i]);\n\n        if (l = checkSC(_i)) _i += l;\n\n        return _i - start;\n    }\n\n    function _getBlockdecl1() {\n        return getSC()\n                .concat([tokens[pos].bd_filter? getFilter() : getDeclaration()])\n                .concat(getSC());\n    }\n\n    //sc*:s0 decldelim:x sc*:s1 -> this.concat(s0, [x], s1)\n    function _checkBlockdecl2(_i) {\n        var start = _i,\n            l;\n\n        if (l = checkSC(_i)) _i += l;\n\n        if (l = checkDecldelim(_i)) _i += l;\n        else return fail(tokens[_i]);\n\n        if (l = checkSC(_i)) _i += l;\n\n        return _i - start;\n    }\n\n    function _getBlockdecl2() {\n        return getSC()\n                 .concat([getDecldelim()])\n                 .concat(getSC());\n    }\n\n    //sc+:s0 -> s0\n    function _checkBlockdecl3(_i) {\n        return checkSC(_i);\n    }\n\n    function _getBlockdecl3() {\n        return getSC();\n    }\n\n//braces = '(' tset*:x ')' -> this.concat([#braces, '(', ')'], x)\n//       | '[' tset*:x ']' -> this.concat([#braces, '[', ']'], x)\n    function checkBraces(_i) {\n        if (_i >= tokens.length ||\n            (tokens[_i].type !== TokenType.LeftParenthesis &&\n             tokens[_i].type !== TokenType.LeftSquareBracket)\n            ) return fail(tokens[_i]);\n\n        return tokens[_i].right - _i + 1;\n    }\n\n    function getBraces() {\n        var startPos = pos,\n            left = pos,\n            right = tokens[pos].right;\n\n        pos++;\n\n        var tsets = getTsets();\n\n        pos++;\n\n        return needInfo?\n                [{ ln: tokens[startPos].ln }, CSSPNodeType.BracesType, tokens[left].value, tokens[right].value].concat(tsets) :\n                [CSSPNodeType.BracesType, tokens[left].value, tokens[right].value].concat(tsets);\n    }\n\n    function checkCDC(_i) {}\n\n    function checkCDO(_i) {}\n\n    // node: Clazz\n    function checkClazz(_i) {\n        var l;\n\n        if (tokens[_i].clazz_l) return tokens[_i].clazz_l;\n\n        if (tokens[_i].type === TokenType.FullStop) {\n            if (l = checkIdent(_i + 1)) {\n                tokens[_i].clazz_l = l + 1;\n                return l + 1;\n            }\n        }\n\n        return fail(tokens[_i]);\n    }\n\n    function getClazz() {\n        var startPos = pos;\n\n        pos++;\n\n        return needInfo?\n                [{ ln: tokens[startPos].ln }, CSSPNodeType.ClazzType, getIdent()] :\n                [CSSPNodeType.ClazzType, getIdent()];\n    }\n\n    // node: Combinator\n    function checkCombinator(_i) {\n        if (tokens[_i].type === TokenType.PlusSign ||\n            tokens[_i].type === TokenType.GreaterThanSign ||\n            tokens[_i].type === TokenType.Tilde) return 1;\n\n        return fail(tokens[_i]);\n    }\n\n    function getCombinator() {\n        return needInfo?\n                [{ ln: tokens[pos].ln }, CSSPNodeType.CombinatorType, tokens[pos++].value] :\n                [CSSPNodeType.CombinatorType, tokens[pos++].value];\n    }\n\n    // node: Comment\n    function checkComment(_i) {\n        if (tokens[_i].type === TokenType.CommentML) return 1;\n\n        return fail(tokens[_i]);\n    }\n\n    function getComment() {\n        var startPos = pos,\n            s = tokens[pos].value.substring(2),\n            l = s.length;\n\n        if (s.charAt(l - 2) === '*' && s.charAt(l - 1) === '/') s = s.substring(0, l - 2);\n\n        pos++;\n\n        return needInfo?\n                [{ ln: tokens[startPos].ln }, CSSPNodeType.CommentType, s] :\n                [CSSPNodeType.CommentType, s];\n    }\n\n    // declaration = property:x ':' value:y -> [#declaration, x, y]\n    function checkDeclaration(_i) {\n        var start = _i,\n            l;\n\n        if (l = checkProperty(_i)) _i += l;\n        else return fail(tokens[_i]);\n\n        if (_i < tokens.length && tokens[_i].type === TokenType.Colon) _i++;\n        else return fail(tokens[_i]);\n\n        if (l = checkValue(_i)) _i += l;\n        else return fail(tokens[_i]);\n\n        return _i - start;\n    }\n\n    function getDeclaration() {\n        var declaration = needInfo?\n                [{ ln: tokens[pos].ln }, CSSPNodeType.DeclarationType, getProperty()] :\n                [CSSPNodeType.DeclarationType, getProperty()];\n\n        pos++;\n\n        declaration.push(getValue());\n\n        return declaration;\n    }\n\n    // node: Decldelim\n    function checkDecldelim(_i) {\n        if (_i < tokens.length && tokens[_i].type === TokenType.Semicolon) return 1;\n\n        return fail(tokens[_i]);\n    }\n\n    function getDecldelim() {\n        var startPos = pos;\n\n        pos++;\n\n        return needInfo?\n                [{ ln: tokens[startPos].ln }, CSSPNodeType.DecldelimType] :\n                [CSSPNodeType.DecldelimType];\n    }\n\n    // node: Delim\n    function checkDelim(_i) {\n        if (_i < tokens.length && tokens[_i].type === TokenType.Comma) return 1;\n\n        if (_i >= tokens.length) return fail(tokens[tokens.length - 1]);\n\n        return fail(tokens[_i]);\n    }\n\n    function getDelim() {\n        var startPos = pos;\n\n        pos++;\n\n        return needInfo?\n                [{ ln: tokens[startPos].ln }, CSSPNodeType.DelimType] :\n                [CSSPNodeType.DelimType];\n    }\n\n    // node: Dimension\n    function checkDimension(_i) {\n        var ln = checkNumber(_i),\n            li;\n\n        if (!ln || (ln && _i + ln >= tokens.length)) return fail(tokens[_i]);\n\n        if (li = checkNmName2(_i + ln)) return ln + li;\n\n        return fail(tokens[_i]);\n    }\n\n    function getDimension() {\n        var startPos = pos,\n            n = getNumber(),\n            dimension = needInfo ?\n                [{ ln: tokens[pos].ln }, CSSPNodeType.IdentType, getNmName2()] :\n                [CSSPNodeType.IdentType, getNmName2()];\n\n        return needInfo?\n                [{ ln: tokens[startPos].ln }, CSSPNodeType.DimensionType, n, dimension] :\n                [CSSPNodeType.DimensionType, n, dimension];\n    }\n\n//filter = filterp:x ':' filterv:y -> [#filter, x, y]\n    function checkFilter(_i) {\n        var start = _i,\n            l;\n\n        if (l = checkFilterp(_i)) _i += l;\n        else return fail(tokens[_i]);\n\n        if (tokens[_i].type === TokenType.Colon) _i++;\n        else return fail(tokens[_i]);\n\n        if (l = checkFilterv(_i)) _i += l;\n        else return fail(tokens[_i]);\n\n        return _i - start;\n    }\n\n    function getFilter() {\n        var filter = needInfo?\n                [{ ln: tokens[pos].ln }, CSSPNodeType.FilterType, getFilterp()] :\n                [CSSPNodeType.FilterType, getFilterp()];\n\n        pos++;\n\n        filter.push(getFilterv());\n\n        return filter;\n    }\n\n//filterp = (seq('-filter') | seq('_filter') | seq('*filter') | seq('-ms-filter') | seq('filter')):t sc*:s0 -> this.concat([#property, [#ident, t]], s0)\n    function checkFilterp(_i) {\n        var start = _i,\n            l,\n            x;\n\n        if (_i < tokens.length) {\n            if (tokens[_i].value === 'filter') l = 1;\n            else {\n                x = joinValues2(_i, 2);\n\n                if (x === '-filter' || x === '_filter' || x === '*filter') l = 2;\n                else {\n                    x = joinValues2(_i, 4);\n\n                    if (x === '-ms-filter') l = 4;\n                    else return fail(tokens[_i]);\n                }\n            }\n\n            tokens[start].filterp_l = l;\n\n            _i += l;\n\n            if (checkSC(_i)) _i += l;\n\n            return _i - start;\n        }\n\n        return fail(tokens[_i]);\n    }\n\n    function getFilterp() {\n        var startPos = pos,\n            x = joinValues2(pos, tokens[pos].filterp_l),\n            ident = needInfo? [{ ln: tokens[startPos].ln }, CSSPNodeType.IdentType, x] : [CSSPNodeType.IdentType, x];\n\n        pos += tokens[pos].filterp_l;\n\n        return (needInfo? [{ ln: tokens[startPos].ln }, CSSPNodeType.PropertyType, ident] : [CSSPNodeType.PropertyType, ident])\n                    .concat(getSC());\n\n    }\n\n//filterv = progid+:x -> [#filterv].concat(x)\n    function checkFilterv(_i) {\n        var start = _i,\n            l;\n\n        if (l = checkProgid(_i)) _i += l;\n        else return fail(tokens[_i]);\n\n        while (l = checkProgid(_i)) {\n            _i += l;\n        }\n\n        tokens[start].last_progid = _i;\n\n        if (_i < tokens.length && (l = checkSC(_i))) _i += l;\n\n        if (_i < tokens.length && (l = checkImportant(_i))) _i += l;\n\n        return _i - start;\n    }\n\n    function getFilterv() {\n        var filterv = needInfo? [{ ln: tokens[pos].ln }, CSSPNodeType.FiltervType] : [CSSPNodeType.FiltervType],\n            last_progid = tokens[pos].last_progid;\n\n        while (pos < last_progid) {\n            filterv.push(getProgid());\n        }\n\n        filterv = filterv.concat(checkSC(pos) ? getSC() : []);\n\n        if (pos < tokens.length && checkImportant(pos)) filterv.push(getImportant());\n\n        return filterv;\n    }\n\n//functionExpression = ``expression('' functionExpressionBody*:x ')' -> [#functionExpression, x.join('')],\n    function checkFunctionExpression(_i) {\n        var start = _i;\n\n        if (!tokens[_i] || tokens[_i++].value !== 'expression') return fail(tokens[_i - 1]);\n\n        if (!tokens[_i] || tokens[_i].type !== TokenType.LeftParenthesis) return fail(tokens[_i]);\n\n        return tokens[_i].right - start + 1;\n    }\n\n    function getFunctionExpression() {\n        var startPos = pos;\n\n        pos++;\n\n        var e = joinValues(pos + 1, tokens[pos].right - 1);\n\n        pos = tokens[pos].right + 1;\n\n        return needInfo?\n                [{ ln: tokens[startPos].ln }, CSSPNodeType.FunctionExpressionType, e] :\n                [CSSPNodeType.FunctionExpressionType, e];\n    }\n\n//funktion = ident:x '(' functionBody:y ')' -> [#funktion, x, y]\n    function checkFunktion(_i) {\n        var start = _i,\n            l = checkIdent(_i);\n\n        if (!l) return fail(tokens[_i]);\n\n        _i += l;\n\n        if (_i >= tokens.length || tokens[_i].type !== TokenType.LeftParenthesis) return fail(tokens[_i - 1]);\n\n        return tokens[_i].right - start + 1;\n    }\n\n    function getFunktion() {\n        var startPos = pos,\n            ident = getIdent();\n\n        pos++;\n\n        var body = ident[needInfo? 2 : 1] !== 'not'?\n            getFunctionBody() :\n            getNotFunctionBody(); // ok, here we have CSS3 initial draft: http://dev.w3.org/csswg/selectors3/#negation\n\n        return needInfo?\n                [{ ln: tokens[startPos].ln }, CSSPNodeType.FunktionType, ident, body] :\n                [CSSPNodeType.FunktionType, ident, body];\n    }\n\n    function getFunctionBody() {\n        var startPos = pos,\n            body = [],\n            x;\n\n        while (tokens[pos].type !== TokenType.RightParenthesis) {\n            if (checkTset(pos)) {\n                x = getTset();\n                if ((needInfo && typeof x[1] === 'string') || typeof x[0] === 'string') body.push(x);\n                else body = body.concat(x);\n            } else if (checkClazz(pos)) {\n                body.push(getClazz());\n            } else {\n                throwError();\n            }\n        }\n\n        pos++;\n\n        return (needInfo?\n                    [{ ln: tokens[startPos].ln }, CSSPNodeType.FunctionBodyType] :\n                    [CSSPNodeType.FunctionBodyType]\n                ).concat(body);\n    }\n\n    function getNotFunctionBody() {\n        var startPos = pos,\n            body = [],\n            x;\n\n        while (tokens[pos].type !== TokenType.RightParenthesis) {\n            if (checkSimpleselector(pos)) {\n                body.push(getSimpleSelector());\n            } else {\n                throwError();\n            }\n        }\n\n        pos++;\n\n        return (needInfo?\n                    [{ ln: tokens[startPos].ln }, CSSPNodeType.FunctionBodyType] :\n                    [CSSPNodeType.FunctionBodyType]\n                ).concat(body);\n    }\n\n    // node: Ident\n    function checkIdent(_i) {\n        if (_i >= tokens.length) return fail(tokens[_i]);\n\n        var start = _i,\n            wasIdent = false;\n\n        if (tokens[_i].type === TokenType.LowLine) return checkIdentLowLine(_i);\n\n        // start char / word\n        if (tokens[_i].type === TokenType.HyphenMinus ||\n            tokens[_i].type === TokenType.Identifier ||\n            tokens[_i].type === TokenType.DollarSign ||\n            tokens[_i].type === TokenType.Asterisk) _i++;\n        else return fail(tokens[_i]);\n\n        wasIdent = tokens[_i - 1].type === TokenType.Identifier;\n\n        for (; _i < tokens.length; _i++) {\n            if (tokens[_i].type !== TokenType.HyphenMinus &&\n                tokens[_i].type !== TokenType.LowLine) {\n                    if (tokens[_i].type !== TokenType.Identifier &&\n                        (tokens[_i].type !== TokenType.DecimalNumber || !wasIdent)\n                        ) break;\n                    else wasIdent = true;\n            }   \n        }\n\n        if (!wasIdent && tokens[start].type !== TokenType.Asterisk) return fail(tokens[_i]);\n\n        tokens[start].ident_last = _i - 1;\n\n        return _i - start;\n    }\n\n    function checkIdentLowLine(_i) {\n        var start = _i;\n\n        _i++;\n\n        for (; _i < tokens.length; _i++) {\n            if (tokens[_i].type !== TokenType.HyphenMinus &&\n                tokens[_i].type !== TokenType.DecimalNumber &&\n                tokens[_i].type !== TokenType.LowLine &&\n                tokens[_i].type !== TokenType.Identifier) break;\n        }\n\n        tokens[start].ident_last = _i - 1;\n\n        return _i - start;\n    }\n\n    function getIdent() {\n        var startPos = pos,\n            s = joinValues(pos, tokens[pos].ident_last);\n\n        pos = tokens[pos].ident_last + 1;\n\n        return needInfo?\n                [{ ln: tokens[startPos].ln }, CSSPNodeType.IdentType, s] :\n                [CSSPNodeType.IdentType, s];\n    }\n\n//important = '!' sc*:s0 seq('important') -> [#important].concat(s0)\n    function checkImportant(_i) {\n        var start = _i,\n            l;\n\n        if (tokens[_i++].type !== TokenType.ExclamationMark) return fail(tokens[_i - 1]);\n\n        if (l = checkSC(_i)) _i += l;\n\n        if (tokens[_i].value !== 'important') return fail(tokens[_i]);\n\n        return _i - start + 1;\n    }\n\n    function getImportant() {\n        var startPos = pos;\n\n        pos++;\n\n        var sc = getSC();\n\n        pos++;\n\n        return (needInfo? [{ ln: tokens[startPos].ln }, CSSPNodeType.ImportantType] : [CSSPNodeType.ImportantType]).concat(sc);\n    }\n\n    // node: Namespace\n    function checkNamespace(_i) {\n        if (tokens[_i].type === TokenType.VerticalLine) return 1;\n\n        return fail(tokens[_i]);\n    }\n\n    function getNamespace() {\n        var startPos = pos;\n\n        pos++;\n\n        return needInfo?\n                [{ ln: tokens[startPos].ln }, CSSPNodeType.NamespaceType] :\n                [CSSPNodeType.NamespaceType];\n    }\n\n//nth = (digit | 'n')+:x -> [#nth, x.join('')]\n//    | (seq('even') | seq('odd')):x -> [#nth, x]\n    function checkNth(_i) {\n        return checkNth1(_i) || checkNth2(_i);\n    }\n\n    function checkNth1(_i) {\n        var start = _i;\n\n        for (; _i < tokens.length; _i++) {\n            if (tokens[_i].type !== TokenType.DecimalNumber && tokens[_i].value !== 'n') break;\n        }\n\n        if (_i !== start) {\n            tokens[start].nth_last = _i - 1;\n            return _i - start;\n        }\n\n        return fail(tokens[_i]);\n    }\n\n    function getNth() {\n        var startPos = pos;\n\n        if (tokens[pos].nth_last) {\n            var n = needInfo?\n                        [{ ln: tokens[startPos].ln }, CSSPNodeType.NthType, joinValues(pos, tokens[pos].nth_last)] :\n                        [CSSPNodeType.NthType, joinValues(pos, tokens[pos].nth_last)];\n\n            pos = tokens[pos].nth_last + 1;\n\n            return n;\n        }\n\n        return needInfo?\n                [{ ln: tokens[startPos].ln }, CSSPNodeType.NthType, tokens[pos++].value] :\n                [CSSPNodeType.NthType, tokens[pos++].value];\n    }\n\n    function checkNth2(_i) {\n        if (tokens[_i].value === 'even' || tokens[_i].value === 'odd') return 1;\n\n        return fail(tokens[_i]);\n    }\n\n//nthf = ':' seq('nth-'):x (seq('child') | seq('last-child') | seq('of-type') | seq('last-of-type')):y -> (x + y)\n    function checkNthf(_i) {\n        var start = _i,\n            l = 0;\n\n        if (tokens[_i++].type !== TokenType.Colon) return fail(tokens[_i - 1]); l++;\n\n        if (tokens[_i++].value !== 'nth' || tokens[_i++].value !== '-') return fail(tokens[_i - 1]); l += 2;\n\n        if ('child' === tokens[_i].value) {\n            l += 1;\n        } else if ('last-child' === tokens[_i].value +\n                                    tokens[_i + 1].value +\n                                    tokens[_i + 2].value) {\n            l += 3;\n        } else if ('of-type' === tokens[_i].value +\n                                 tokens[_i + 1].value +\n                                 tokens[_i + 2].value) {\n            l += 3;\n        } else if ('last-of-type' === tokens[_i].value +\n                                      tokens[_i + 1].value +\n                                      tokens[_i + 2].value +\n                                      tokens[_i + 3].value +\n                                      tokens[_i + 4].value) {\n            l += 5;\n        } else return fail(tokens[_i]);\n\n        tokens[start + 1].nthf_last = start + l - 1;\n\n        return l;\n    }\n\n    function getNthf() {\n        pos++;\n\n        var s = joinValues(pos, tokens[pos].nthf_last);\n\n        pos = tokens[pos].nthf_last + 1;\n\n        return s;\n    }\n\n//nthselector = nthf:x '(' (sc | unary | nth)*:y ')' -> [#nthselector, [#ident, x]].concat(y)\n    function checkNthselector(_i) {\n        var start = _i,\n            l;\n\n        if (l = checkNthf(_i)) _i += l;\n        else return fail(tokens[_i]);\n\n        if (tokens[_i].type !== TokenType.LeftParenthesis || !tokens[_i].right) return fail(tokens[_i]);\n\n        l++;\n\n        var rp = tokens[_i++].right;\n\n        while (_i < rp) {\n            if (l = checkSC(_i)) _i += l;\n            else if (l = checkUnary(_i)) _i += l;\n            else if (l = checkNth(_i)) _i += l;\n            else return fail(tokens[_i]);\n        }\n\n        return rp - start + 1;\n    }\n\n    function getNthselector() {\n        var startPos = pos,\n            nthf = needInfo?\n                    [{ ln: tokens[pos].ln }, CSSPNodeType.IdentType, getNthf()] :\n                    [CSSPNodeType.IdentType, getNthf()],\n            ns = needInfo?\n                    [{ ln: tokens[pos].ln }, CSSPNodeType.NthselectorType, nthf] :\n                    [CSSPNodeType.NthselectorType, nthf];\n\n        pos++;\n\n        while (tokens[pos].type !== TokenType.RightParenthesis) {\n            if (checkSC(pos)) ns = ns.concat(getSC());\n            else if (checkUnary(pos)) ns.push(getUnary());\n            else if (checkNth(pos)) ns.push(getNth());\n        }\n\n        pos++;\n\n        return ns;\n    }\n\n    // node: Number\n    function checkNumber(_i) {\n        if (_i < tokens.length && tokens[_i].number_l) return tokens[_i].number_l;\n\n        if (_i < tokens.length && tokens[_i].type === TokenType.DecimalNumber &&\n            (!tokens[_i + 1] ||\n             (tokens[_i + 1] && tokens[_i + 1].type !== TokenType.FullStop))\n        ) return (tokens[_i].number_l = 1, tokens[_i].number_l); // 10\n\n        if (_i < tokens.length &&\n             tokens[_i].type === TokenType.DecimalNumber &&\n             tokens[_i + 1] && tokens[_i + 1].type === TokenType.FullStop &&\n             (!tokens[_i + 2] || (tokens[_i + 2].type !== TokenType.DecimalNumber))\n        ) return (tokens[_i].number_l = 2, tokens[_i].number_l); // 10.\n\n        if (_i < tokens.length &&\n            tokens[_i].type === TokenType.FullStop &&\n            tokens[_i + 1].type === TokenType.DecimalNumber\n        ) return (tokens[_i].number_l = 2, tokens[_i].number_l); // .10\n\n        if (_i < tokens.length &&\n            tokens[_i].type === TokenType.DecimalNumber &&\n            tokens[_i + 1] && tokens[_i + 1].type === TokenType.FullStop &&\n            tokens[_i + 2] && tokens[_i + 2].type === TokenType.DecimalNumber\n        ) return (tokens[_i].number_l = 3, tokens[_i].number_l); // 10.10\n\n        return fail(tokens[_i]);\n    }\n\n    function getNumber() {\n        var s = '',\n            startPos = pos,\n            l = tokens[pos].number_l;\n\n        for (var i = 0; i < l; i++) {\n            s += tokens[pos + i].value;\n        }\n\n        pos += l;\n\n        return needInfo?\n                [{ ln: tokens[startPos].ln }, CSSPNodeType.NumberType, s] :\n                [CSSPNodeType.NumberType, s];\n    }\n\n    // node: Operator\n    function checkOperator(_i) {\n        if (_i < tokens.length &&\n            (tokens[_i].type === TokenType.Solidus ||\n            tokens[_i].type === TokenType.Comma ||\n            tokens[_i].type === TokenType.Colon ||\n            tokens[_i].type === TokenType.EqualsSign)) return 1;\n\n        return fail(tokens[_i]);\n    }\n\n    function getOperator() {\n        return needInfo?\n                [{ ln: tokens[pos].ln }, CSSPNodeType.OperatorType, tokens[pos++].value] :\n                [CSSPNodeType.OperatorType, tokens[pos++].value];\n    }\n\n    // node: Percentage\n    function checkPercentage(_i) {\n        var x = checkNumber(_i);\n\n        if (!x || (x && _i + x >= tokens.length)) return fail(tokens[_i]);\n\n        if (tokens[_i + x].type === TokenType.PercentSign) return x + 1;\n\n        return fail(tokens[_i]);\n    }\n\n    function getPercentage() {\n        var startPos = pos,\n            n = getNumber();\n\n        pos++;\n\n        return needInfo?\n                [{ ln: tokens[startPos].ln }, CSSPNodeType.PercentageType, n] :\n                [CSSPNodeType.PercentageType, n];\n    }\n\n//progid = sc*:s0 seq('progid:DXImageTransform.Microsoft.'):x letter+:y '(' (m_string | m_comment | ~')' char)+:z ')' sc*:s1\n//                -> this.concat([#progid], s0, [[#raw, x + y.join('') + '(' + z.join('') + ')']], s1),\n    function checkProgid(_i) {\n        var start = _i,\n            l,\n            x;\n\n        if (l = checkSC(_i)) _i += l;\n\n        if ((x = joinValues2(_i, 6)) === 'progid:DXImageTransform.Microsoft.') {\n            _start = _i;\n            _i += 6;\n        } else return fail(tokens[_i - 1]);\n\n        if (l = checkIdent(_i)) _i += l;\n        else return fail(tokens[_i]);\n\n        if (l = checkSC(_i)) _i += l;\n\n        if (tokens[_i].type === TokenType.LeftParenthesis) {\n            tokens[start].progid_end = tokens[_i].right;\n            _i = tokens[_i].right + 1;\n        } else return fail(tokens[_i]);\n\n        if (l = checkSC(_i)) _i += l;\n\n        return _i - start;\n    }\n\n    function getProgid() {\n        var startPos = pos,\n            progid_end = tokens[pos].progid_end;\n\n        return (needInfo? [{ ln: tokens[startPos].ln }, CSSPNodeType.ProgidType] : [CSSPNodeType.ProgidType])\n                .concat(getSC())\n                .concat([_getProgid(progid_end)])\n                .concat(getSC());\n    }\n\n    function _getProgid(progid_end) {\n        var startPos = pos,\n            x = joinValues(pos, progid_end);\n\n        pos = progid_end + 1;\n\n        return needInfo?\n                [{ ln: tokens[startPos].ln }, CSSPNodeType.RawType, x] :\n                [CSSPNodeType.RawType, x];\n    }\n\n//property = ident:x sc*:s0 -> this.concat([#property, x], s0)\n    function checkProperty(_i) {\n        var start = _i,\n            l;\n\n        if (l = checkIdent(_i)) _i += l;\n        else return fail(tokens[_i]);\n\n        if (l = checkSC(_i)) _i += l;\n        return _i - start;\n    }\n\n    function getProperty() {\n        var startPos = pos;\n\n        return (needInfo?\n                [{ ln: tokens[startPos].ln }, CSSPNodeType.PropertyType, getIdent()] :\n                [CSSPNodeType.PropertyType, getIdent()])\n            .concat(getSC());\n    }\n\n    function checkPseudo(_i) {\n        return checkPseudoe(_i) ||\n               checkPseudoc(_i);\n    }\n\n    function getPseudo() {\n        if (checkPseudoe(pos)) return getPseudoe();\n        if (checkPseudoc(pos)) return getPseudoc();\n    }\n\n    function checkPseudoe(_i) {\n        var l;\n\n        if (tokens[_i++].type !== TokenType.Colon) return fail(tokens[_i - 1]);\n\n        if (tokens[_i++].type !== TokenType.Colon) return fail(tokens[_i - 1]);\n\n        if (l = checkIdent(_i)) return l + 2;\n\n        return fail(tokens[_i]);\n    }\n\n    function getPseudoe() {\n        var startPos = pos;\n\n        pos += 2;\n\n        return needInfo?\n                [{ ln: tokens[startPos].ln }, CSSPNodeType.PseudoeType, getIdent()] :\n                [CSSPNodeType.PseudoeType, getIdent()];\n    }\n\n//pseudoc = ':' (funktion | ident):x -> [#pseudoc, x]\n    function checkPseudoc(_i) {\n        var l;\n\n        if (tokens[_i++].type !== TokenType.Colon) return fail(tokens[_i - 1]);\n\n        if ((l = checkFunktion(_i)) || (l = checkIdent(_i))) return l + 1;\n\n        return fail(tokens[_i]);\n    }\n\n    function getPseudoc() {\n        var startPos = pos;\n\n        pos++;\n\n        return needInfo?\n                [{ ln: tokens[startPos].ln }, CSSPNodeType.PseudocType, checkFunktion(pos)? getFunktion() : getIdent()] :\n                [CSSPNodeType.PseudocType, checkFunktion(pos)? getFunktion() : getIdent()];\n    }\n\n    //ruleset = selector*:x block:y -> this.concat([#ruleset], x, [y])\n    function checkRuleset(_i) {\n        var start = _i,\n            l;\n\n        if (tokens[start].ruleset_l !== undefined) return tokens[start].ruleset_l;\n\n        while (l = checkSelector(_i)) {\n            _i += l;\n        }\n\n        if (l = checkBlock(_i)) _i += l;\n        else return fail(tokens[_i]);\n\n        tokens[start].ruleset_l = _i - start;\n\n        return _i - start;\n    }\n\n    function getRuleset() {\n        var ruleset = needInfo? [{ ln: tokens[pos].ln }, CSSPNodeType.RulesetType] : [CSSPNodeType.RulesetType];\n\n        while (!checkBlock(pos)) {\n            ruleset.push(getSelector());\n        }\n\n        ruleset.push(getBlock());\n\n        return ruleset;\n    }\n\n    // node: S\n    function checkS(_i) {\n        if (tokens[_i].ws) return tokens[_i].ws_last - _i + 1;\n\n        return fail(tokens[_i]);\n    }\n\n    function getS() {\n        var startPos = pos,\n            s = joinValues(pos, tokens[pos].ws_last);\n\n        pos = tokens[pos].ws_last + 1;\n\n        return needInfo? [{ ln: tokens[startPos].ln }, CSSPNodeType.SType, s] : [CSSPNodeType.SType, s];\n    }\n\n    function checkSC(_i) {\n        var l,\n            lsc = 0;\n\n        while (_i < tokens.length) {\n            if (!(l = checkS(_i)) && !(l = checkComment(_i))) break;\n            _i += l;\n            lsc += l;\n        }\n\n        if (lsc) return lsc;\n\n        if (_i >= tokens.length) return fail(tokens[tokens.length - 1]);\n\n        return fail(tokens[_i]);\n    }\n\n    function getSC() {\n        var sc = [];\n\n        while (pos < tokens.length) {\n            if (checkS(pos)) sc.push(getS());\n            else if (checkComment(pos)) sc.push(getComment());\n            else break;\n        }\n\n        return sc;\n    }\n\n    //selector = (simpleselector | delim)+:x -> this.concat([#selector], x)\n    function checkSelector(_i) {\n        var start = _i,\n            l;\n\n        if (_i < tokens.length) {\n            while (l = checkSimpleselector(_i) || checkDelim(_i)) {\n                _i += l;\n            }\n\n            tokens[start].selector_end = _i - 1;\n\n            return _i - start;\n        }\n    }\n\n    function getSelector() {\n        var selector = needInfo? [{ ln: tokens[pos].ln }, CSSPNodeType.SelectorType] : [CSSPNodeType.SelectorType],\n            selector_end = tokens[pos].selector_end;\n\n        while (pos <= selector_end) {\n            selector.push(checkDelim(pos) ? getDelim() : getSimpleSelector());\n        }\n\n        return selector;\n    }\n\n    // node: Shash\n    function checkShash(_i) {\n        if (tokens[_i].type !== TokenType.NumberSign) return fail(tokens[_i]);\n\n        var l = checkNmName(_i + 1);\n\n        if (l) return l + 1;\n\n        return fail(tokens[_i]);\n    }\n\n    function getShash() {\n        var startPos = pos;\n\n        pos++;\n\n        return needInfo?\n                [{ ln: tokens[startPos].ln }, CSSPNodeType.ShashType, getNmName()] :\n                [CSSPNodeType.ShashType, getNmName()];\n    }\n\n//simpleselector = (nthselector | combinator | attrib | pseudo | clazz | shash | any | sc | namespace)+:x -> this.concatContent([#simpleselector], [x])\n    function checkSimpleselector(_i) {\n        var start = _i,\n            l;\n\n        while (_i < tokens.length) {\n            if (l = _checkSimpleSelector(_i)) _i += l;\n            else break;\n        }\n\n        if (_i - start) return _i - start;\n\n        if (_i >= tokens.length) return fail(tokens[tokens.length - 1]);\n\n        return fail(tokens[_i]);\n    }\n\n    function _checkSimpleSelector(_i) {\n        return checkNthselector(_i) ||\n               checkCombinator(_i) ||\n               checkAttrib(_i) ||\n               checkPseudo(_i) ||\n               checkClazz(_i) ||\n               checkShash(_i) ||\n               checkAny(_i) ||\n               checkSC(_i) ||\n               checkNamespace(_i);\n    }\n\n    function getSimpleSelector() {\n        var ss = needInfo? [{ ln: tokens[pos].ln }, CSSPNodeType.SimpleselectorType] : [CSSPNodeType.SimpleselectorType],\n            t;\n\n        while (pos < tokens.length && _checkSimpleSelector(pos)) {\n            t = _getSimpleSelector();\n\n            if ((needInfo && typeof t[1] === 'string') || typeof t[0] === 'string') ss.push(t);\n            else ss = ss.concat(t);\n        }\n\n        return ss;\n    }\n\n    function _getSimpleSelector() {\n        if (checkNthselector(pos)) return getNthselector();\n        else if (checkCombinator(pos)) return getCombinator();\n        else if (checkAttrib(pos)) return getAttrib();\n        else if (checkPseudo(pos)) return getPseudo();\n        else if (checkClazz(pos)) return getClazz();\n        else if (checkShash(pos)) return getShash();\n        else if (checkAny(pos)) return getAny();\n        else if (checkSC(pos)) return getSC();\n        else if (checkNamespace(pos)) return getNamespace();\n    }\n\n    // node: String\n    function checkString(_i) {\n        if (_i < tokens.length &&\n            (tokens[_i].type === TokenType.StringSQ || tokens[_i].type === TokenType.StringDQ)\n        ) return 1;\n\n        return fail(tokens[_i]);\n    }\n\n    function getString() {\n        var startPos = pos;\n\n        return needInfo?\n                [{ ln: tokens[startPos].ln }, CSSPNodeType.StringType, tokens[pos++].value] :\n                [CSSPNodeType.StringType, tokens[pos++].value];\n    }\n\n    //stylesheet = (cdo | cdc | sc | statement)*:x -> this.concat([#stylesheet], x)\n    function checkStylesheet(_i) {\n        var start = _i,\n            l;\n\n        while (_i < tokens.length) {\n            if (l = checkSC(_i)) _i += l;\n            else {\n                currentBlockLN = tokens[_i].ln;\n                if (l = checkAtrule(_i)) _i += l;\n                else if (l = checkRuleset(_i)) _i += l;\n                else if (l = checkUnknown(_i)) _i += l;\n                else throwError();\n            }\n        }\n\n        return _i - start;\n    }\n\n    function getStylesheet(_i) {\n        var t,\n            stylesheet = needInfo? [{ ln: tokens[pos].ln }, CSSPNodeType.StylesheetType] : [CSSPNodeType.StylesheetType];\n\n        while (pos < tokens.length) {\n            if (checkSC(pos)) stylesheet = stylesheet.concat(getSC());\n            else {\n                currentBlockLN = tokens[pos].ln;\n                if (checkRuleset(pos)) stylesheet.push(getRuleset());\n                else if (checkAtrule(pos)) stylesheet.push(getAtrule());\n                else if (checkUnknown(pos)) stylesheet.push(getUnknown());\n                else throwError();\n            }\n        }\n\n        return stylesheet;\n    }\n\n//tset = vhash | any | sc | operator\n    function checkTset(_i) {\n        return checkVhash(_i) ||\n               checkAny(_i) ||\n               checkSC(_i) ||\n               checkOperator(_i);\n    }\n\n    function getTset() {\n        if (checkVhash(pos)) return getVhash();\n        else if (checkAny(pos)) return getAny();\n        else if (checkSC(pos)) return getSC();\n        else if (checkOperator(pos)) return getOperator();\n    }\n\n    function checkTsets(_i) {\n        var start = _i,\n            l;\n\n        while (l = checkTset(_i)) {\n            _i += l;\n        }\n\n        return _i - start;\n    }\n\n    function getTsets() {\n        var tsets = [],\n            x;\n\n        while (x = getTset()) {\n            if ((needInfo && typeof x[1] === 'string') || typeof x[0] === 'string') tsets.push(x);\n            else tsets = tsets.concat(x);\n        }\n\n        return tsets;\n    }\n\n    // node: Unary\n    function checkUnary(_i) {\n        if (_i < tokens.length &&\n            (tokens[_i].type === TokenType.HyphenMinus ||\n            tokens[_i].type === TokenType.PlusSign)\n        ) return 1;\n\n        return fail(tokens[_i]);\n    }\n\n    function getUnary() {\n        var startPos = pos;\n\n        return needInfo?\n                [{ ln: tokens[startPos].ln }, CSSPNodeType.UnaryType, tokens[pos++].value] :\n                [CSSPNodeType.UnaryType, tokens[pos++].value];\n    }\n\n    // node: Unknown\n    function checkUnknown(_i) {\n        if (_i < tokens.length && tokens[_i].type === TokenType.CommentSL) return 1;\n\n        return fail(tokens[_i]);\n    }\n\n    function getUnknown() {\n        var startPos = pos;\n\n        return needInfo?\n                [{ ln: tokens[startPos].ln }, CSSPNodeType.UnknownType, tokens[pos++].value] :\n                [CSSPNodeType.UnknownType, tokens[pos++].value];\n    }\n\n//    uri = seq('url(') sc*:s0 string:x sc*:s1 ')' -> this.concat([#uri], s0, [x], s1)\n//        | seq('url(') sc*:s0 (~')' ~m_w char)*:x sc*:s1 ')' -> this.concat([#uri], s0, [[#raw, x.join('')]], s1),\n    function checkUri(_i) {\n        var start = _i,\n            l;\n\n        if (_i < tokens.length && tokens[_i++].value !== 'url') return fail(tokens[_i - 1]);\n\n        if (!tokens[_i] || tokens[_i].type !== TokenType.LeftParenthesis) return fail(tokens[_i]);\n\n        return tokens[_i].right - start + 1;\n    }\n\n    function getUri() {\n        var startPos = pos,\n            uriExcluding = {};\n\n        pos += 2;\n\n        uriExcluding[TokenType.Space] = 1;\n        uriExcluding[TokenType.Tab] = 1;\n        uriExcluding[TokenType.Newline] = 1;\n        uriExcluding[TokenType.LeftParenthesis] = 1;\n        uriExcluding[TokenType.RightParenthesis] = 1;\n\n        if (checkUri1(pos)) {\n            var uri = (needInfo? [{ ln: tokens[startPos].ln }, CSSPNodeType.UriType] : [CSSPNodeType.UriType])\n                        .concat(getSC())\n                        .concat([getString()])\n                        .concat(getSC());\n\n            pos++;\n\n            return uri;\n        } else {\n            var uri = (needInfo? [{ ln: tokens[startPos].ln }, CSSPNodeType.UriType] : [CSSPNodeType.UriType])\n                        .concat(getSC()),\n                l = checkExcluding(uriExcluding, pos),\n                raw = needInfo?\n                        [{ ln: tokens[pos].ln }, CSSPNodeType.RawType, joinValues(pos, pos + l)] :\n                        [CSSPNodeType.RawType, joinValues(pos, pos + l)];\n\n            uri.push(raw);\n\n            pos += l + 1;\n\n            uri = uri.concat(getSC());\n\n            pos++;\n\n            return uri;\n        }\n    }\n\n    function checkUri1(_i) {\n        var start = _i,\n            l = checkSC(_i);\n\n        if (l) _i += l;\n\n        if (tokens[_i].type !== TokenType.StringDQ && tokens[_i].type !== TokenType.StringSQ) return fail(tokens[_i]);\n\n        _i++;\n\n        if (l = checkSC(_i)) _i += l;\n\n        return _i - start;\n    }\n\n    // value = (sc | vhash | any | block | atkeyword | operator | important)+:x -> this.concat([#value], x)\n    function checkValue(_i) {\n        var start = _i,\n            l;\n\n        while (_i < tokens.length) {\n            if (l = _checkValue(_i)) _i += l;\n            else break;\n        }\n\n        if (_i - start) return _i - start;\n\n        return fail(tokens[_i]);\n    }\n\n    function _checkValue(_i) {\n        return checkSC(_i) ||\n               checkVhash(_i) ||\n               checkAny(_i) ||\n               checkBlock(_i) ||\n               checkAtkeyword(_i) ||\n               checkOperator(_i) ||\n               checkImportant(_i);\n    }\n\n    function getValue() {\n        var ss = needInfo? [{ ln: tokens[pos].ln }, CSSPNodeType.ValueType] : [CSSPNodeType.ValueType],\n            t;\n\n        while (pos < tokens.length && _checkValue(pos)) {\n            t = _getValue();\n\n            if ((needInfo && typeof t[1] === 'string') || typeof t[0] === 'string') ss.push(t);\n            else ss = ss.concat(t);\n        }\n\n        return ss;\n    }\n\n    function _getValue() {\n        if (checkSC(pos)) return getSC();\n        else if (checkVhash(pos)) return getVhash();\n        else if (checkAny(pos)) return getAny();\n        else if (checkBlock(pos)) return getBlock();\n        else if (checkAtkeyword(pos)) return getAtkeyword();\n        else if (checkOperator(pos)) return getOperator();\n        else if (checkImportant(pos)) return getImportant();\n    }\n\n    // node: Vhash\n    function checkVhash(_i) {\n        if (_i >= tokens.length || tokens[_i].type !== TokenType.NumberSign) return fail(tokens[_i]);\n\n        var l = checkNmName2(_i + 1);\n\n        if (l) return l + 1;\n\n        return fail(tokens[_i]);\n    }\n\n    function getVhash() {\n        var startPos = pos;\n\n        pos++;\n\n        return needInfo?\n                [{ ln: tokens[startPos].ln }, CSSPNodeType.VhashType, getNmName2()] :\n                [CSSPNodeType.VhashType, getNmName2()];\n    }\n\n    function checkNmName(_i) {\n        var start = _i;\n\n        // start char / word\n        if (tokens[_i].type === TokenType.HyphenMinus ||\n            tokens[_i].type === TokenType.LowLine ||\n            tokens[_i].type === TokenType.Identifier ||\n            tokens[_i].type === TokenType.DecimalNumber) _i++;\n        else return fail(tokens[_i]);\n\n        for (; _i < tokens.length; _i++) {\n            if (tokens[_i].type !== TokenType.HyphenMinus &&\n                tokens[_i].type !== TokenType.LowLine &&\n                tokens[_i].type !== TokenType.Identifier &&\n                tokens[_i].type !== TokenType.DecimalNumber) break;\n        }\n\n        tokens[start].nm_name_last = _i - 1;\n\n        return _i - start;\n    }\n\n    function getNmName() {\n        var s = joinValues(pos, tokens[pos].nm_name_last);\n\n        pos = tokens[pos].nm_name_last + 1;\n\n        return s;\n    }\n\n    function checkNmName2(_i) {\n        var start = _i;\n\n        if (tokens[_i].type === TokenType.Identifier) return 1;\n        else if (tokens[_i].type !== TokenType.DecimalNumber) return fail(tokens[_i]);\n\n        _i++;\n\n        if (!tokens[_i] || tokens[_i].type !== TokenType.Identifier) return 1;\n\n        return 2;\n    }\n\n    function getNmName2() {\n        var s = tokens[pos].value;\n\n        if (tokens[pos++].type === TokenType.DecimalNumber &&\n                pos < tokens.length &&\n                tokens[pos].type === TokenType.Identifier\n        ) s += tokens[pos++].value;\n\n        return s;\n    }\n\n    function checkExcluding(exclude, _i) {\n        var start = _i;\n\n        while(_i < tokens.length) {\n            if (exclude[tokens[_i++].type]) break;\n        }\n\n        return _i - start - 2;\n    }\n\n    function joinValues(start, finish) {\n        var s = '';\n\n        for (var i = start; i < finish + 1; i++) {\n            s += tokens[i].value;\n        }\n\n        return s;\n    }\n\n    function joinValues2(start, num) {\n        if (start + num - 1 >= tokens.length) return;\n\n        var s = '';\n\n        for (var i = 0; i < num; i++) {\n            s += tokens[start + i].value;\n        }\n\n        return s;\n    }\n\n    function markSC() {\n        var ws = -1, // whitespaces\n            sc = -1, // ws and comments\n            t;\n\n        for (var i = 0; i < tokens.length; i++) {\n            t = tokens[i];\n            switch (t.type) {\n                case TokenType.Space:\n                case TokenType.Tab:\n                case TokenType.Newline:\n                    t.ws = true;\n                    t.sc = true;\n\n                    if (ws === -1) ws = i;\n                    if (sc === -1) sc = i;\n\n                    break;\n                case TokenType.CommentML:\n                    if (ws !== -1) {\n                        tokens[ws].ws_last = i - 1;\n                        ws = -1;\n                    }\n\n                    t.sc = true;\n\n                    break;\n                default:\n                    if (ws !== -1) {\n                        tokens[ws].ws_last = i - 1;\n                        ws = -1;\n                    }\n\n                    if (sc !== -1) {\n                        tokens[sc].sc_last = i - 1;\n                        sc = -1;\n                    }\n            }\n        }\n\n        if (ws !== -1) tokens[ws].ws_last = i - 1;\n        if (sc !== -1) tokens[sc].sc_last = i - 1;\n    }\n\n    return function(_tokens, rule, _needInfo) {\n        return _getAST(_tokens, rule, _needInfo);\n    }\n\n}());\n    return function(s, rule, _needInfo) {\n        return getCSSPAST(getTokens(s), rule, _needInfo);\n    }\n}());\nexports.srcToCSSP = srcToCSSP;\n\n},{}],37:[function(require,module,exports){\n// CSSP\n\nexports.srcToCSSP = require('./gonzales.cssp.node.js').srcToCSSP;\n\nexports.csspToSrc = require('./cssp.translator.node.js').csspToSrc;\n\nexports.csspToTree = function(tree, level) {\n    var spaces = dummySpaces(level),\n        level = level ? level : 0,\n        s = (level ? '\\n' + spaces : '') + '[';\n\n    tree.forEach(function(e) {\n        if (e.ln === undefined) {\n            s += (Array.isArray(e) ? exports.csspToTree(e, level + 1) : ('\\'' + e.toString() + '\\'')) + ', ';\n        }\n    });\n\n    return s.substr(0, s.length - 2) + ']';\n}\n\nfunction dummySpaces(num) {\n    return '                                                  '.substr(0, num * 2);\n}\n\n},{\"./cssp.translator.node.js\":35,\"./gonzales.cssp.node.js\":36}],38:[function(require,module,exports){\n(function () {\n\t'use strict';\n\n\tvar crc32 = require('crc32'),\n\t\tdeflate = require('deflate-js'),\n\t\t// magic numbers marking this file as GZIP\n\t\tID1 = 0x1F,\n\t\tID2 = 0x8B,\n\t\tcompressionMethods = {\n\t\t\t'deflate': 8\n\t\t},\n\t\tpossibleFlags = {\n\t\t\t'FTEXT': 0x01,\n\t\t\t'FHCRC': 0x02,\n\t\t\t'FEXTRA': 0x04,\n\t\t\t'FNAME': 0x08,\n\t\t\t'FCOMMENT': 0x10\n\t\t},\n\t\tosMap = {\n\t\t\t'fat': 0, // FAT file system (DOS, OS/2, NT) + PKZIPW 2.50 VFAT, NTFS\n\t\t\t'amiga': 1, // Amiga\n\t\t\t'vmz': 2, // VMS (VAX or Alpha AXP)\n\t\t\t'unix': 3, // Unix\n\t\t\t'vm/cms': 4, // VM/CMS\n\t\t\t'atari': 5, // Atari\n\t\t\t'hpfs': 6, // HPFS file system (OS/2, NT 3.x)\n\t\t\t'macintosh': 7, // Macintosh\n\t\t\t'z-system': 8, // Z-System\n\t\t\t'cplm': 9, // CP/M\n\t\t\t'tops-20': 10, // TOPS-20\n\t\t\t'ntfs': 11, // NTFS file system (NT)\n\t\t\t'qdos': 12, // SMS/QDOS\n\t\t\t'acorn': 13, // Acorn RISC OS\n\t\t\t'vfat': 14, // VFAT file system (Win95, NT)\n\t\t\t'vms': 15, // MVS (code also taken for PRIMOS)\n\t\t\t'beos': 16, // BeOS (BeBox or PowerMac)\n\t\t\t'tandem': 17, // Tandem/NSK\n\t\t\t'theos': 18 // THEOS\n\t\t},\n\t\tos = 'unix',\n\t\tDEFAULT_LEVEL = 6;\n\n\tfunction putByte(n, arr) {\n\t\tarr.push(n & 0xFF);\n\t}\n\n\t// LSB first\n\tfunction putShort(n, arr) {\n\t\tarr.push(n & 0xFF);\n\t\tarr.push(n >>> 8);\n\t}\n\n\t// LSB first\n\tfunction putLong(n, arr) {\n\t\tputShort(n & 0xffff, arr);\n\t\tputShort(n >>> 16, arr);\n\t}\n\n\tfunction putString(s, arr) {\n\t\tvar i, len = s.length;\n\t\tfor (i = 0; i < len; i += 1) {\n\t\t\tputByte(s.charCodeAt(i), arr);\n\t\t}\n\t}\n\n\tfunction readByte(arr) {\n\t\treturn arr.shift();\n\t}\n\n\tfunction readShort(arr) {\n\t\treturn arr.shift() | (arr.shift() << 8);\n\t}\n\n\tfunction readLong(arr) {\n\t\tvar n1 = readShort(arr),\n\t\t\tn2 = readShort(arr);\n\n\t\t// JavaScript can't handle bits in the position 32\n\t\t// we'll emulate this by removing the left-most bit (if it exists)\n\t\t// and add it back in via multiplication, which does work\n\t\tif (n2 > 32768) {\n\t\t\tn2 -= 32768;\n\n\t\t\treturn ((n2 << 16) | n1) + 32768 * Math.pow(2, 16);\n\t\t}\n\n\t\treturn (n2 << 16) | n1;\n\t}\n\n\tfunction readString(arr) {\n\t\tvar charArr = [];\n\n\t\t// turn all bytes into chars until the terminating null\n\t\twhile (arr[0] !== 0) {\n\t\t\tcharArr.push(String.fromCharCode(arr.shift()));\n\t\t}\n\n\t\t// throw away terminating null\n\t\tarr.shift();\n\n\t\t// join all characters into a cohesive string\n\t\treturn charArr.join('');\n\t}\n\n\t/*\n\t * Reads n number of bytes and return as an array.\n\t *\n\t * @param arr- Array of bytes to read from\n\t * @param n- Number of bytes to read\n\t */\n\tfunction readBytes(arr, n) {\n\t\tvar i, ret = [];\n\t\tfor (i = 0; i < n; i += 1) {\n\t\t\tret.push(arr.shift());\n\t\t}\n\n\t\treturn ret;\n\t}\n\n\t/*\n\t * ZIPs a file in GZIP format. The format is as given by the spec, found at:\n\t * http://www.gzip.org/zlib/rfc-gzip.html\n\t *\n\t * Omitted parts in this implementation:\n\t */\n\tfunction zip(data, options) {\n\t\tvar flags = 0,\n\t\t\tlevel,\n\t\t\tcrc, out = [];\n\n\t\tif (!options) {\n\t\t\toptions = {};\n\t\t}\n\t\tlevel = options.level || DEFAULT_LEVEL;\n\n\t\tif (typeof data === 'string') {\n\t\t\tdata = Array.prototype.map.call(data, function (char) {\n\t\t\t\treturn char.charCodeAt(0);\n\t\t\t});\n\t\t}\n\n\t\t// magic number marking this file as GZIP\n\t\tputByte(ID1, out);\n\t\tputByte(ID2, out);\n\n\t\tputByte(compressionMethods['deflate'], out);\n\n\t\tif (options.name) {\n\t\t\tflags |= possibleFlags['FNAME'];\n\t\t}\n\n\t\tputByte(flags, out);\n\t\tputLong(options.timestamp || parseInt(Date.now() / 1000, 10), out);\n\n\t\t// put deflate args (extra flags)\n\t\tif (level === 1) {\n\t\t\t// fastest algorithm\n\t\t\tputByte(4, out);\n\t\t} else if (level === 9) {\n\t\t\t// maximum compression (fastest algorithm)\n\t\t\tputByte(2, out);\n\t\t} else {\n\t\t\tputByte(0, out);\n\t\t}\n\n\t\t// OS identifier\n\t\tputByte(osMap[os], out);\n\n\t\tif (options.name) {\n\t\t\t// ignore the directory part\n\t\t\tputString(options.name.substring(options.name.lastIndexOf('/') + 1), out);\n\n\t\t\t// terminating null\n\t\t\tputByte(0, out);\n\t\t}\n\n\t\tdeflate.deflate(data, level).forEach(function (byte) {\n\t\t\tputByte(byte, out);\n\t\t});\n\n\t\tputLong(parseInt(crc32(data), 16), out);\n\t\tputLong(data.length, out);\n\n\t\treturn out;\n\t}\n\n\tfunction unzip(data, options) {\n\t\t// start with a copy of the array\n\t\tvar arr = Array.prototype.slice.call(data, 0),\n\t\t\tt,\n\t\t\tcompressionMethod,\n\t\t\tflags,\n\t\t\tmtime,\n\t\t\txFlags,\n\t\t\tkey,\n\t\t\tos,\n\t\t\tcrc,\n\t\t\tsize,\n\t\t\tres;\n\n\t\t// check the first two bytes for the magic numbers\n\t\tif (readByte(arr) !== ID1 || readByte(arr) !== ID2) {\n\t\t\tthrow 'Not a GZIP file';\n\t\t}\n\n\t\tt = readByte(arr);\n\t\tt = Object.keys(compressionMethods).some(function (key) {\n\t\t\tcompressionMethod = key;\n\t\t\treturn compressionMethods[key] === t;\n\t\t});\n\n\t\tif (!t) {\n\t\t\tthrow 'Unsupported compression method';\n\t\t}\n\n\t\tflags = readByte(arr);\n\t\tmtime = readLong(arr);\n\t\txFlags = readByte(arr);\n\t\tt = readByte(arr);\n\t\tObject.keys(osMap).some(function (key) {\n\t\t\tif (osMap[key] === t) {\n\t\t\t\tos = key;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t});\n\n\t\t// just throw away the bytes for now\n\t\tif (flags & possibleFlags['FEXTRA']) {\n\t\t\tt = readShort(arr);\n\t\t\treadBytes(arr, t);\n\t\t}\n\n\t\t// just throw away for now\n\t\tif (flags & possibleFlags['FNAME']) {\n\t\t\treadString(arr);\n\t\t}\n\n\t\t// just throw away for now\n\t\tif (flags & possibleFlags['FCOMMENT']) {\n\t\t\treadString(arr);\n\t\t}\n\n\t\t// just throw away for now\n\t\tif (flags & possibleFlags['FHCRC']) {\n\t\t\treadShort(arr);\n\t\t}\n\n\t\tif (compressionMethod === 'deflate') {\n\t\t\t// give deflate everything but the last 8 bytes\n\t\t\t// the last 8 bytes are for the CRC32 checksum and filesize\n\t\t\tres = deflate.inflate(arr.splice(0, arr.length - 8));\n\t\t}\n\n\t\tif (flags & possibleFlags['FTEXT']) {\n\t\t\tres = Array.prototype.map.call(res, function (byte) {\n\t\t\t\treturn String.fromCharCode(byte);\n\t\t\t}).join('');\n\t\t}\n\n\t\tcrc = readLong(arr);\n\t\tif (crc !== parseInt(crc32(res), 16)) {\n\t\t\tthrow 'Checksum does not match';\n\t\t}\n\n\t\tsize = readLong(arr);\n\t\tif (size !== res.length) {\n\t\t\tthrow 'Size of decompressed file not correct';\n\t\t}\n\n\t\treturn res;\n\t}\n\n\tmodule.exports = {\n\t\tzip: zip,\n\t\tunzip: unzip,\n\t\tget DEFAULT_LEVEL() {\n\t\t\treturn DEFAULT_LEVEL;\n\t\t}\n\t};\n}());\n\n},{\"crc32\":39,\"deflate-js\":40}],39:[function(require,module,exports){\n(function () {\n\t'use strict';\n\n\tvar table = [],\n\t\tpoly = 0xEDB88320; // reverse polynomial\n\n\t// build the table\n\tfunction makeTable() {\n\t\tvar c, n, k;\n\n\t\tfor (n = 0; n < 256; n += 1) {\n\t\t\tc = n;\n\t\t\tfor (k = 0; k < 8; k += 1) {\n\t\t\t\tif (c & 1) {\n\t\t\t\t\tc = poly ^ (c >>> 1);\n\t\t\t\t} else {\n\t\t\t\t\tc = c >>> 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttable[n] = c >>> 0;\n\t\t}\n\t}\n\n\tfunction strToArr(str) {\n\t\t// sweet hack to turn string into a 'byte' array\n\t\treturn Array.prototype.map.call(str, function (c) {\n\t\t\treturn c.charCodeAt(0);\n\t\t});\n\t}\n\n\t/*\n\t * Compute CRC of array directly.\n\t *\n\t * This is slower for repeated calls, so append mode is not supported.\n\t */\n\tfunction crcDirect(arr) {\n\t\tvar crc = -1, // initial contents of LFBSR\n\t\t\ti, j, l, temp;\n\n\t\tfor (i = 0, l = arr.length; i < l; i += 1) {\n\t\t\ttemp = (crc ^ arr[i]) & 0xff;\n\n\t\t\t// read 8 bits one at a time\n\t\t\tfor (j = 0; j < 8; j += 1) {\n\t\t\t\tif ((temp & 1) === 1) {\n\t\t\t\t\ttemp = (temp >>> 1) ^ poly;\n\t\t\t\t} else {\n\t\t\t\t\ttemp = (temp >>> 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcrc = (crc >>> 8) ^ temp;\n\t\t}\n\n\t\t// flip bits\n\t\treturn crc ^ -1;\n\t}\n\n\t/*\n\t * Compute CRC with the help of a pre-calculated table.\n\t *\n\t * This supports append mode, if the second parameter is set.\n\t */\n\tfunction crcTable(arr, append) {\n\t\tvar crc, i, l;\n\n\t\t// if we're in append mode, don't reset crc\n\t\t// if arr is null or undefined, reset table and return\n\t\tif (typeof crcTable.crc === 'undefined' || !append || !arr) {\n\t\t\tcrcTable.crc = 0 ^ -1;\n\n\t\t\tif (!arr) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t// store in temp variable for minor speed gain\n\t\tcrc = crcTable.crc;\n\n\t\tfor (i = 0, l = arr.length; i < l; i += 1) {\n\t\t\tcrc = (crc >>> 8) ^ table[(crc ^ arr[i]) & 0xff];\n\t\t}\n\n\t\tcrcTable.crc = crc;\n\n\t\treturn crc ^ -1;\n\t}\n\n\t// build the table\n\t// this isn't that costly, and most uses will be for table assisted mode\n\tmakeTable();\n\n\tmodule.exports = function (val, direct) {\n\t\tvar val = (typeof val === 'string') ? strToArr(val) : val,\n\t\t\tret = direct ? crcDirect(val) : crcTable(val);\n\n\t\t// convert to 2's complement hex\n\t\treturn (ret >>> 0).toString(16);\n\t};\n\tmodule.exports.direct = crcDirect;\n\tmodule.exports.table = crcTable;\n}());\n\n},{}],40:[function(require,module,exports){\n(function () {\n\t'use strict';\n\n\tmodule.exports = {\n\t\t'inflate': require('./lib/rawinflate.js'),\n\t\t'deflate': require('./lib/rawdeflate.js')\n\t};\n}());\n\n},{\"./lib/rawdeflate.js\":41,\"./lib/rawinflate.js\":42}],41:[function(require,module,exports){\n/*\n * $Id: rawdeflate.js,v 0.3 2009/03/01 19:05:05 dankogai Exp dankogai $\n *\n * Original:\n *   http://www.onicos.com/staff/iz/amuse/javascript/expert/deflate.txt\n */\n\n/* Copyright (C) 1999 Masanao Izumo <iz@onicos.co.jp>\n * Version: 1.0.1\n * LastModified: Dec 25 1999\n */\n\n/* Interface:\n * data = deflate(src);\n */\n\n(function () {\n\t/* constant parameters */\n\tvar WSIZE = 32768, // Sliding Window size\n\t\tSTORED_BLOCK = 0,\n\t\tSTATIC_TREES = 1,\n\t\tDYN_TREES = 2,\n\n\t/* for deflate */\n\t\tDEFAULT_LEVEL = 6,\n\t\tFULL_SEARCH = false,\n\t\tINBUFSIZ = 32768, // Input buffer size\n\t\t//INBUF_EXTRA = 64, // Extra buffer\n\t\tOUTBUFSIZ = 1024 * 8,\n\t\twindow_size = 2 * WSIZE,\n\t\tMIN_MATCH = 3,\n\t\tMAX_MATCH = 258,\n\t\tBITS = 16,\n\t// for SMALL_MEM\n\t\tLIT_BUFSIZE = 0x2000,\n//\t\tHASH_BITS = 13,\n\t//for MEDIUM_MEM\n\t//\tLIT_BUFSIZE = 0x4000,\n\t//\tHASH_BITS = 14,\n\t// for BIG_MEM\n\t//\tLIT_BUFSIZE = 0x8000,\n\t\tHASH_BITS = 15,\n\t\tDIST_BUFSIZE = LIT_BUFSIZE,\n\t\tHASH_SIZE = 1 << HASH_BITS,\n\t\tHASH_MASK = HASH_SIZE - 1,\n\t\tWMASK = WSIZE - 1,\n\t\tNIL = 0, // Tail of hash chains\n\t\tTOO_FAR = 4096,\n\t\tMIN_LOOKAHEAD = MAX_MATCH + MIN_MATCH + 1,\n\t\tMAX_DIST = WSIZE - MIN_LOOKAHEAD,\n\t\tSMALLEST = 1,\n\t\tMAX_BITS = 15,\n\t\tMAX_BL_BITS = 7,\n\t\tLENGTH_CODES = 29,\n\t\tLITERALS = 256,\n\t\tEND_BLOCK = 256,\n\t\tL_CODES = LITERALS + 1 + LENGTH_CODES,\n\t\tD_CODES = 30,\n\t\tBL_CODES = 19,\n\t\tREP_3_6 = 16,\n\t\tREPZ_3_10 = 17,\n\t\tREPZ_11_138 = 18,\n\t\tHEAP_SIZE = 2 * L_CODES + 1,\n\t\tH_SHIFT = parseInt((HASH_BITS + MIN_MATCH - 1) / MIN_MATCH, 10),\n\n\t/* variables */\n\t\tfree_queue,\n\t\tqhead,\n\t\tqtail,\n\t\tinitflag,\n\t\toutbuf = null,\n\t\toutcnt,\n\t\toutoff,\n\t\tcomplete,\n\t\twindow,\n\t\td_buf,\n\t\tl_buf,\n\t\tprev,\n\t\tbi_buf,\n\t\tbi_valid,\n\t\tblock_start,\n\t\tins_h,\n\t\thash_head,\n\t\tprev_match,\n\t\tmatch_available,\n\t\tmatch_length,\n\t\tprev_length,\n\t\tstrstart,\n\t\tmatch_start,\n\t\teofile,\n\t\tlookahead,\n\t\tmax_chain_length,\n\t\tmax_lazy_match,\n\t\tcompr_level,\n\t\tgood_match,\n\t\tnice_match,\n\t\tdyn_ltree,\n\t\tdyn_dtree,\n\t\tstatic_ltree,\n\t\tstatic_dtree,\n\t\tbl_tree,\n\t\tl_desc,\n\t\td_desc,\n\t\tbl_desc,\n\t\tbl_count,\n\t\theap,\n\t\theap_len,\n\t\theap_max,\n\t\tdepth,\n\t\tlength_code,\n\t\tdist_code,\n\t\tbase_length,\n\t\tbase_dist,\n\t\tflag_buf,\n\t\tlast_lit,\n\t\tlast_dist,\n\t\tlast_flags,\n\t\tflags,\n\t\tflag_bit,\n\t\topt_len,\n\t\tstatic_len,\n\t\tdeflate_data,\n\t\tdeflate_pos;\n\n\tif (LIT_BUFSIZE > INBUFSIZ) {\n\t\tconsole.error(\"error: INBUFSIZ is too small\");\n\t}\n\tif ((WSIZE << 1) > (1 << BITS)) {\n\t\tconsole.error(\"error: WSIZE is too large\");\n\t}\n\tif (HASH_BITS > BITS - 1) {\n\t\tconsole.error(\"error: HASH_BITS is too large\");\n\t}\n\tif (HASH_BITS < 8 || MAX_MATCH !== 258) {\n\t\tconsole.error(\"error: Code too clever\");\n\t}\n\n\t/* objects (deflate) */\n\n\tfunction DeflateCT() {\n\t\tthis.fc = 0; // frequency count or bit string\n\t\tthis.dl = 0; // father node in Huffman tree or length of bit string\n\t}\n\n\tfunction DeflateTreeDesc() {\n\t\tthis.dyn_tree = null; // the dynamic tree\n\t\tthis.static_tree = null; // corresponding static tree or NULL\n\t\tthis.extra_bits = null; // extra bits for each code or NULL\n\t\tthis.extra_base = 0; // base index for extra_bits\n\t\tthis.elems = 0; // max number of elements in the tree\n\t\tthis.max_length = 0; // max bit length for the codes\n\t\tthis.max_code = 0; // largest code with non zero frequency\n\t}\n\n\t/* Values for max_lazy_match, good_match and max_chain_length, depending on\n\t * the desired pack level (0..9). The values given below have been tuned to\n\t * exclude worst case performance for pathological files. Better values may be\n\t * found for specific files.\n\t */\n\tfunction DeflateConfiguration(a, b, c, d) {\n\t\tthis.good_length = a; // reduce lazy search above this match length\n\t\tthis.max_lazy = b; // do not perform lazy search above this match length\n\t\tthis.nice_length = c; // quit search above this match length\n\t\tthis.max_chain = d;\n\t}\n\n\tfunction DeflateBuffer() {\n\t\tthis.next = null;\n\t\tthis.len = 0;\n\t\tthis.ptr = []; // new Array(OUTBUFSIZ); // ptr.length is never read\n\t\tthis.off = 0;\n\t}\n\n\t/* constant tables */\n\tvar extra_lbits = [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0];\n\tvar extra_dbits = [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13];\n\tvar extra_blbits = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7];\n\tvar bl_order = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];\n\tvar configuration_table = [\n\t\tnew DeflateConfiguration(0, 0, 0, 0),\n\t\tnew DeflateConfiguration(4, 4, 8, 4),\n\t\tnew DeflateConfiguration(4, 5, 16, 8),\n\t\tnew DeflateConfiguration(4, 6, 32, 32),\n\t\tnew DeflateConfiguration(4, 4, 16, 16),\n\t\tnew DeflateConfiguration(8, 16, 32, 32),\n\t\tnew DeflateConfiguration(8, 16, 128, 128),\n\t\tnew DeflateConfiguration(8, 32, 128, 256),\n\t\tnew DeflateConfiguration(32, 128, 258, 1024),\n\t\tnew DeflateConfiguration(32, 258, 258, 4096)\n\t];\n\n\n\t/* routines (deflate) */\n\n\tfunction deflate_start(level) {\n\t\tvar i;\n\n\t\tif (!level) {\n\t\t\tlevel = DEFAULT_LEVEL;\n\t\t} else if (level < 1) {\n\t\t\tlevel = 1;\n\t\t} else if (level > 9) {\n\t\t\tlevel = 9;\n\t\t}\n\n\t\tcompr_level = level;\n\t\tinitflag = false;\n\t\teofile = false;\n\t\tif (outbuf !== null) {\n\t\t\treturn;\n\t\t}\n\n\t\tfree_queue = qhead = qtail = null;\n\t\toutbuf = []; // new Array(OUTBUFSIZ); // outbuf.length never called\n\t\twindow = []; // new Array(window_size); // window.length never called\n\t\td_buf = []; // new Array(DIST_BUFSIZE); // d_buf.length never called\n\t\tl_buf = []; // new Array(INBUFSIZ + INBUF_EXTRA); // l_buf.length never called\n\t\tprev = []; // new Array(1 << BITS); // prev.length never called\n\n\t\tdyn_ltree = [];\n\t\tfor (i = 0; i < HEAP_SIZE; i++) {\n\t\t\tdyn_ltree[i] = new DeflateCT();\n\t\t}\n\t\tdyn_dtree = [];\n\t\tfor (i = 0; i < 2 * D_CODES + 1; i++) {\n\t\t\tdyn_dtree[i] = new DeflateCT();\n\t\t}\n\t\tstatic_ltree = [];\n\t\tfor (i = 0; i < L_CODES + 2; i++) {\n\t\t\tstatic_ltree[i] = new DeflateCT();\n\t\t}\n\t\tstatic_dtree = [];\n\t\tfor (i = 0; i < D_CODES; i++) {\n\t\t\tstatic_dtree[i] = new DeflateCT();\n\t\t}\n\t\tbl_tree = [];\n\t\tfor (i = 0; i < 2 * BL_CODES + 1; i++) {\n\t\t\tbl_tree[i] = new DeflateCT();\n\t\t}\n\t\tl_desc = new DeflateTreeDesc();\n\t\td_desc = new DeflateTreeDesc();\n\t\tbl_desc = new DeflateTreeDesc();\n\t\tbl_count = []; // new Array(MAX_BITS+1); // bl_count.length never called\n\t\theap = []; // new Array(2*L_CODES+1); // heap.length never called\n\t\tdepth = []; // new Array(2*L_CODES+1); // depth.length never called\n\t\tlength_code = []; // new Array(MAX_MATCH-MIN_MATCH+1); // length_code.length never called\n\t\tdist_code = []; // new Array(512); // dist_code.length never called\n\t\tbase_length = []; // new Array(LENGTH_CODES); // base_length.length never called\n\t\tbase_dist = []; // new Array(D_CODES); // base_dist.length never called\n\t\tflag_buf = []; // new Array(parseInt(LIT_BUFSIZE / 8, 10)); // flag_buf.length never called\n\t}\n\n\tfunction deflate_end() {\n\t\tfree_queue = qhead = qtail = null;\n\t\toutbuf = null;\n\t\twindow = null;\n\t\td_buf = null;\n\t\tl_buf = null;\n\t\tprev = null;\n\t\tdyn_ltree = null;\n\t\tdyn_dtree = null;\n\t\tstatic_ltree = null;\n\t\tstatic_dtree = null;\n\t\tbl_tree = null;\n\t\tl_desc = null;\n\t\td_desc = null;\n\t\tbl_desc = null;\n\t\tbl_count = null;\n\t\theap = null;\n\t\tdepth = null;\n\t\tlength_code = null;\n\t\tdist_code = null;\n\t\tbase_length = null;\n\t\tbase_dist = null;\n\t\tflag_buf = null;\n\t}\n\n\tfunction reuse_queue(p) {\n\t\tp.next = free_queue;\n\t\tfree_queue = p;\n\t}\n\n\tfunction new_queue() {\n\t\tvar p;\n\n\t\tif (free_queue !== null) {\n\t\t\tp = free_queue;\n\t\t\tfree_queue = free_queue.next;\n\t\t} else {\n\t\t\tp = new DeflateBuffer();\n\t\t}\n\t\tp.next = null;\n\t\tp.len = p.off = 0;\n\n\t\treturn p;\n\t}\n\n\tfunction head1(i) {\n\t\treturn prev[WSIZE + i];\n\t}\n\n\tfunction head2(i, val) {\n\t\treturn (prev[WSIZE + i] = val);\n\t}\n\n\t/* put_byte is used for the compressed output, put_ubyte for the\n\t * uncompressed output. However unlzw() uses window for its\n\t * suffix table instead of its output buffer, so it does not use put_ubyte\n\t * (to be cleaned up).\n\t */\n\tfunction put_byte(c) {\n\t\toutbuf[outoff + outcnt++] = c;\n\t\tif (outoff + outcnt === OUTBUFSIZ) {\n\t\t\tqoutbuf();\n\t\t}\n\t}\n\n\t/* Output a 16 bit value, lsb first */\n\tfunction put_short(w) {\n\t\tw &= 0xffff;\n\t\tif (outoff + outcnt < OUTBUFSIZ - 2) {\n\t\t\toutbuf[outoff + outcnt++] = (w & 0xff);\n\t\t\toutbuf[outoff + outcnt++] = (w >>> 8);\n\t\t} else {\n\t\t\tput_byte(w & 0xff);\n\t\t\tput_byte(w >>> 8);\n\t\t}\n\t}\n\n\t/* ==========================================================================\n\t * Insert string s in the dictionary and set match_head to the previous head\n\t * of the hash chain (the most recent string with same hash key). Return\n\t * the previous length of the hash chain.\n\t * IN  assertion: all calls to to INSERT_STRING are made with consecutive\n\t *    input characters and the first MIN_MATCH bytes of s are valid\n\t *    (except for the last MIN_MATCH-1 bytes of the input file).\n\t */\n\tfunction INSERT_STRING() {\n\t\tins_h = ((ins_h << H_SHIFT) ^ (window[strstart + MIN_MATCH - 1] & 0xff)) & HASH_MASK;\n\t\thash_head = head1(ins_h);\n\t\tprev[strstart & WMASK] = hash_head;\n\t\thead2(ins_h, strstart);\n\t}\n\n\t/* Send a code of the given tree. c and tree must not have side effects */\n\tfunction SEND_CODE(c, tree) {\n\t\tsend_bits(tree[c].fc, tree[c].dl);\n\t}\n\n\t/* Mapping from a distance to a distance code. dist is the distance - 1 and\n\t * must not have side effects. dist_code[256] and dist_code[257] are never\n\t * used.\n\t */\n\tfunction D_CODE(dist) {\n\t\treturn (dist < 256 ? dist_code[dist] : dist_code[256 + (dist >> 7)]) & 0xff;\n\t}\n\n\t/* ==========================================================================\n\t * Compares to subtrees, using the tree depth as tie breaker when\n\t * the subtrees have equal frequency. This minimizes the worst case length.\n\t */\n\tfunction SMALLER(tree, n, m) {\n\t\treturn tree[n].fc < tree[m].fc || (tree[n].fc === tree[m].fc && depth[n] <= depth[m]);\n\t}\n\n\t/* ==========================================================================\n\t * read string data\n\t */\n\tfunction read_buff(buff, offset, n) {\n\t\tvar i;\n\t\tfor (i = 0; i < n && deflate_pos < deflate_data.length; i++) {\n\t\t\tbuff[offset + i] = deflate_data[deflate_pos++] & 0xff;\n\t\t}\n\t\treturn i;\n\t}\n\n\t/* ==========================================================================\n\t * Initialize the \"longest match\" routines for a new file\n\t */\n\tfunction lm_init() {\n\t\tvar j;\n\n\t\t// Initialize the hash table. */\n\t\tfor (j = 0; j < HASH_SIZE; j++) {\n\t\t\t// head2(j, NIL);\n\t\t\tprev[WSIZE + j] = 0;\n\t\t}\n\t\t// prev will be initialized on the fly */\n\n\t\t// Set the default configuration parameters:\n\t\tmax_lazy_match = configuration_table[compr_level].max_lazy;\n\t\tgood_match = configuration_table[compr_level].good_length;\n\t\tif (!FULL_SEARCH) {\n\t\t\tnice_match = configuration_table[compr_level].nice_length;\n\t\t}\n\t\tmax_chain_length = configuration_table[compr_level].max_chain;\n\n\t\tstrstart = 0;\n\t\tblock_start = 0;\n\n\t\tlookahead = read_buff(window, 0, 2 * WSIZE);\n\t\tif (lookahead <= 0) {\n\t\t\teofile = true;\n\t\t\tlookahead = 0;\n\t\t\treturn;\n\t\t}\n\t\teofile = false;\n\t\t// Make sure that we always have enough lookahead. This is important\n\t\t// if input comes from a device such as a tty.\n\t\twhile (lookahead < MIN_LOOKAHEAD && !eofile) {\n\t\t\tfill_window();\n\t\t}\n\n\t\t// If lookahead < MIN_MATCH, ins_h is garbage, but this is\n\t\t// not important since only literal bytes will be emitted.\n\t\tins_h = 0;\n\t\tfor (j = 0; j < MIN_MATCH - 1; j++) {\n\t\t\t// UPDATE_HASH(ins_h, window[j]);\n\t\t\tins_h = ((ins_h << H_SHIFT) ^ (window[j] & 0xff)) & HASH_MASK;\n\t\t}\n\t}\n\n\t/* ==========================================================================\n\t * Set match_start to the longest match starting at the given string and\n\t * return its length. Matches shorter or equal to prev_length are discarded,\n\t * in which case the result is equal to prev_length and match_start is\n\t * garbage.\n\t * IN assertions: cur_match is the head of the hash chain for the current\n\t *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1\n\t */\n\tfunction longest_match(cur_match) {\n\t\tvar chain_length = max_chain_length; // max hash chain length\n\t\tvar scanp = strstart; // current string\n\t\tvar matchp; // matched string\n\t\tvar len; // length of current match\n\t\tvar best_len = prev_length; // best match length so far\n\n\t\t// Stop when cur_match becomes <= limit. To simplify the code,\n\t\t// we prevent matches with the string of window index 0.\n\t\tvar limit = (strstart > MAX_DIST ? strstart - MAX_DIST : NIL);\n\n\t\tvar strendp = strstart + MAX_MATCH;\n\t\tvar scan_end1 = window[scanp + best_len - 1];\n\t\tvar scan_end = window[scanp + best_len];\n\n\t\tvar i, broke;\n\n\t\t// Do not waste too much time if we already have a good match: */\n\t\tif (prev_length >= good_match) {\n\t\t\tchain_length >>= 2;\n\t\t}\n\n\t\t// Assert(encoder->strstart <= window_size-MIN_LOOKAHEAD, \"insufficient lookahead\");\n\n\t\tdo {\n\t\t\t// Assert(cur_match < encoder->strstart, \"no future\");\n\t\t\tmatchp = cur_match;\n\n\t\t\t// Skip to next match if the match length cannot increase\n\t\t\t// or if the match length is less than 2:\n\t\t\tif (window[matchp + best_len] !== scan_end  ||\n\t\t\t\t\twindow[matchp + best_len - 1] !== scan_end1 ||\n\t\t\t\t\twindow[matchp] !== window[scanp] ||\n\t\t\t\t\twindow[++matchp] !== window[scanp + 1]) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// The check at best_len-1 can be removed because it will be made\n\t\t\t// again later. (This heuristic is not always a win.)\n\t\t\t// It is not necessary to compare scan[2] and match[2] since they\n\t\t\t// are always equal when the other bytes match, given that\n\t\t\t// the hash keys are equal and that HASH_BITS >= 8.\n\t\t\tscanp += 2;\n\t\t\tmatchp++;\n\n\t\t\t// We check for insufficient lookahead only every 8th comparison;\n\t\t\t// the 256th check will be made at strstart+258.\n\t\t\twhile (scanp < strendp) {\n\t\t\t\tbroke = false;\n\t\t\t\tfor (i = 0; i < 8; i += 1) {\n\t\t\t\t\tscanp += 1;\n\t\t\t\t\tmatchp += 1;\n\t\t\t\t\tif (window[scanp] !== window[matchp]) {\n\t\t\t\t\t\tbroke = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (broke) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlen = MAX_MATCH - (strendp - scanp);\n\t\t\tscanp = strendp - MAX_MATCH;\n\n\t\t\tif (len > best_len) {\n\t\t\t\tmatch_start = cur_match;\n\t\t\t\tbest_len = len;\n\t\t\t\tif (FULL_SEARCH) {\n\t\t\t\t\tif (len >= MAX_MATCH) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (len >= nice_match) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tscan_end1 = window[scanp + best_len - 1];\n\t\t\t\tscan_end = window[scanp + best_len];\n\t\t\t}\n\t\t} while ((cur_match = prev[cur_match & WMASK]) > limit && --chain_length !== 0);\n\n\t\treturn best_len;\n\t}\n\n\t/* ==========================================================================\n\t * Fill the window when the lookahead becomes insufficient.\n\t * Updates strstart and lookahead, and sets eofile if end of input file.\n\t * IN assertion: lookahead < MIN_LOOKAHEAD && strstart + lookahead > 0\n\t * OUT assertions: at least one byte has been read, or eofile is set;\n\t *    file reads are performed for at least two bytes (required for the\n\t *    translate_eol option).\n\t */\n\tfunction fill_window() {\n\t\tvar n, m;\n\n\t // Amount of free space at the end of the window.\n\t\tvar more = window_size - lookahead - strstart;\n\n\t\t// If the window is almost full and there is insufficient lookahead,\n\t\t// move the upper half to the lower one to make room in the upper half.\n\t\tif (more === -1) {\n\t\t\t// Very unlikely, but possible on 16 bit machine if strstart == 0\n\t\t\t// and lookahead == 1 (input done one byte at time)\n\t\t\tmore--;\n\t\t} else if (strstart >= WSIZE + MAX_DIST) {\n\t\t\t// By the IN assertion, the window is not empty so we can't confuse\n\t\t\t// more == 0 with more == 64K on a 16 bit machine.\n\t\t\t// Assert(window_size == (ulg)2*WSIZE, \"no sliding with BIG_MEM\");\n\n\t\t\t// System.arraycopy(window, WSIZE, window, 0, WSIZE);\n\t\t\tfor (n = 0; n < WSIZE; n++) {\n\t\t\t\twindow[n] = window[n + WSIZE];\n\t\t\t}\n\n\t\t\tmatch_start -= WSIZE;\n\t\t\tstrstart    -= WSIZE; /* we now have strstart >= MAX_DIST: */\n\t\t\tblock_start -= WSIZE;\n\n\t\t\tfor (n = 0; n < HASH_SIZE; n++) {\n\t\t\t\tm = head1(n);\n\t\t\t\thead2(n, m >= WSIZE ? m - WSIZE : NIL);\n\t\t\t}\n\t\t\tfor (n = 0; n < WSIZE; n++) {\n\t\t\t// If n is not on any hash chain, prev[n] is garbage but\n\t\t\t// its value will never be used.\n\t\t\t\tm = prev[n];\n\t\t\t\tprev[n] = (m >= WSIZE ? m - WSIZE : NIL);\n\t\t\t}\n\t\t\tmore += WSIZE;\n\t\t}\n\t\t// At this point, more >= 2\n\t\tif (!eofile) {\n\t\t\tn = read_buff(window, strstart + lookahead, more);\n\t\t\tif (n <= 0) {\n\t\t\t\teofile = true;\n\t\t\t} else {\n\t\t\t\tlookahead += n;\n\t\t\t}\n\t\t}\n\t}\n\n\t/* ==========================================================================\n\t * Processes a new input file and return its compressed length. This\n\t * function does not perform lazy evaluationof matches and inserts\n\t * new strings in the dictionary only for unmatched strings or for short\n\t * matches. It is used only for the fast compression options.\n\t */\n\tfunction deflate_fast() {\n\t\twhile (lookahead !== 0 && qhead === null) {\n\t\t\tvar flush; // set if current block must be flushed\n\n\t\t\t// Insert the string window[strstart .. strstart+2] in the\n\t\t\t// dictionary, and set hash_head to the head of the hash chain:\n\t\t\tINSERT_STRING();\n\n\t\t\t// Find the longest match, discarding those <= prev_length.\n\t\t\t// At this point we have always match_length < MIN_MATCH\n\t\t\tif (hash_head !== NIL && strstart - hash_head <= MAX_DIST) {\n\t\t\t\t// To simplify the code, we prevent matches with the string\n\t\t\t\t// of window index 0 (in particular we have to avoid a match\n\t\t\t\t// of the string with itself at the start of the input file).\n\t\t\t\tmatch_length = longest_match(hash_head);\n\t\t\t\t// longest_match() sets match_start */\n\t\t\t\tif (match_length > lookahead) {\n\t\t\t\t\tmatch_length = lookahead;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (match_length >= MIN_MATCH) {\n\t\t\t\t// check_match(strstart, match_start, match_length);\n\n\t\t\t\tflush = ct_tally(strstart - match_start, match_length - MIN_MATCH);\n\t\t\t\tlookahead -= match_length;\n\n\t\t\t\t// Insert new strings in the hash table only if the match length\n\t\t\t\t// is not too large. This saves time but degrades compression.\n\t\t\t\tif (match_length <= max_lazy_match) {\n\t\t\t\t\tmatch_length--; // string at strstart already in hash table\n\t\t\t\t\tdo {\n\t\t\t\t\t\tstrstart++;\n\t\t\t\t\t\tINSERT_STRING();\n\t\t\t\t\t\t// strstart never exceeds WSIZE-MAX_MATCH, so there are\n\t\t\t\t\t\t// always MIN_MATCH bytes ahead. If lookahead < MIN_MATCH\n\t\t\t\t\t\t// these bytes are garbage, but it does not matter since\n\t\t\t\t\t\t// the next lookahead bytes will be emitted as literals.\n\t\t\t\t\t} while (--match_length !== 0);\n\t\t\t\t\tstrstart++;\n\t\t\t\t} else {\n\t\t\t\t\tstrstart += match_length;\n\t\t\t\t\tmatch_length = 0;\n\t\t\t\t\tins_h = window[strstart] & 0xff;\n\t\t\t\t\t// UPDATE_HASH(ins_h, window[strstart + 1]);\n\t\t\t\t\tins_h = ((ins_h << H_SHIFT) ^ (window[strstart + 1] & 0xff)) & HASH_MASK;\n\n\t\t\t\t//#if MIN_MATCH !== 3\n\t\t\t\t//\t\tCall UPDATE_HASH() MIN_MATCH-3 more times\n\t\t\t\t//#endif\n\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// No match, output a literal byte */\n\t\t\t\tflush = ct_tally(0, window[strstart] & 0xff);\n\t\t\t\tlookahead--;\n\t\t\t\tstrstart++;\n\t\t\t}\n\t\t\tif (flush) {\n\t\t\t\tflush_block(0);\n\t\t\t\tblock_start = strstart;\n\t\t\t}\n\n\t\t\t// Make sure that we always have enough lookahead, except\n\t\t\t// at the end of the input file. We need MAX_MATCH bytes\n\t\t\t// for the next match, plus MIN_MATCH bytes to insert the\n\t\t\t// string following the next match.\n\t\t\twhile (lookahead < MIN_LOOKAHEAD && !eofile) {\n\t\t\t\tfill_window();\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction deflate_better() {\n\t\t// Process the input block. */\n\t\twhile (lookahead !== 0 && qhead === null) {\n\t\t\t// Insert the string window[strstart .. strstart+2] in the\n\t\t\t// dictionary, and set hash_head to the head of the hash chain:\n\t\t\tINSERT_STRING();\n\n\t\t\t// Find the longest match, discarding those <= prev_length.\n\t\t\tprev_length = match_length;\n\t\t\tprev_match = match_start;\n\t\t\tmatch_length = MIN_MATCH - 1;\n\n\t\t\tif (hash_head !== NIL && prev_length < max_lazy_match && strstart - hash_head <= MAX_DIST) {\n\t\t\t\t// To simplify the code, we prevent matches with the string\n\t\t\t\t// of window index 0 (in particular we have to avoid a match\n\t\t\t\t// of the string with itself at the start of the input file).\n\t\t\t\tmatch_length = longest_match(hash_head);\n\t\t\t\t// longest_match() sets match_start */\n\t\t\t\tif (match_length > lookahead) {\n\t\t\t\t\tmatch_length = lookahead;\n\t\t\t\t}\n\n\t\t\t\t// Ignore a length 3 match if it is too distant: */\n\t\t\t\tif (match_length === MIN_MATCH && strstart - match_start > TOO_FAR) {\n\t\t\t\t\t// If prev_match is also MIN_MATCH, match_start is garbage\n\t\t\t\t\t// but we will ignore the current match anyway.\n\t\t\t\t\tmatch_length--;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// If there was a match at the previous step and the current\n\t\t\t// match is not better, output the previous match:\n\t\t\tif (prev_length >= MIN_MATCH && match_length <= prev_length) {\n\t\t\t\tvar flush; // set if current block must be flushed\n\n\t\t\t\t// check_match(strstart - 1, prev_match, prev_length);\n\t\t\t\tflush = ct_tally(strstart - 1 - prev_match, prev_length - MIN_MATCH);\n\n\t\t\t\t// Insert in hash table all strings up to the end of the match.\n\t\t\t\t// strstart-1 and strstart are already inserted.\n\t\t\t\tlookahead -= prev_length - 1;\n\t\t\t\tprev_length -= 2;\n\t\t\t\tdo {\n\t\t\t\t\tstrstart++;\n\t\t\t\t\tINSERT_STRING();\n\t\t\t\t\t// strstart never exceeds WSIZE-MAX_MATCH, so there are\n\t\t\t\t\t// always MIN_MATCH bytes ahead. If lookahead < MIN_MATCH\n\t\t\t\t\t// these bytes are garbage, but it does not matter since the\n\t\t\t\t\t// next lookahead bytes will always be emitted as literals.\n\t\t\t\t} while (--prev_length !== 0);\n\t\t\t\tmatch_available = false;\n\t\t\t\tmatch_length = MIN_MATCH - 1;\n\t\t\t\tstrstart++;\n\t\t\t\tif (flush) {\n\t\t\t\t\tflush_block(0);\n\t\t\t\t\tblock_start = strstart;\n\t\t\t\t}\n\t\t\t} else if (match_available) {\n\t\t\t\t// If there was no match at the previous position, output a\n\t\t\t\t// single literal. If there was a match but the current match\n\t\t\t\t// is longer, truncate the previous match to a single literal.\n\t\t\t\tif (ct_tally(0, window[strstart - 1] & 0xff)) {\n\t\t\t\t\tflush_block(0);\n\t\t\t\t\tblock_start = strstart;\n\t\t\t\t}\n\t\t\t\tstrstart++;\n\t\t\t\tlookahead--;\n\t\t\t} else {\n\t\t\t\t// There is no previous match to compare with, wait for\n\t\t\t\t// the next step to decide.\n\t\t\t\tmatch_available = true;\n\t\t\t\tstrstart++;\n\t\t\t\tlookahead--;\n\t\t\t}\n\n\t\t\t// Make sure that we always have enough lookahead, except\n\t\t\t// at the end of the input file. We need MAX_MATCH bytes\n\t\t\t// for the next match, plus MIN_MATCH bytes to insert the\n\t\t\t// string following the next match.\n\t\t\twhile (lookahead < MIN_LOOKAHEAD && !eofile) {\n\t\t\t\tfill_window();\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction init_deflate() {\n\t\tif (eofile) {\n\t\t\treturn;\n\t\t}\n\t\tbi_buf = 0;\n\t\tbi_valid = 0;\n\t\tct_init();\n\t\tlm_init();\n\n\t\tqhead = null;\n\t\toutcnt = 0;\n\t\toutoff = 0;\n\n\t\tif (compr_level <= 3) {\n\t\t\tprev_length = MIN_MATCH - 1;\n\t\t\tmatch_length = 0;\n\t\t} else {\n\t\t\tmatch_length = MIN_MATCH - 1;\n\t\t\tmatch_available = false;\n\t\t}\n\n\t\tcomplete = false;\n\t}\n\n\t/* ==========================================================================\n\t * Same as above, but achieves better compression. We use a lazy\n\t * evaluation for matches: a match is finally adopted only if there is\n\t * no better match at the next window position.\n\t */\n\tfunction deflate_internal(buff, off, buff_size) {\n\t\tvar n;\n\n\t\tif (!initflag) {\n\t\t\tinit_deflate();\n\t\t\tinitflag = true;\n\t\t\tif (lookahead === 0) { // empty\n\t\t\t\tcomplete = true;\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\n\t\tn = qcopy(buff, off, buff_size);\n\t\tif (n === buff_size) {\n\t\t\treturn buff_size;\n\t\t}\n\n\t\tif (complete) {\n\t\t\treturn n;\n\t\t}\n\n\t\tif (compr_level <= 3) {\n\t\t\t// optimized for speed\n\t\t\tdeflate_fast();\n\t\t} else {\n\t\t\tdeflate_better();\n\t\t}\n\n\t\tif (lookahead === 0) {\n\t\t\tif (match_available) {\n\t\t\t\tct_tally(0, window[strstart - 1] & 0xff);\n\t\t\t}\n\t\t\tflush_block(1);\n\t\t\tcomplete = true;\n\t\t}\n\n\t\treturn n + qcopy(buff, n + off, buff_size - n);\n\t}\n\n\tfunction qcopy(buff, off, buff_size) {\n\t\tvar n, i, j;\n\n\t\tn = 0;\n\t\twhile (qhead !== null && n < buff_size) {\n\t\t\ti = buff_size - n;\n\t\t\tif (i > qhead.len) {\n\t\t\t\ti = qhead.len;\n\t\t\t}\n\t\t\t// System.arraycopy(qhead.ptr, qhead.off, buff, off + n, i);\n\t\t\tfor (j = 0; j < i; j++) {\n\t\t\t\tbuff[off + n + j] = qhead.ptr[qhead.off + j];\n\t\t\t}\n\n\t\t\tqhead.off += i;\n\t\t\tqhead.len -= i;\n\t\t\tn += i;\n\t\t\tif (qhead.len === 0) {\n\t\t\t\tvar p;\n\t\t\t\tp = qhead;\n\t\t\t\tqhead = qhead.next;\n\t\t\t\treuse_queue(p);\n\t\t\t}\n\t\t}\n\n\t\tif (n === buff_size) {\n\t\t\treturn n;\n\t\t}\n\n\t\tif (outoff < outcnt) {\n\t\t\ti = buff_size - n;\n\t\t\tif (i > outcnt - outoff) {\n\t\t\t\ti = outcnt - outoff;\n\t\t\t}\n\t\t\t// System.arraycopy(outbuf, outoff, buff, off + n, i);\n\t\t\tfor (j = 0; j < i; j++) {\n\t\t\t\tbuff[off + n + j] = outbuf[outoff + j];\n\t\t\t}\n\t\t\toutoff += i;\n\t\t\tn += i;\n\t\t\tif (outcnt === outoff) {\n\t\t\t\toutcnt = outoff = 0;\n\t\t\t}\n\t\t}\n\t\treturn n;\n\t}\n\n\t/* ==========================================================================\n\t * Allocate the match buffer, initialize the various tables and save the\n\t * location of the internal file attribute (ascii/binary) and method\n\t * (DEFLATE/STORE).\n\t */\n\tfunction ct_init() {\n\t\tvar n; // iterates over tree elements\n\t\tvar bits; // bit counter\n\t\tvar length; // length value\n\t\tvar code; // code value\n\t\tvar dist; // distance index\n\n\t\tif (static_dtree[0].dl !== 0) {\n\t\t\treturn; // ct_init already called\n\t\t}\n\n\t\tl_desc.dyn_tree = dyn_ltree;\n\t\tl_desc.static_tree = static_ltree;\n\t\tl_desc.extra_bits = extra_lbits;\n\t\tl_desc.extra_base = LITERALS + 1;\n\t\tl_desc.elems = L_CODES;\n\t\tl_desc.max_length = MAX_BITS;\n\t\tl_desc.max_code = 0;\n\n\t\td_desc.dyn_tree = dyn_dtree;\n\t\td_desc.static_tree = static_dtree;\n\t\td_desc.extra_bits = extra_dbits;\n\t\td_desc.extra_base = 0;\n\t\td_desc.elems = D_CODES;\n\t\td_desc.max_length = MAX_BITS;\n\t\td_desc.max_code = 0;\n\n\t\tbl_desc.dyn_tree = bl_tree;\n\t\tbl_desc.static_tree = null;\n\t\tbl_desc.extra_bits = extra_blbits;\n\t\tbl_desc.extra_base = 0;\n\t\tbl_desc.elems = BL_CODES;\n\t\tbl_desc.max_length = MAX_BL_BITS;\n\t\tbl_desc.max_code = 0;\n\n\t // Initialize the mapping length (0..255) -> length code (0..28)\n\t\tlength = 0;\n\t\tfor (code = 0; code < LENGTH_CODES - 1; code++) {\n\t\t\tbase_length[code] = length;\n\t\t\tfor (n = 0; n < (1 << extra_lbits[code]); n++) {\n\t\t\t\tlength_code[length++] = code;\n\t\t\t}\n\t\t}\n\t // Assert (length === 256, \"ct_init: length !== 256\");\n\n\t\t// Note that the length 255 (match length 258) can be represented\n\t\t// in two different ways: code 284 + 5 bits or code 285, so we\n\t\t// overwrite length_code[255] to use the best encoding:\n\t\tlength_code[length - 1] = code;\n\n\t\t// Initialize the mapping dist (0..32K) -> dist code (0..29) */\n\t\tdist = 0;\n\t\tfor (code = 0; code < 16; code++) {\n\t\t\tbase_dist[code] = dist;\n\t\t\tfor (n = 0; n < (1 << extra_dbits[code]); n++) {\n\t\t\t\tdist_code[dist++] = code;\n\t\t\t}\n\t\t}\n\t\t// Assert (dist === 256, \"ct_init: dist !== 256\");\n\t\t// from now on, all distances are divided by 128\n\t\tfor (dist >>= 7; code < D_CODES; code++) {\n\t\t\tbase_dist[code] = dist << 7;\n\t\t\tfor (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {\n\t\t\t\tdist_code[256 + dist++] = code;\n\t\t\t}\n\t\t}\n\t\t// Assert (dist === 256, \"ct_init: 256+dist !== 512\");\n\n\t\t// Construct the codes of the static literal tree\n\t\tfor (bits = 0; bits <= MAX_BITS; bits++) {\n\t\t\tbl_count[bits] = 0;\n\t\t}\n\t\tn = 0;\n\t\twhile (n <= 143) {\n\t\t\tstatic_ltree[n++].dl = 8;\n\t\t\tbl_count[8]++;\n\t\t}\n\t\twhile (n <= 255) {\n\t\t\tstatic_ltree[n++].dl = 9;\n\t\t\tbl_count[9]++;\n\t\t}\n\t\twhile (n <= 279) {\n\t\t\tstatic_ltree[n++].dl = 7;\n\t\t\tbl_count[7]++;\n\t\t}\n\t\twhile (n <= 287) {\n\t\t\tstatic_ltree[n++].dl = 8;\n\t\t\tbl_count[8]++;\n\t\t}\n\t\t// Codes 286 and 287 do not exist, but we must include them in the\n\t\t// tree construction to get a canonical Huffman tree (longest code\n\t\t// all ones)\n\t\tgen_codes(static_ltree, L_CODES + 1);\n\n\t\t// The static distance tree is trivial: */\n\t\tfor (n = 0; n < D_CODES; n++) {\n\t\t\tstatic_dtree[n].dl = 5;\n\t\t\tstatic_dtree[n].fc = bi_reverse(n, 5);\n\t\t}\n\n\t\t// Initialize the first block of the first file:\n\t\tinit_block();\n\t}\n\n\t/* ==========================================================================\n\t * Initialize a new block.\n\t */\n\tfunction init_block() {\n\t\tvar n; // iterates over tree elements\n\n\t\t// Initialize the trees.\n\t\tfor (n = 0; n < L_CODES;  n++) {\n\t\t\tdyn_ltree[n].fc = 0;\n\t\t}\n\t\tfor (n = 0; n < D_CODES;  n++) {\n\t\t\tdyn_dtree[n].fc = 0;\n\t\t}\n\t\tfor (n = 0; n < BL_CODES; n++) {\n\t\t\tbl_tree[n].fc = 0;\n\t\t}\n\n\t\tdyn_ltree[END_BLOCK].fc = 1;\n\t\topt_len = static_len = 0;\n\t\tlast_lit = last_dist = last_flags = 0;\n\t\tflags = 0;\n\t\tflag_bit = 1;\n\t}\n\n\t/* ==========================================================================\n\t * Restore the heap property by moving down the tree starting at node k,\n\t * exchanging a node with the smallest of its two sons if necessary, stopping\n\t * when the heap property is re-established (each father smaller than its\n\t * two sons).\n\t *\n\t * @param tree- tree to restore\n\t * @param k- node to move down\n\t */\n\tfunction pqdownheap(tree, k) {\n\t\tvar v = heap[k],\n\t\t\tj = k << 1; // left son of k\n\n\t\twhile (j <= heap_len) {\n\t\t\t// Set j to the smallest of the two sons:\n\t\t\tif (j < heap_len && SMALLER(tree, heap[j + 1], heap[j])) {\n\t\t\t\tj++;\n\t\t\t}\n\n\t\t\t// Exit if v is smaller than both sons\n\t\t\tif (SMALLER(tree, v, heap[j])) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// Exchange v with the smallest son\n\t\t\theap[k] = heap[j];\n\t\t\tk = j;\n\n\t\t\t// And continue down the tree, setting j to the left son of k\n\t\t\tj <<= 1;\n\t\t}\n\t\theap[k] = v;\n\t}\n\n\t/* ==========================================================================\n\t * Compute the optimal bit lengths for a tree and update the total bit length\n\t * for the current block.\n\t * IN assertion: the fields freq and dad are set, heap[heap_max] and\n\t *    above are the tree nodes sorted by increasing frequency.\n\t * OUT assertions: the field len is set to the optimal bit length, the\n\t *     array bl_count contains the frequencies for each bit length.\n\t *     The length opt_len is updated; static_len is also updated if stree is\n\t *     not null.\n\t */\n\tfunction gen_bitlen(desc) { // the tree descriptor\n\t\tvar tree = desc.dyn_tree;\n\t\tvar extra = desc.extra_bits;\n\t\tvar base = desc.extra_base;\n\t\tvar max_code = desc.max_code;\n\t\tvar max_length = desc.max_length;\n\t\tvar stree = desc.static_tree;\n\t\tvar h; // heap index\n\t\tvar n, m; // iterate over the tree elements\n\t\tvar bits; // bit length\n\t\tvar xbits; // extra bits\n\t\tvar f; // frequency\n\t\tvar overflow = 0; // number of elements with bit length too large\n\n\t\tfor (bits = 0; bits <= MAX_BITS; bits++) {\n\t\t\tbl_count[bits] = 0;\n\t\t}\n\n\t\t// In a first pass, compute the optimal bit lengths (which may\n\t\t// overflow in the case of the bit length tree).\n\t\ttree[heap[heap_max]].dl = 0; // root of the heap\n\n\t\tfor (h = heap_max + 1; h < HEAP_SIZE; h++) {\n\t\t\tn = heap[h];\n\t\t\tbits = tree[tree[n].dl].dl + 1;\n\t\t\tif (bits > max_length) {\n\t\t\t\tbits = max_length;\n\t\t\t\toverflow++;\n\t\t\t}\n\t\t\ttree[n].dl = bits;\n\t\t\t// We overwrite tree[n].dl which is no longer needed\n\n\t\t\tif (n > max_code) {\n\t\t\t\tcontinue; // not a leaf node\n\t\t\t}\n\n\t\t\tbl_count[bits]++;\n\t\t\txbits = 0;\n\t\t\tif (n >= base) {\n\t\t\t\txbits = extra[n - base];\n\t\t\t}\n\t\t\tf = tree[n].fc;\n\t\t\topt_len += f * (bits + xbits);\n\t\t\tif (stree !== null) {\n\t\t\t\tstatic_len += f * (stree[n].dl + xbits);\n\t\t\t}\n\t\t}\n\t\tif (overflow === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\t// This happens for example on obj2 and pic of the Calgary corpus\n\n\t\t// Find the first bit length which could increase:\n\t\tdo {\n\t\t\tbits = max_length - 1;\n\t\t\twhile (bl_count[bits] === 0) {\n\t\t\t\tbits--;\n\t\t\t}\n\t\t\tbl_count[bits]--; // move one leaf down the tree\n\t\t\tbl_count[bits + 1] += 2; // move one overflow item as its brother\n\t\t\tbl_count[max_length]--;\n\t\t\t// The brother of the overflow item also moves one step up,\n\t\t\t// but this does not affect bl_count[max_length]\n\t\t\toverflow -= 2;\n\t\t} while (overflow > 0);\n\n\t\t// Now recompute all bit lengths, scanning in increasing frequency.\n\t\t// h is still equal to HEAP_SIZE. (It is simpler to reconstruct all\n\t\t// lengths instead of fixing only the wrong ones. This idea is taken\n\t\t// from 'ar' written by Haruhiko Okumura.)\n\t\tfor (bits = max_length; bits !== 0; bits--) {\n\t\t\tn = bl_count[bits];\n\t\t\twhile (n !== 0) {\n\t\t\t\tm = heap[--h];\n\t\t\t\tif (m > max_code) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (tree[m].dl !== bits) {\n\t\t\t\t\topt_len += (bits - tree[m].dl) * tree[m].fc;\n\t\t\t\t\ttree[m].fc = bits;\n\t\t\t\t}\n\t\t\t\tn--;\n\t\t\t}\n\t\t}\n\t}\n\n\t  /* ==========================================================================\n\t   * Generate the codes for a given tree and bit counts (which need not be\n\t   * optimal).\n\t   * IN assertion: the array bl_count contains the bit length statistics for\n\t   * the given tree and the field len is set for all tree elements.\n\t   * OUT assertion: the field code is set for all tree elements of non\n\t   *     zero code length.\n\t   * @param tree- the tree to decorate\n\t   * @param max_code- largest code with non-zero frequency\n\t   */\n\tfunction gen_codes(tree, max_code) {\n\t\tvar next_code = []; // new Array(MAX_BITS + 1); // next code value for each bit length\n\t\tvar code = 0; // running code value\n\t\tvar bits; // bit index\n\t\tvar n; // code index\n\n\t\t// The distribution counts are first used to generate the code values\n\t\t// without bit reversal.\n\t\tfor (bits = 1; bits <= MAX_BITS; bits++) {\n\t\t\tcode = ((code + bl_count[bits - 1]) << 1);\n\t\t\tnext_code[bits] = code;\n\t\t}\n\n\t\t// Check that the bit counts in bl_count are consistent. The last code\n\t\t// must be all ones.\n\t\t// Assert (code + encoder->bl_count[MAX_BITS]-1 === (1<<MAX_BITS)-1, \"inconsistent bit counts\");\n\t\t// Tracev((stderr,\"\\ngen_codes: max_code %d \", max_code));\n\n\t\tfor (n = 0; n <= max_code; n++) {\n\t\t\tvar len = tree[n].dl;\n\t\t\tif (len === 0) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// Now reverse the bits\n\t\t\ttree[n].fc = bi_reverse(next_code[len]++, len);\n\n\t\t\t// Tracec(tree !== static_ltree, (stderr,\"\\nn %3d %c l %2d c %4x (%x) \", n, (isgraph(n) ? n : ' '), len, tree[n].fc, next_code[len]-1));\n\t\t}\n\t}\n\n\t/* ==========================================================================\n\t * Construct one Huffman tree and assigns the code bit strings and lengths.\n\t * Update the total bit length for the current block.\n\t * IN assertion: the field freq is set for all tree elements.\n\t * OUT assertions: the fields len and code are set to the optimal bit length\n\t *     and corresponding code. The length opt_len is updated; static_len is\n\t *     also updated if stree is not null. The field max_code is set.\n\t */\n\tfunction build_tree(desc) { // the tree descriptor\n\t\tvar tree = desc.dyn_tree;\n\t\tvar stree = desc.static_tree;\n\t\tvar elems = desc.elems;\n\t\tvar n, m; // iterate over heap elements\n\t\tvar max_code = -1; // largest code with non zero frequency\n\t\tvar node = elems; // next internal node of the tree\n\n\t\t// Construct the initial heap, with least frequent element in\n\t\t// heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].\n\t\t// heap[0] is not used.\n\t\theap_len = 0;\n\t\theap_max = HEAP_SIZE;\n\n\t\tfor (n = 0; n < elems; n++) {\n\t\t\tif (tree[n].fc !== 0) {\n\t\t\t\theap[++heap_len] = max_code = n;\n\t\t\t\tdepth[n] = 0;\n\t\t\t} else {\n\t\t\t\ttree[n].dl = 0;\n\t\t\t}\n\t\t}\n\n\t\t// The pkzip format requires that at least one distance code exists,\n\t\t// and that at least one bit should be sent even if there is only one\n\t\t// possible code. So to avoid special checks later on we force at least\n\t\t// two codes of non zero frequency.\n\t\twhile (heap_len < 2) {\n\t\t\tvar xnew = heap[++heap_len] = (max_code < 2 ? ++max_code : 0);\n\t\t\ttree[xnew].fc = 1;\n\t\t\tdepth[xnew] = 0;\n\t\t\topt_len--;\n\t\t\tif (stree !== null) {\n\t\t\t\tstatic_len -= stree[xnew].dl;\n\t\t\t}\n\t\t\t// new is 0 or 1 so it does not have extra bits\n\t\t}\n\t\tdesc.max_code = max_code;\n\n\t\t// The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,\n\t\t// establish sub-heaps of increasing lengths:\n\t\tfor (n = heap_len >> 1; n >= 1; n--) {\n\t\t\tpqdownheap(tree, n);\n\t\t}\n\n\t\t// Construct the Huffman tree by repeatedly combining the least two\n\t\t// frequent nodes.\n\t\tdo {\n\t\t\tn = heap[SMALLEST];\n\t\t\theap[SMALLEST] = heap[heap_len--];\n\t\t\tpqdownheap(tree, SMALLEST);\n\n\t\t\tm = heap[SMALLEST]; // m = node of next least frequency\n\n\t\t\t// keep the nodes sorted by frequency\n\t\t\theap[--heap_max] = n;\n\t\t\theap[--heap_max] = m;\n\n\t\t\t// Create a new node father of n and m\n\t\t\ttree[node].fc = tree[n].fc + tree[m].fc;\n\t\t\t//\tdepth[node] = (char)(MAX(depth[n], depth[m]) + 1);\n\t\t\tif (depth[n] > depth[m] + 1) {\n\t\t\t\tdepth[node] = depth[n];\n\t\t\t} else {\n\t\t\t\tdepth[node] = depth[m] + 1;\n\t\t\t}\n\t\t\ttree[n].dl = tree[m].dl = node;\n\n\t\t\t// and insert the new node in the heap\n\t\t\theap[SMALLEST] = node++;\n\t\t\tpqdownheap(tree, SMALLEST);\n\n\t\t} while (heap_len >= 2);\n\n\t\theap[--heap_max] = heap[SMALLEST];\n\n\t\t// At this point, the fields freq and dad are set. We can now\n\t\t// generate the bit lengths.\n\t\tgen_bitlen(desc);\n\n\t\t// The field len is now set, we can generate the bit codes\n\t\tgen_codes(tree, max_code);\n\t}\n\n\t/* ==========================================================================\n\t * Scan a literal or distance tree to determine the frequencies of the codes\n\t * in the bit length tree. Updates opt_len to take into account the repeat\n\t * counts. (The contribution of the bit length codes will be added later\n\t * during the construction of bl_tree.)\n\t *\n\t * @param tree- the tree to be scanned\n\t * @param max_code- and its largest code of non zero frequency\n\t */\n\tfunction scan_tree(tree, max_code) {\n\t\tvar n, // iterates over all tree elements\n\t\t\tprevlen = -1, // last emitted length\n\t\t\tcurlen, // length of current code\n\t\t\tnextlen = tree[0].dl, // length of next code\n\t\t\tcount = 0, // repeat count of the current code\n\t\t\tmax_count = 7, // max repeat count\n\t\t\tmin_count = 4; // min repeat count\n\n\t\tif (nextlen === 0) {\n\t\t\tmax_count = 138;\n\t\t\tmin_count = 3;\n\t\t}\n\t\ttree[max_code + 1].dl = 0xffff; // guard\n\n\t\tfor (n = 0; n <= max_code; n++) {\n\t\t\tcurlen = nextlen;\n\t\t\tnextlen = tree[n + 1].dl;\n\t\t\tif (++count < max_count && curlen === nextlen) {\n\t\t\t\tcontinue;\n\t\t\t} else if (count < min_count) {\n\t\t\t\tbl_tree[curlen].fc += count;\n\t\t\t} else if (curlen !== 0) {\n\t\t\t\tif (curlen !== prevlen) {\n\t\t\t\t\tbl_tree[curlen].fc++;\n\t\t\t\t}\n\t\t\t\tbl_tree[REP_3_6].fc++;\n\t\t\t} else if (count <= 10) {\n\t\t\t\tbl_tree[REPZ_3_10].fc++;\n\t\t\t} else {\n\t\t\t\tbl_tree[REPZ_11_138].fc++;\n\t\t\t}\n\t\t\tcount = 0; prevlen = curlen;\n\t\t\tif (nextlen === 0) {\n\t\t\t\tmax_count = 138;\n\t\t\t\tmin_count = 3;\n\t\t\t} else if (curlen === nextlen) {\n\t\t\t\tmax_count = 6;\n\t\t\t\tmin_count = 3;\n\t\t\t} else {\n\t\t\t\tmax_count = 7;\n\t\t\t\tmin_count = 4;\n\t\t\t}\n\t\t}\n\t}\n\n\t/* ==========================================================================\n\t * Send a literal or distance tree in compressed form, using the codes in\n\t * bl_tree.\n\t *\n\t * @param tree- the tree to be scanned\n\t * @param max_code- and its largest code of non zero frequency\n\t */\n\tfunction send_tree(tree, max_code) {\n\t\tvar n; // iterates over all tree elements\n\t\tvar prevlen = -1; // last emitted length\n\t\tvar curlen; // length of current code\n\t\tvar nextlen = tree[0].dl; // length of next code\n\t\tvar count = 0; // repeat count of the current code\n\t\tvar max_count = 7; // max repeat count\n\t\tvar min_count = 4; // min repeat count\n\n\t\t// tree[max_code+1].dl = -1; */  /* guard already set */\n\t\tif (nextlen === 0) {\n\t\t\tmax_count = 138;\n\t\t\tmin_count = 3;\n\t\t}\n\n\t\tfor (n = 0; n <= max_code; n++) {\n\t\t\tcurlen = nextlen;\n\t\t\tnextlen = tree[n + 1].dl;\n\t\t\tif (++count < max_count && curlen === nextlen) {\n\t\t\t\tcontinue;\n\t\t\t} else if (count < min_count) {\n\t\t\t\tdo {\n\t\t\t\t\tSEND_CODE(curlen, bl_tree);\n\t\t\t\t} while (--count !== 0);\n\t\t\t} else if (curlen !== 0) {\n\t\t\t\tif (curlen !== prevlen) {\n\t\t\t\t\tSEND_CODE(curlen, bl_tree);\n\t\t\t\t\tcount--;\n\t\t\t\t}\n\t\t\t// Assert(count >= 3 && count <= 6, \" 3_6?\");\n\t\t\t\tSEND_CODE(REP_3_6, bl_tree);\n\t\t\t\tsend_bits(count - 3, 2);\n\t\t\t} else if (count <= 10) {\n\t\t\t\tSEND_CODE(REPZ_3_10, bl_tree);\n\t\t\t\tsend_bits(count - 3, 3);\n\t\t\t} else {\n\t\t\t\tSEND_CODE(REPZ_11_138, bl_tree);\n\t\t\t\tsend_bits(count - 11, 7);\n\t\t\t}\n\t\t\tcount = 0;\n\t\t\tprevlen = curlen;\n\t\t\tif (nextlen === 0) {\n\t\t\t\tmax_count = 138;\n\t\t\t\tmin_count = 3;\n\t\t\t} else if (curlen === nextlen) {\n\t\t\t\tmax_count = 6;\n\t\t\t\tmin_count = 3;\n\t\t\t} else {\n\t\t\t\tmax_count = 7;\n\t\t\t\tmin_count = 4;\n\t\t\t}\n\t\t}\n\t}\n\n\t/* ==========================================================================\n\t * Construct the Huffman tree for the bit lengths and return the index in\n\t * bl_order of the last bit length code to send.\n\t */\n\tfunction build_bl_tree() {\n\t\tvar max_blindex; // index of last bit length code of non zero freq\n\n\t\t// Determine the bit length frequencies for literal and distance trees\n\t\tscan_tree(dyn_ltree, l_desc.max_code);\n\t\tscan_tree(dyn_dtree, d_desc.max_code);\n\n\t\t// Build the bit length tree:\n\t\tbuild_tree(bl_desc);\n\t\t// opt_len now includes the length of the tree representations, except\n\t\t// the lengths of the bit lengths codes and the 5+5+4 bits for the counts.\n\n\t\t// Determine the number of bit length codes to send. The pkzip format\n\t\t// requires that at least 4 bit length codes be sent. (appnote.txt says\n\t\t// 3 but the actual value used is 4.)\n\t\tfor (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {\n\t\t\tif (bl_tree[bl_order[max_blindex]].dl !== 0) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Update opt_len to include the bit length tree and counts */\n\t\topt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;\n\t\t// Tracev((stderr, \"\\ndyn trees: dyn %ld, stat %ld\",\n\t\t// encoder->opt_len, encoder->static_len));\n\n\t\treturn max_blindex;\n\t}\n\n\t/* ==========================================================================\n\t * Send the header for a block using dynamic Huffman trees: the counts, the\n\t * lengths of the bit length codes, the literal tree and the distance tree.\n\t * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.\n\t */\n\tfunction send_all_trees(lcodes, dcodes, blcodes) { // number of codes for each tree\n\t\tvar rank; // index in bl_order\n\n\t\t// Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, \"not enough codes\");\n\t\t// Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES, \"too many codes\");\n\t\t// Tracev((stderr, \"\\nbl counts: \"));\n\t\tsend_bits(lcodes - 257, 5); // not +255 as stated in appnote.txt\n\t\tsend_bits(dcodes - 1,   5);\n\t\tsend_bits(blcodes - 4,  4); // not -3 as stated in appnote.txt\n\t\tfor (rank = 0; rank < blcodes; rank++) {\n\t\t\t// Tracev((stderr, \"\\nbl code %2d \", bl_order[rank]));\n\t\t\tsend_bits(bl_tree[bl_order[rank]].dl, 3);\n\t\t}\n\n\t\t// send the literal tree\n\t\tsend_tree(dyn_ltree, lcodes - 1);\n\n\t\t// send the distance tree\n\t\tsend_tree(dyn_dtree, dcodes - 1);\n\t}\n\n\t/* ==========================================================================\n\t * Determine the best encoding for the current block: dynamic trees, static\n\t * trees or store, and output the encoded block to the zip file.\n\t */\n\tfunction flush_block(eof) { // true if this is the last block for a file\n\t\tvar opt_lenb, static_lenb, // opt_len and static_len in bytes\n\t\t\tmax_blindex, // index of last bit length code of non zero freq\n\t\t\tstored_len, // length of input block\n\t\t\ti;\n\n\t\tstored_len = strstart - block_start;\n\t\tflag_buf[last_flags] = flags; // Save the flags for the last 8 items\n\n\t\t// Construct the literal and distance trees\n\t\tbuild_tree(l_desc);\n\t\t// Tracev((stderr, \"\\nlit data: dyn %ld, stat %ld\",\n\t\t// encoder->opt_len, encoder->static_len));\n\n\t\tbuild_tree(d_desc);\n\t\t// Tracev((stderr, \"\\ndist data: dyn %ld, stat %ld\",\n\t\t// encoder->opt_len, encoder->static_len));\n\t\t// At this point, opt_len and static_len are the total bit lengths of\n\t\t// the compressed block data, excluding the tree representations.\n\n\t\t// Build the bit length tree for the above two trees, and get the index\n\t\t// in bl_order of the last bit length code to send.\n\t\tmax_blindex = build_bl_tree();\n\n\t // Determine the best encoding. Compute first the block length in bytes\n\t\topt_lenb = (opt_len + 3 + 7) >> 3;\n\t\tstatic_lenb = (static_len + 3 + 7) >> 3;\n\n\t//  Trace((stderr, \"\\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u dist %u \", opt_lenb, encoder->opt_len, static_lenb, encoder->static_len, stored_len, encoder->last_lit, encoder->last_dist));\n\n\t\tif (static_lenb <= opt_lenb) {\n\t\t\topt_lenb = static_lenb;\n\t\t}\n\t\tif (stored_len + 4 <= opt_lenb && block_start >= 0) { // 4: two words for the lengths\n\t\t\t// The test buf !== NULL is only necessary if LIT_BUFSIZE > WSIZE.\n\t\t\t// Otherwise we can't have processed more than WSIZE input bytes since\n\t\t\t// the last block flush, because compression would have been\n\t\t\t// successful. If LIT_BUFSIZE <= WSIZE, it is never too late to\n\t\t\t// transform a block into a stored block.\n\t\t\tsend_bits((STORED_BLOCK << 1) + eof, 3);  /* send block type */\n\t\t\tbi_windup();         /* align on byte boundary */\n\t\t\tput_short(stored_len);\n\t\t\tput_short(~stored_len);\n\n\t\t\t// copy block\n\t\t\t/*\n\t\t\t\tp = &window[block_start];\n\t\t\t\tfor (i = 0; i < stored_len; i++) {\n\t\t\t\t\tput_byte(p[i]);\n\t\t\t\t}\n\t\t\t*/\n\t\t\tfor (i = 0; i < stored_len; i++) {\n\t\t\t\tput_byte(window[block_start + i]);\n\t\t\t}\n\t\t} else if (static_lenb === opt_lenb) {\n\t\t\tsend_bits((STATIC_TREES << 1) + eof, 3);\n\t\t\tcompress_block(static_ltree, static_dtree);\n\t\t} else {\n\t\t\tsend_bits((DYN_TREES << 1) + eof, 3);\n\t\t\tsend_all_trees(l_desc.max_code + 1, d_desc.max_code + 1, max_blindex + 1);\n\t\t\tcompress_block(dyn_ltree, dyn_dtree);\n\t\t}\n\n\t\tinit_block();\n\n\t\tif (eof !== 0) {\n\t\t\tbi_windup();\n\t\t}\n\t}\n\n\t/* ==========================================================================\n\t * Save the match info and tally the frequency counts. Return true if\n\t * the current block must be flushed.\n\t *\n\t * @param dist- distance of matched string\n\t * @param lc- (match length - MIN_MATCH) or unmatched char (if dist === 0)\n\t */\n\tfunction ct_tally(dist, lc) {\n\t\tl_buf[last_lit++] = lc;\n\t\tif (dist === 0) {\n\t\t\t// lc is the unmatched char\n\t\t\tdyn_ltree[lc].fc++;\n\t\t} else {\n\t\t\t// Here, lc is the match length - MIN_MATCH\n\t\t\tdist--; // dist = match distance - 1\n\t\t\t// Assert((ush)dist < (ush)MAX_DIST && (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) && (ush)D_CODE(dist) < (ush)D_CODES,  \"ct_tally: bad match\");\n\n\t\t\tdyn_ltree[length_code[lc] + LITERALS + 1].fc++;\n\t\t\tdyn_dtree[D_CODE(dist)].fc++;\n\n\t\t\td_buf[last_dist++] = dist;\n\t\t\tflags |= flag_bit;\n\t\t}\n\t\tflag_bit <<= 1;\n\n\t\t// Output the flags if they fill a byte\n\t\tif ((last_lit & 7) === 0) {\n\t\t\tflag_buf[last_flags++] = flags;\n\t\t\tflags = 0;\n\t\t\tflag_bit = 1;\n\t\t}\n\t\t// Try to guess if it is profitable to stop the current block here\n\t\tif (compr_level > 2 && (last_lit & 0xfff) === 0) {\n\t\t\t// Compute an upper bound for the compressed length\n\t\t\tvar out_length = last_lit * 8;\n\t\t\tvar in_length = strstart - block_start;\n\t\t\tvar dcode;\n\n\t\t\tfor (dcode = 0; dcode < D_CODES; dcode++) {\n\t\t\t\tout_length += dyn_dtree[dcode].fc * (5 + extra_dbits[dcode]);\n\t\t\t}\n\t\t\tout_length >>= 3;\n\t\t\t// Trace((stderr,\"\\nlast_lit %u, last_dist %u, in %ld, out ~%ld(%ld%%) \", encoder->last_lit, encoder->last_dist, in_length, out_length, 100L - out_length*100L/in_length));\n\t\t\tif (last_dist < parseInt(last_lit / 2, 10) && out_length < parseInt(in_length / 2, 10)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn (last_lit === LIT_BUFSIZE - 1 || last_dist === DIST_BUFSIZE);\n\t\t// We avoid equality with LIT_BUFSIZE because of wraparound at 64K\n\t\t// on 16 bit machines and because stored blocks are restricted to\n\t\t// 64K-1 bytes.\n\t}\n\n\t  /* ==========================================================================\n\t   * Send the block data compressed using the given Huffman trees\n\t   *\n\t   * @param ltree- literal tree\n\t   * @param dtree- distance tree\n\t   */\n\tfunction compress_block(ltree, dtree) {\n\t\tvar dist; // distance of matched string\n\t\tvar lc; // match length or unmatched char (if dist === 0)\n\t\tvar lx = 0; // running index in l_buf\n\t\tvar dx = 0; // running index in d_buf\n\t\tvar fx = 0; // running index in flag_buf\n\t\tvar flag = 0; // current flags\n\t\tvar code; // the code to send\n\t\tvar extra; // number of extra bits to send\n\n\t\tif (last_lit !== 0) {\n\t\t\tdo {\n\t\t\t\tif ((lx & 7) === 0) {\n\t\t\t\t\tflag = flag_buf[fx++];\n\t\t\t\t}\n\t\t\t\tlc = l_buf[lx++] & 0xff;\n\t\t\t\tif ((flag & 1) === 0) {\n\t\t\t\t\tSEND_CODE(lc, ltree); /* send a literal byte */\n\t\t\t\t\t//\tTracecv(isgraph(lc), (stderr,\" '%c' \", lc));\n\t\t\t\t} else {\n\t\t\t\t\t// Here, lc is the match length - MIN_MATCH\n\t\t\t\t\tcode = length_code[lc];\n\t\t\t\t\tSEND_CODE(code + LITERALS + 1, ltree); // send the length code\n\t\t\t\t\textra = extra_lbits[code];\n\t\t\t\t\tif (extra !== 0) {\n\t\t\t\t\t\tlc -= base_length[code];\n\t\t\t\t\t\tsend_bits(lc, extra); // send the extra length bits\n\t\t\t\t\t}\n\t\t\t\t\tdist = d_buf[dx++];\n\t\t\t\t\t// Here, dist is the match distance - 1\n\t\t\t\t\tcode = D_CODE(dist);\n\t\t\t\t\t//\tAssert (code < D_CODES, \"bad d_code\");\n\n\t\t\t\t\tSEND_CODE(code, dtree); // send the distance code\n\t\t\t\t\textra = extra_dbits[code];\n\t\t\t\t\tif (extra !== 0) {\n\t\t\t\t\t\tdist -= base_dist[code];\n\t\t\t\t\t\tsend_bits(dist, extra); // send the extra distance bits\n\t\t\t\t\t}\n\t\t\t\t} // literal or match pair ?\n\t\t\t\tflag >>= 1;\n\t\t\t} while (lx < last_lit);\n\t\t}\n\n\t\tSEND_CODE(END_BLOCK, ltree);\n\t}\n\n\t/* ==========================================================================\n\t * Send a value on a given number of bits.\n\t * IN assertion: length <= 16 and value fits in length bits.\n\t *\n\t * @param value- value to send\n\t * @param length- number of bits\n\t */\n\tvar Buf_size = 16; // bit size of bi_buf\n\tfunction send_bits(value, length) {\n\t\t// If not enough room in bi_buf, use (valid) bits from bi_buf and\n\t\t// (16 - bi_valid) bits from value, leaving (width - (16-bi_valid))\n\t\t// unused bits in value.\n\t\tif (bi_valid > Buf_size - length) {\n\t\t\tbi_buf |= (value << bi_valid);\n\t\t\tput_short(bi_buf);\n\t\t\tbi_buf = (value >> (Buf_size - bi_valid));\n\t\t\tbi_valid += length - Buf_size;\n\t\t} else {\n\t\t\tbi_buf |= value << bi_valid;\n\t\t\tbi_valid += length;\n\t\t}\n\t}\n\n\t/* ==========================================================================\n\t * Reverse the first len bits of a code, using straightforward code (a faster\n\t * method would use a table)\n\t * IN assertion: 1 <= len <= 15\n\t *\n\t * @param code- the value to invert\n\t * @param len- its bit length\n\t */\n\tfunction bi_reverse(code, len) {\n\t\tvar res = 0;\n\t\tdo {\n\t\t\tres |= code & 1;\n\t\t\tcode >>= 1;\n\t\t\tres <<= 1;\n\t\t} while (--len > 0);\n\t\treturn res >> 1;\n\t}\n\n\t/* ==========================================================================\n\t * Write out any remaining bits in an incomplete byte.\n\t */\n\tfunction bi_windup() {\n\t\tif (bi_valid > 8) {\n\t\t\tput_short(bi_buf);\n\t\t} else if (bi_valid > 0) {\n\t\t\tput_byte(bi_buf);\n\t\t}\n\t\tbi_buf = 0;\n\t\tbi_valid = 0;\n\t}\n\n\tfunction qoutbuf() {\n\t\tvar q, i;\n\t\tif (outcnt !== 0) {\n\t\t\tq = new_queue();\n\t\t\tif (qhead === null) {\n\t\t\t\tqhead = qtail = q;\n\t\t\t} else {\n\t\t\t\tqtail = qtail.next = q;\n\t\t\t}\n\t\t\tq.len = outcnt - outoff;\n\t\t\t// System.arraycopy(outbuf, outoff, q.ptr, 0, q.len);\n\t\t\tfor (i = 0; i < q.len; i++) {\n\t\t\t\tq.ptr[i] = outbuf[outoff + i];\n\t\t\t}\n\t\t\toutcnt = outoff = 0;\n\t\t}\n\t}\n\n\tfunction deflate(arr, level) {\n\t\tvar i, j, buff;\n\n\t\tdeflate_data = arr;\n\t\tdeflate_pos = 0;\n\t\tif (typeof level === \"undefined\") {\n\t\t\tlevel = DEFAULT_LEVEL;\n\t\t}\n\t\tdeflate_start(level);\n\n\t\tbuff = [];\n\n\t\tdo {\n\t\t\ti = deflate_internal(buff, buff.length, 1024);\n\t\t} while (i > 0);\n\n\t\tdeflate_data = null; // G.C.\n\t\treturn buff;\n\t}\n\n\tmodule.exports = deflate;\n\tmodule.exports.DEFAULT_LEVEL = DEFAULT_LEVEL;\n}());\n\n},{}],42:[function(require,module,exports){\n/*\n * $Id: rawinflate.js,v 0.2 2009/03/01 18:32:24 dankogai Exp $\n *\n * original:\n * http://www.onicos.com/staff/iz/amuse/javascript/expert/inflate.txt\n */\n\n/* Copyright (C) 1999 Masanao Izumo <iz@onicos.co.jp>\n * Version: 1.0.0.1\n * LastModified: Dec 25 1999\n */\n\n/* Interface:\n * data = inflate(src);\n */\n\n(function () {\n\t/* constant parameters */\n\tvar WSIZE = 32768, // Sliding Window size\n\t\tSTORED_BLOCK = 0,\n\t\tSTATIC_TREES = 1,\n\t\tDYN_TREES = 2,\n\n\t/* for inflate */\n\t\tlbits = 9, // bits in base literal/length lookup table\n\t\tdbits = 6, // bits in base distance lookup table\n\n\t/* variables (inflate) */\n\t\tslide,\n\t\twp, // current position in slide\n\t\tfixed_tl = null, // inflate static\n\t\tfixed_td, // inflate static\n\t\tfixed_bl, // inflate static\n\t\tfixed_bd, // inflate static\n\t\tbit_buf, // bit buffer\n\t\tbit_len, // bits in bit buffer\n\t\tmethod,\n\t\teof,\n\t\tcopy_leng,\n\t\tcopy_dist,\n\t\ttl, // literal length decoder table\n\t\ttd, // literal distance decoder table\n\t\tbl, // number of bits decoded by tl\n\t\tbd, // number of bits decoded by td\n\n\t\tinflate_data,\n\t\tinflate_pos,\n\n\n/* constant tables (inflate) */\n\t\tMASK_BITS = [\n\t\t\t0x0000,\n\t\t\t0x0001, 0x0003, 0x0007, 0x000f, 0x001f, 0x003f, 0x007f, 0x00ff,\n\t\t\t0x01ff, 0x03ff, 0x07ff, 0x0fff, 0x1fff, 0x3fff, 0x7fff, 0xffff\n\t\t],\n\t\t// Tables for deflate from PKZIP's appnote.txt.\n\t\t// Copy lengths for literal codes 257..285\n\t\tcplens = [\n\t\t\t3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,\n\t\t\t35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0\n\t\t],\n/* note: see note #13 above about the 258 in this list. */\n\t\t// Extra bits for literal codes 257..285\n\t\tcplext = [\n\t\t\t0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2,\n\t\t\t3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 99, 99 // 99==invalid\n\t\t],\n\t\t// Copy offsets for distance codes 0..29\n\t\tcpdist = [\n\t\t\t1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,\n\t\t\t257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,\n\t\t\t8193, 12289, 16385, 24577\n\t\t],\n\t\t// Extra bits for distance codes\n\t\tcpdext = [\n\t\t\t0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6,\n\t\t\t7, 7, 8, 8, 9, 9, 10, 10, 11, 11,\n\t\t\t12, 12, 13, 13\n\t\t],\n\t\t// Order of the bit length code lengths\n\t\tborder = [\n\t\t\t16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15\n\t\t];\n\t/* objects (inflate) */\n\n\tfunction HuftList() {\n\t\tthis.next = null;\n\t\tthis.list = null;\n\t}\n\n\tfunction HuftNode() {\n\t\tthis.e = 0; // number of extra bits or operation\n\t\tthis.b = 0; // number of bits in this code or subcode\n\n\t\t// union\n\t\tthis.n = 0; // literal, length base, or distance base\n\t\tthis.t = null; // (HuftNode) pointer to next level of table\n\t}\n\n\t/*\n\t * @param b-  code lengths in bits (all assumed <= BMAX)\n\t * @param n- number of codes (assumed <= N_MAX)\n\t * @param s- number of simple-valued codes (0..s-1)\n\t * @param d- list of base values for non-simple codes\n\t * @param e- list of extra bits for non-simple codes\n\t * @param mm- maximum lookup bits\n\t */\n\tfunction HuftBuild(b, n, s, d, e, mm) {\n\t\tthis.BMAX = 16; // maximum bit length of any code\n\t\tthis.N_MAX = 288; // maximum number of codes in any set\n\t\tthis.status = 0; // 0: success, 1: incomplete table, 2: bad input\n\t\tthis.root = null; // (HuftList) starting table\n\t\tthis.m = 0; // maximum lookup bits, returns actual\n\n\t/* Given a list of code lengths and a maximum table size, make a set of\n\t   tables to decode that set of codes. Return zero on success, one if\n\t   the given code set is incomplete (the tables are still built in this\n\t   case), two if the input is invalid (all zero length codes or an\n\t   oversubscribed set of lengths), and three if not enough memory.\n\t   The code with value 256 is special, and the tables are constructed\n\t   so that no bits beyond that code are fetched when that code is\n\t   decoded. */\n\t\tvar a; // counter for codes of length k\n\t\tvar c = [];\n\t\tvar el; // length of EOB code (value 256)\n\t\tvar f; // i repeats in table every f entries\n\t\tvar g; // maximum code length\n\t\tvar h; // table level\n\t\tvar i; // counter, current code\n\t\tvar j; // counter\n\t\tvar k; // number of bits in current code\n\t\tvar lx = [];\n\t\tvar p; // pointer into c[], b[], or v[]\n\t\tvar pidx; // index of p\n\t\tvar q; // (HuftNode) points to current table\n\t\tvar r = new HuftNode(); // table entry for structure assignment\n\t\tvar u = [];\n\t\tvar v = [];\n\t\tvar w;\n\t\tvar x = [];\n\t\tvar xp; // pointer into x or c\n\t\tvar y; // number of dummy codes added\n\t\tvar z; // number of entries in current table\n\t\tvar o;\n\t\tvar tail; // (HuftList)\n\n\t\ttail = this.root = null;\n\n\t\t// bit length count table\n\t\tfor (i = 0; i < this.BMAX + 1; i++) {\n\t\t\tc[i] = 0;\n\t\t}\n\t\t// stack of bits per table\n\t\tfor (i = 0; i < this.BMAX + 1; i++) {\n\t\t\tlx[i] = 0;\n\t\t}\n\t\t// HuftNode[BMAX][]  table stack\n\t\tfor (i = 0; i < this.BMAX; i++) {\n\t\t\tu[i] = null;\n\t\t}\n\t\t// values in order of bit length\n\t\tfor (i = 0; i < this.N_MAX; i++) {\n\t\t\tv[i] = 0;\n\t\t}\n\t\t// bit offsets, then code stack\n\t\tfor (i = 0; i < this.BMAX + 1; i++) {\n\t\t\tx[i] = 0;\n\t\t}\n\n\t\t// Generate counts for each bit length\n\t\tel = n > 256 ? b[256] : this.BMAX; // set length of EOB code, if any\n\t\tp = b; pidx = 0;\n\t\ti = n;\n\t\tdo {\n\t\t\tc[p[pidx]]++; // assume all entries <= BMAX\n\t\t\tpidx++;\n\t\t} while (--i > 0);\n\t\tif (c[0] === n) { // null input--all zero length codes\n\t\t\tthis.root = null;\n\t\t\tthis.m = 0;\n\t\t\tthis.status = 0;\n\t\t\treturn;\n\t\t}\n\n\t\t// Find minimum and maximum length, bound *m by those\n\t\tfor (j = 1; j <= this.BMAX; j++) {\n\t\t\tif (c[j] !== 0) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tk = j; // minimum code length\n\t\tif (mm < j) {\n\t\t\tmm = j;\n\t\t}\n\t\tfor (i = this.BMAX; i !== 0; i--) {\n\t\t\tif (c[i] !== 0) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tg = i; // maximum code length\n\t\tif (mm > i) {\n\t\t\tmm = i;\n\t\t}\n\n\t\t// Adjust last length count to fill out codes, if needed\n\t\tfor (y = 1 << j; j < i; j++, y <<= 1) {\n\t\t\tif ((y -= c[j]) < 0) {\n\t\t\t\tthis.status = 2; // bad input: more codes than bits\n\t\t\t\tthis.m = mm;\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif ((y -= c[i]) < 0) {\n\t\t\tthis.status = 2;\n\t\t\tthis.m = mm;\n\t\t\treturn;\n\t\t}\n\t\tc[i] += y;\n\n\t\t// Generate starting offsets into the value table for each length\n\t\tx[1] = j = 0;\n\t\tp = c;\n\t\tpidx = 1;\n\t\txp = 2;\n\t\twhile (--i > 0) { // note that i == g from above\n\t\t\tx[xp++] = (j += p[pidx++]);\n\t\t}\n\n\t\t// Make a table of values in order of bit lengths\n\t\tp = b; pidx = 0;\n\t\ti = 0;\n\t\tdo {\n\t\t\tif ((j = p[pidx++]) !== 0) {\n\t\t\t\tv[x[j]++] = i;\n\t\t\t}\n\t\t} while (++i < n);\n\t\tn = x[g]; // set n to length of v\n\n\t\t// Generate the Huffman codes and for each, make the table entries\n\t\tx[0] = i = 0; // first Huffman code is zero\n\t\tp = v; pidx = 0; // grab values in bit order\n\t\th = -1; // no tables yet--level -1\n\t\tw = lx[0] = 0; // no bits decoded yet\n\t\tq = null; // ditto\n\t\tz = 0; // ditto\n\n\t\t// go through the bit lengths (k already is bits in shortest code)\n\t\tfor (null; k <= g; k++) {\n\t\t\ta = c[k];\n\t\t\twhile (a-- > 0) {\n\t\t\t\t// here i is the Huffman code of length k bits for value p[pidx]\n\t\t\t\t// make tables up to required level\n\t\t\t\twhile (k > w + lx[1 + h]) {\n\t\t\t\t\tw += lx[1 + h]; // add bits already decoded\n\t\t\t\t\th++;\n\n\t\t\t\t\t// compute minimum size table less than or equal to *m bits\n\t\t\t\t\tz = (z = g - w) > mm ? mm : z; // upper limit\n\t\t\t\t\tif ((f = 1 << (j = k - w)) > a + 1) { // try a k-w bit table\n\t\t\t\t\t\t// too few codes for k-w bit table\n\t\t\t\t\t\tf -= a + 1; // deduct codes from patterns left\n\t\t\t\t\t\txp = k;\n\t\t\t\t\t\twhile (++j < z) { // try smaller tables up to z bits\n\t\t\t\t\t\t\tif ((f <<= 1) <= c[++xp]) {\n\t\t\t\t\t\t\t\tbreak; // enough codes to use up j bits\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tf -= c[xp]; // else deduct codes from patterns\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (w + j > el && w < el) {\n\t\t\t\t\t\tj = el - w; // make EOB code end at table\n\t\t\t\t\t}\n\t\t\t\t\tz = 1 << j; // table entries for j-bit table\n\t\t\t\t\tlx[1 + h] = j; // set table size in stack\n\n\t\t\t\t\t// allocate and link in new table\n\t\t\t\t\tq = [];\n\t\t\t\t\tfor (o = 0; o < z; o++) {\n\t\t\t\t\t\tq[o] = new HuftNode();\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!tail) {\n\t\t\t\t\t\ttail = this.root = new HuftList();\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttail = tail.next = new HuftList();\n\t\t\t\t\t}\n\t\t\t\t\ttail.next = null;\n\t\t\t\t\ttail.list = q;\n\t\t\t\t\tu[h] = q; // table starts after link\n\n\t\t\t\t\t/* connect to last table, if there is one */\n\t\t\t\t\tif (h > 0) {\n\t\t\t\t\t\tx[h] = i; // save pattern for backing up\n\t\t\t\t\t\tr.b = lx[h]; // bits to dump before this table\n\t\t\t\t\t\tr.e = 16 + j; // bits in this table\n\t\t\t\t\t\tr.t = q; // pointer to this table\n\t\t\t\t\t\tj = (i & ((1 << w) - 1)) >> (w - lx[h]);\n\t\t\t\t\t\tu[h - 1][j].e = r.e;\n\t\t\t\t\t\tu[h - 1][j].b = r.b;\n\t\t\t\t\t\tu[h - 1][j].n = r.n;\n\t\t\t\t\t\tu[h - 1][j].t = r.t;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// set up table entry in r\n\t\t\t\tr.b = k - w;\n\t\t\t\tif (pidx >= n) {\n\t\t\t\t\tr.e = 99; // out of values--invalid code\n\t\t\t\t} else if (p[pidx] < s) {\n\t\t\t\t\tr.e = (p[pidx] < 256 ? 16 : 15); // 256 is end-of-block code\n\t\t\t\t\tr.n = p[pidx++]; // simple code is just the value\n\t\t\t\t} else {\n\t\t\t\t\tr.e = e[p[pidx] - s]; // non-simple--look up in lists\n\t\t\t\t\tr.n = d[p[pidx++] - s];\n\t\t\t\t}\n\n\t\t\t\t// fill code-like entries with r //\n\t\t\t\tf = 1 << (k - w);\n\t\t\t\tfor (j = i >> w; j < z; j += f) {\n\t\t\t\t\tq[j].e = r.e;\n\t\t\t\t\tq[j].b = r.b;\n\t\t\t\t\tq[j].n = r.n;\n\t\t\t\t\tq[j].t = r.t;\n\t\t\t\t}\n\n\t\t\t\t// backwards increment the k-bit code i\n\t\t\t\tfor (j = 1 << (k - 1); (i & j) !== 0; j >>= 1) {\n\t\t\t\t\ti ^= j;\n\t\t\t\t}\n\t\t\t\ti ^= j;\n\n\t\t\t\t// backup over finished tables\n\t\t\t\twhile ((i & ((1 << w) - 1)) !== x[h]) {\n\t\t\t\t\tw -= lx[h]; // don't need to update q\n\t\t\t\t\th--;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/* return actual size of base table */\n\t\tthis.m = lx[1];\n\n\t\t/* Return true (1) if we were given an incomplete table */\n\t\tthis.status = ((y !== 0 && g !== 1) ? 1 : 0);\n\t}\n\n\n\t/* routines (inflate) */\n\n\tfunction GET_BYTE() {\n\t\tif (inflate_data.length === inflate_pos) {\n\t\t\treturn -1;\n\t\t}\n\t\treturn inflate_data[inflate_pos++] & 0xff;\n\t}\n\n\tfunction NEEDBITS(n) {\n\t\twhile (bit_len < n) {\n\t\t\tbit_buf |= GET_BYTE() << bit_len;\n\t\t\tbit_len += 8;\n\t\t}\n\t}\n\n\tfunction GETBITS(n) {\n\t\treturn bit_buf & MASK_BITS[n];\n\t}\n\n\tfunction DUMPBITS(n) {\n\t\tbit_buf >>= n;\n\t\tbit_len -= n;\n\t}\n\n\tfunction inflate_codes(buff, off, size) {\n\t\t// inflate (decompress) the codes in a deflated (compressed) block.\n\t\t// Return an error code or zero if it all goes ok.\n\t\tvar e; // table entry flag/number of extra bits\n\t\tvar t; // (HuftNode) pointer to table entry\n\t\tvar n;\n\n\t\tif (size === 0) {\n\t\t\treturn 0;\n\t\t}\n\n\t\t// inflate the coded data\n\t\tn = 0;\n\t\tfor (;;) { // do until end of block\n\t\t\tNEEDBITS(bl);\n\t\t\tt = tl.list[GETBITS(bl)];\n\t\t\te = t.e;\n\t\t\twhile (e > 16) {\n\t\t\t\tif (e === 99) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\tDUMPBITS(t.b);\n\t\t\t\te -= 16;\n\t\t\t\tNEEDBITS(e);\n\t\t\t\tt = t.t[GETBITS(e)];\n\t\t\t\te = t.e;\n\t\t\t}\n\t\t\tDUMPBITS(t.b);\n\n\t\t\tif (e === 16) { // then it's a literal\n\t\t\t\twp &= WSIZE - 1;\n\t\t\t\tbuff[off + n++] = slide[wp++] = t.n;\n\t\t\t\tif (n === size) {\n\t\t\t\t\treturn size;\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// exit if end of block\n\t\t\tif (e === 15) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// it's an EOB or a length\n\n\t\t\t// get length of block to copy\n\t\t\tNEEDBITS(e);\n\t\t\tcopy_leng = t.n + GETBITS(e);\n\t\t\tDUMPBITS(e);\n\n\t\t\t// decode distance of block to copy\n\t\t\tNEEDBITS(bd);\n\t\t\tt = td.list[GETBITS(bd)];\n\t\t\te = t.e;\n\n\t\t\twhile (e > 16) {\n\t\t\t\tif (e === 99) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\tDUMPBITS(t.b);\n\t\t\t\te -= 16;\n\t\t\t\tNEEDBITS(e);\n\t\t\t\tt = t.t[GETBITS(e)];\n\t\t\t\te = t.e;\n\t\t\t}\n\t\t\tDUMPBITS(t.b);\n\t\t\tNEEDBITS(e);\n\t\t\tcopy_dist = wp - t.n - GETBITS(e);\n\t\t\tDUMPBITS(e);\n\n\t\t\t// do the copy\n\t\t\twhile (copy_leng > 0 && n < size) {\n\t\t\t\tcopy_leng--;\n\t\t\t\tcopy_dist &= WSIZE - 1;\n\t\t\t\twp &= WSIZE - 1;\n\t\t\t\tbuff[off + n++] = slide[wp++] = slide[copy_dist++];\n\t\t\t}\n\n\t\t\tif (n === size) {\n\t\t\t\treturn size;\n\t\t\t}\n\t\t}\n\n\t\tmethod = -1; // done\n\t\treturn n;\n\t}\n\n\tfunction inflate_stored(buff, off, size) {\n\t\t/* \"decompress\" an inflated type 0 (stored) block. */\n\t\tvar n;\n\n\t\t// go to byte boundary\n\t\tn = bit_len & 7;\n\t\tDUMPBITS(n);\n\n\t\t// get the length and its complement\n\t\tNEEDBITS(16);\n\t\tn = GETBITS(16);\n\t\tDUMPBITS(16);\n\t\tNEEDBITS(16);\n\t\tif (n !== ((~bit_buf) & 0xffff)) {\n\t\t\treturn -1; // error in compressed data\n\t\t}\n\t\tDUMPBITS(16);\n\n\t\t// read and output the compressed data\n\t\tcopy_leng = n;\n\n\t\tn = 0;\n\t\twhile (copy_leng > 0 && n < size) {\n\t\t\tcopy_leng--;\n\t\t\twp &= WSIZE - 1;\n\t\t\tNEEDBITS(8);\n\t\t\tbuff[off + n++] = slide[wp++] = GETBITS(8);\n\t\t\tDUMPBITS(8);\n\t\t}\n\n\t\tif (copy_leng === 0) {\n\t\t\tmethod = -1; // done\n\t\t}\n\t\treturn n;\n\t}\n\n\tfunction inflate_fixed(buff, off, size) {\n\t\t// decompress an inflated type 1 (fixed Huffman codes) block.  We should\n\t\t// either replace this with a custom decoder, or at least precompute the\n\t\t// Huffman tables.\n\n\t\t// if first time, set up tables for fixed blocks\n\t\tif (!fixed_tl) {\n\t\t\tvar i; // temporary variable\n\t\t\tvar l = []; // 288 length list for huft_build (initialized below)\n\t\t\tvar h; // HuftBuild\n\n\t\t\t// literal table\n\t\t\tfor (i = 0; i < 144; i++) {\n\t\t\t\tl[i] = 8;\n\t\t\t}\n\t\t\tfor (null; i < 256; i++) {\n\t\t\t\tl[i] = 9;\n\t\t\t}\n\t\t\tfor (null; i < 280; i++) {\n\t\t\t\tl[i] = 7;\n\t\t\t}\n\t\t\tfor (null; i < 288; i++) { // make a complete, but wrong code set\n\t\t\t\tl[i] = 8;\n\t\t\t}\n\t\t\tfixed_bl = 7;\n\n\t\t\th = new HuftBuild(l, 288, 257, cplens, cplext, fixed_bl);\n\t\t\tif (h.status !== 0) {\n\t\t\t\tconsole.error(\"HufBuild error: \" + h.status);\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tfixed_tl = h.root;\n\t\t\tfixed_bl = h.m;\n\n\t\t\t// distance table\n\t\t\tfor (i = 0; i < 30; i++) { // make an incomplete code set\n\t\t\t\tl[i] = 5;\n\t\t\t}\n\t\t\tfixed_bd = 5;\n\n\t\t\th = new HuftBuild(l, 30, 0, cpdist, cpdext, fixed_bd);\n\t\t\tif (h.status > 1) {\n\t\t\t\tfixed_tl = null;\n\t\t\t\tconsole.error(\"HufBuild error: \" + h.status);\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tfixed_td = h.root;\n\t\t\tfixed_bd = h.m;\n\t\t}\n\n\t\ttl = fixed_tl;\n\t\ttd = fixed_td;\n\t\tbl = fixed_bl;\n\t\tbd = fixed_bd;\n\t\treturn inflate_codes(buff, off, size);\n\t}\n\n\tfunction inflate_dynamic(buff, off, size) {\n\t\t// decompress an inflated type 2 (dynamic Huffman codes) block.\n\t\tvar i; // temporary variables\n\t\tvar j;\n\t\tvar l; // last length\n\t\tvar n; // number of lengths to get\n\t\tvar t; // (HuftNode) literal/length code table\n\t\tvar nb; // number of bit length codes\n\t\tvar nl; // number of literal/length codes\n\t\tvar nd; // number of distance codes\n\t\tvar ll = [];\n\t\tvar h; // (HuftBuild)\n\n\t\t// literal/length and distance code lengths\n\t\tfor (i = 0; i < 286 + 30; i++) {\n\t\t\tll[i] = 0;\n\t\t}\n\n\t\t// read in table lengths\n\t\tNEEDBITS(5);\n\t\tnl = 257 + GETBITS(5); // number of literal/length codes\n\t\tDUMPBITS(5);\n\t\tNEEDBITS(5);\n\t\tnd = 1 + GETBITS(5); // number of distance codes\n\t\tDUMPBITS(5);\n\t\tNEEDBITS(4);\n\t\tnb = 4 + GETBITS(4); // number of bit length codes\n\t\tDUMPBITS(4);\n\t\tif (nl > 286 || nd > 30) {\n\t\t\treturn -1; // bad lengths\n\t\t}\n\n\t\t// read in bit-length-code lengths\n\t\tfor (j = 0; j < nb; j++) {\n\t\t\tNEEDBITS(3);\n\t\t\tll[border[j]] = GETBITS(3);\n\t\t\tDUMPBITS(3);\n\t\t}\n\t\tfor (null; j < 19; j++) {\n\t\t\tll[border[j]] = 0;\n\t\t}\n\n\t\t// build decoding table for trees--single level, 7 bit lookup\n\t\tbl = 7;\n\t\th = new HuftBuild(ll, 19, 19, null, null, bl);\n\t\tif (h.status !== 0) {\n\t\t\treturn -1; // incomplete code set\n\t\t}\n\n\t\ttl = h.root;\n\t\tbl = h.m;\n\n\t\t// read in literal and distance code lengths\n\t\tn = nl + nd;\n\t\ti = l = 0;\n\t\twhile (i < n) {\n\t\t\tNEEDBITS(bl);\n\t\t\tt = tl.list[GETBITS(bl)];\n\t\t\tj = t.b;\n\t\t\tDUMPBITS(j);\n\t\t\tj = t.n;\n\t\t\tif (j < 16) { // length of code in bits (0..15)\n\t\t\t\tll[i++] = l = j; // save last length in l\n\t\t\t} else if (j === 16) { // repeat last length 3 to 6 times\n\t\t\t\tNEEDBITS(2);\n\t\t\t\tj = 3 + GETBITS(2);\n\t\t\t\tDUMPBITS(2);\n\t\t\t\tif (i + j > n) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\twhile (j-- > 0) {\n\t\t\t\t\tll[i++] = l;\n\t\t\t\t}\n\t\t\t} else if (j === 17) { // 3 to 10 zero length codes\n\t\t\t\tNEEDBITS(3);\n\t\t\t\tj = 3 + GETBITS(3);\n\t\t\t\tDUMPBITS(3);\n\t\t\t\tif (i + j > n) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\twhile (j-- > 0) {\n\t\t\t\t\tll[i++] = 0;\n\t\t\t\t}\n\t\t\t\tl = 0;\n\t\t\t} else { // j === 18: 11 to 138 zero length codes\n\t\t\t\tNEEDBITS(7);\n\t\t\t\tj = 11 + GETBITS(7);\n\t\t\t\tDUMPBITS(7);\n\t\t\t\tif (i + j > n) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\twhile (j-- > 0) {\n\t\t\t\t\tll[i++] = 0;\n\t\t\t\t}\n\t\t\t\tl = 0;\n\t\t\t}\n\t\t}\n\n\t\t// build the decoding tables for literal/length and distance codes\n\t\tbl = lbits;\n\t\th = new HuftBuild(ll, nl, 257, cplens, cplext, bl);\n\t\tif (bl === 0) { // no literals or lengths\n\t\t\th.status = 1;\n\t\t}\n\t\tif (h.status !== 0) {\n\t\t\tif (h.status !== 1) {\n\t\t\t\treturn -1; // incomplete code set\n\t\t\t}\n\t\t\t// **incomplete literal tree**\n\t\t}\n\t\ttl = h.root;\n\t\tbl = h.m;\n\n\t\tfor (i = 0; i < nd; i++) {\n\t\t\tll[i] = ll[i + nl];\n\t\t}\n\t\tbd = dbits;\n\t\th = new HuftBuild(ll, nd, 0, cpdist, cpdext, bd);\n\t\ttd = h.root;\n\t\tbd = h.m;\n\n\t\tif (bd === 0 && nl > 257) { // lengths but no distances\n\t\t\t// **incomplete distance tree**\n\t\t\treturn -1;\n\t\t}\n/*\n\t\tif (h.status === 1) {\n\t\t\t// **incomplete distance tree**\n\t\t}\n*/\n\t\tif (h.status !== 0) {\n\t\t\treturn -1;\n\t\t}\n\n\t\t// decompress until an end-of-block code\n\t\treturn inflate_codes(buff, off, size);\n\t}\n\n\tfunction inflate_start() {\n\t\tif (!slide) {\n\t\t\tslide = []; // new Array(2 * WSIZE); // slide.length is never called\n\t\t}\n\t\twp = 0;\n\t\tbit_buf = 0;\n\t\tbit_len = 0;\n\t\tmethod = -1;\n\t\teof = false;\n\t\tcopy_leng = copy_dist = 0;\n\t\ttl = null;\n\t}\n\n\tfunction inflate_internal(buff, off, size) {\n\t\t// decompress an inflated entry\n\t\tvar n, i;\n\n\t\tn = 0;\n\t\twhile (n < size) {\n\t\t\tif (eof && method === -1) {\n\t\t\t\treturn n;\n\t\t\t}\n\n\t\t\tif (copy_leng > 0) {\n\t\t\t\tif (method !== STORED_BLOCK) {\n\t\t\t\t\t// STATIC_TREES or DYN_TREES\n\t\t\t\t\twhile (copy_leng > 0 && n < size) {\n\t\t\t\t\t\tcopy_leng--;\n\t\t\t\t\t\tcopy_dist &= WSIZE - 1;\n\t\t\t\t\t\twp &= WSIZE - 1;\n\t\t\t\t\t\tbuff[off + n++] = slide[wp++] = slide[copy_dist++];\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\twhile (copy_leng > 0 && n < size) {\n\t\t\t\t\t\tcopy_leng--;\n\t\t\t\t\t\twp &= WSIZE - 1;\n\t\t\t\t\t\tNEEDBITS(8);\n\t\t\t\t\t\tbuff[off + n++] = slide[wp++] = GETBITS(8);\n\t\t\t\t\t\tDUMPBITS(8);\n\t\t\t\t\t}\n\t\t\t\t\tif (copy_leng === 0) {\n\t\t\t\t\t\tmethod = -1; // done\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (n === size) {\n\t\t\t\t\treturn n;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (method === -1) {\n\t\t\t\tif (eof) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// read in last block bit\n\t\t\t\tNEEDBITS(1);\n\t\t\t\tif (GETBITS(1) !== 0) {\n\t\t\t\t\teof = true;\n\t\t\t\t}\n\t\t\t\tDUMPBITS(1);\n\n\t\t\t\t// read in block type\n\t\t\t\tNEEDBITS(2);\n\t\t\t\tmethod = GETBITS(2);\n\t\t\t\tDUMPBITS(2);\n\t\t\t\ttl = null;\n\t\t\t\tcopy_leng = 0;\n\t\t\t}\n\n\t\t\tswitch (method) {\n\t\t\tcase STORED_BLOCK:\n\t\t\t\ti = inflate_stored(buff, off + n, size - n);\n\t\t\t\tbreak;\n\n\t\t\tcase STATIC_TREES:\n\t\t\t\tif (tl) {\n\t\t\t\t\ti = inflate_codes(buff, off + n, size - n);\n\t\t\t\t} else {\n\t\t\t\t\ti = inflate_fixed(buff, off + n, size - n);\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase DYN_TREES:\n\t\t\t\tif (tl) {\n\t\t\t\t\ti = inflate_codes(buff, off + n, size - n);\n\t\t\t\t} else {\n\t\t\t\t\ti = inflate_dynamic(buff, off + n, size - n);\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tdefault: // error\n\t\t\t\ti = -1;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (i === -1) {\n\t\t\t\tif (eof) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tn += i;\n\t\t}\n\t\treturn n;\n\t}\n\n\tfunction inflate(arr) {\n\t\tvar buff = [], i;\n\n\t\tinflate_start();\n\t\tinflate_data = arr;\n\t\tinflate_pos = 0;\n\n\t\tdo {\n\t\t\ti = inflate_internal(buff, buff.length, 1024);\n\t\t} while (i > 0);\n\t\tinflate_data = null; // G.C.\n\t\treturn buff;\n\t}\n\n\tmodule.exports = inflate;\n}());\n\n},{}],43:[function(require,module,exports){\nmodule.exports = require('./lib/prettyugly.js');\n\n\n},{\"./lib/prettyugly.js\":52}],44:[function(require,module,exports){\nmodule.exports = {\n\n  test: function(name, nodes) {\n    return name === 'atrulers';\n  },\n\n  process: function(node) {\n    var pretty = [];\n    for (var i = 0; i < node.length; i++) {\n      if (node[i][0] === 'ruleset') {\n        pretty.push(['s', '\\n  ']);\n        // go into blocks\n        for (var j = 0; j < node[i][2].length; j++) {\n          if (node[i][2][j][0] === 's') {\n            node[i][2][j][1] = node[i][2][j][1] === '\\n'\n              ? '\\n  '\n              : '\\n    ';\n          }\n        }\n      }\n      pretty.push(node[i]);\n    }\n    pretty.push(['s', '\\n'])\n    return pretty;\n  }\n\n};\n\n},{}],45:[function(require,module,exports){\nmodule.exports = {\n\n  test: function(name, nodes) {\n    return name === 'atruleb';\n  },\n\n  process: function(node) {\n    node.splice(2, 0, ['s', ' ']);\n    return node;\n  }\n\n};\n\n},{}],46:[function(require,module,exports){\nmodule.exports = {\n\n  test: function(name, nodes) {\n    return name === 'block';\n  },\n\n  process: function(node) {\n    var pretty = [];\n    for (var i = 0; i < node.length; i++) {\n      if (node[i][0] === 'declaration') {\n        pretty.push(['s', '\\n  ']);\n      }\n      pretty.push(node[i]);\n    }\n    pretty.push(['s', '\\n']);\n    return pretty;\n  }\n\n};\n\n},{}],47:[function(require,module,exports){\nmodule.exports = {\n\n  test: function(name, nodes) {\n    return name === 'block';\n  },\n\n  process: function(node) {\n    if (node[node.length - 2] && node[node.length - 2][0] !== 'decldelim') {\n      node.splice(node.length - 1, 0, ['decldelim']);\n    }\n    return node;\n  }\n\n};\n\n},{}],48:[function(require,module,exports){\nmodule.exports = {\n\n  test: function(name, nodes) {\n    return name === 'atrulerq';\n  },\n\n  process: function(node) {\n    node.push(['s', ' ']);\n    return node;\n  }\n\n};\n\n},{}],49:[function(require,module,exports){\nmodule.exports = {\n\n  test: function(name, nodes) {\n    return name === 'selector';\n  },\n\n  process: function(node) {\n    for (var i = 0; i < node.length; i++) {\n      if (node[i][0] === 'simpleselector') {\n        if (node[i + 1] && node[i + 1][0] === 'delim') {\n          if (i > 1) {\n            node[i].splice(1, 0, ['s', ' ']);\n          }\n        } else {\n          if (i > 1) {\n            node[i].splice(1, 0, ['s', ' ']);\n          }\n          node[i].push(['s', ' ']);\n        }\n      }\n    }\n    return node;\n  }\n\n};\n\n},{}],50:[function(require,module,exports){\nmodule.exports = {\n\n  test: function(name, nodes) {\n    return name === 'stylesheet';\n  },\n\n  process: function(node) {\n    var pretty = [];\n    for (var i = 0; i < node.length; i++) {\n      if (i > 0 && node[i][0] !== 's') {\n        pretty.push(['s', '\\n']);\n        pretty.push(node[i]);\n        pretty.push(['s', '\\n']);\n      } else {\n        pretty.push(node[i]);\n      }\n    }\n    pretty.push(['s', '\\n']);\n    return pretty;\n  }\n\n};\n\n},{}],51:[function(require,module,exports){\nmodule.exports = {\n\n  test: function(name, nodes) {\n    return name === 'value';\n  },\n\n  process: function(node) {\n    node.splice(1, 0, ['s', ' ']);\n    return node;\n  }\n\n};\n\n},{}],52:[function(require,module,exports){\n// parser\nvar gonzo = require('gonzales-ast');\n\nfunction uglyfyAST(ast) {\n  return gonzo.traverse(ast, [\n    require('./ugly/space-adjacent'),\n    require('./ugly/space-functions'),\n    require('./ugly/space-trim'),\n    require('./ugly/space-single'),\n    require('./ugly/space-delimiter'),\n    require('./ugly/space-rulesets'),\n    require('./ugly/space-attribs'),\n    require('./ugly/space-important'),\n    require('./ugly/space-mq'),\n    require('./ugly/space-at-block'),\n    require('./ugly/space-values'),\n    require('./ugly/space-selectorops'),\n    require('./ugly/ie-pseudo-fix'),\n    require('./ugly/dedup-delimiters'),\n    require('./ugly/last-delimiter')\n  ]);\n}\n\nfunction uglyAST(ast) {\n  ast = gonzo.traverse(ast, [\n    require('./ugly/comments')\n  ]);\n\n  return uglyfyAST(ast);\n}\n\nfunction prettyAST(ast) {\n  ast = uglyfyAST(ast);\n  return gonzo.traverse(ast, [\n    require('./pretty/tops'),\n    require('./pretty/blocks'),\n    require('./pretty/at'),\n    require('./pretty/at-block'),\n    require('./pretty/value'),\n    require('./pretty/last-delimiter'),\n    require('./pretty/selector'),\n    require('./pretty/mq')\n  ]);\n}\n\nexports.ugly = function ugly(css) {\n  var ast = gonzo.parse(css);\n  ast = uglyAST(ast);\n  return gonzo.toCSS(ast);\n};\n\nexports.pretty = function pretty(css) {\n  var ast = gonzo.parse(css);\n  ast = prettyAST(ast);\n  return gonzo.toCSS(ast);\n};\n\nexports.uglyAST = uglyAST;\nexports.prettyAST = prettyAST;\nexports.util = require('./util');\nexports.visitors = {\n  ugly: []\n};\n\n[\n  'comments',\n  'space-functions',\n  'space-trim',\n  'space-single',\n  'space-delimiter',\n  'space-rulesets',\n  'space-attribs',\n  'space-important',\n  'space-mq',\n  'space-at-block',\n  'space-values',\n  'space-selectorops',\n  'ie-pseudo-fix',\n  'dedup-delimiters',\n  'last-delimiter'\n].forEach(function(m) {\n  exports.visitors.ugly[m] = require('./ugly/' + m);\n})\n},{\"./pretty/at\":45,\"./pretty/at-block\":44,\"./pretty/blocks\":46,\"./pretty/last-delimiter\":47,\"./pretty/mq\":48,\"./pretty/selector\":49,\"./pretty/tops\":50,\"./pretty/value\":51,\"./ugly/comments\":53,\"./ugly/dedup-delimiters\":54,\"./ugly/ie-pseudo-fix\":55,\"./ugly/last-delimiter\":56,\"./ugly/space-adjacent\":57,\"./ugly/space-at-block\":58,\"./ugly/space-attribs\":59,\"./ugly/space-delimiter\":60,\"./ugly/space-functions\":61,\"./ugly/space-important\":62,\"./ugly/space-mq\":63,\"./ugly/space-rulesets\":64,\"./ugly/space-selectorops\":65,\"./ugly/space-single\":66,\"./ugly/space-trim\":67,\"./ugly/space-values\":68,\"./util\":69,\"gonzales-ast\":32}],53:[function(require,module,exports){\nmodule.exports = {\n\n  test: function(name, nodes) {\n    return name === 'comment';\n  },\n\n  process: function(node) {\n\n    var text = node[1];\n\n    // important comments\n    if (text.charAt(0) === '!') {\n      // trim trailing space\n      node[1] = text.trim();\n      return node;\n    }\n\n    // ie mac hack ends\n    if (this.ie5machack) { \n      this.ie5machack = false;\n      node = ['raw', '/**/'];\n      return node;\n    }\n\n    // ie5 mac hack starts\n    if (text.charAt(text.length - 1) === '\\\\') {\n      this.ie5machack = true;\n      node[1] = '\\\\'; // minify the hack\n      return node;\n    }\n\n    // return nothing, delete the comment\n  },\n  \n  ie5machack: false\n\n};\n\n},{}],54:[function(require,module,exports){\nmodule.exports = {\n\n  test: function(name, nodes) {\n    return name === 'block';\n  },\n\n  process: function(node) {\n    var delim_added = false;\n    var decl_found = false;\n    return node.filter(function(n) {\n\n      if (n[0] === 'declaration') {\n        decl_found = true;\n      }\n\n      if (n[0] !== 'decldelim') {\n        delim_added = false;\n        return true;\n      }\n      if (delim_added) {\n        return false;\n      }\n\n      if (!decl_found) { // leading delimiter, forget it\n        return false;\n      }\n\n      delim_added = true;\n      return true;\n    });\n  }\n\n};\n\n},{}],55:[function(require,module,exports){\n// add space after first-(line|letter)\n\nmodule.exports = {\n\n  test: function(name, nodes) {\n    return name === 'pseudoc' || name === 'pseudoe';\n  },\n\n  process: function(node) {\n    var val = node[1][1];\n    if (val === 'first-line' || val === 'first-letter') {\n      node[1][1] += ' ';\n    }\n    return node;\n  }\n};\n\n},{}],56:[function(require,module,exports){\nmodule.exports = {\n\n  test: function(name, nodes) {\n    return name === 'block';\n  },\n\n  process: function(node) {\n    if (node[node.length - 1][0] === 'decldelim') {\n      node.pop();\n    }\n    return node;\n  }\n\n};\n\n},{}],57:[function(require,module,exports){\nvar util = require('../util.js');\n\nmodule.exports = {\n\n  test: function(name, nodes) {\n    return (\n      name === 'block' ||\n      name === 'simpleselector' ||\n      name === 'value'\n    );\n  },\n\n  process: function(node) {\n\n    for (var i = 1; i < node.length; i++) {\n      if (node[i][0] === 's') {\n        if (node[i - 1] && node[i - 1][0] === 's') {\n          node.splice(i, 1);\n        }\n      }\n    }\n\n    return node;\n  }\n\n};\n\n},{\"../util.js\":69}],58:[function(require,module,exports){\nvar util = require('../util.js');\n\nmodule.exports = {\n\n  test: function(name, nodes) {\n    return name === 'atruleb';\n  },\n\n  process: function(node) {\n    for (var i = 1; i < node.length; i++) {\n      if (node[i][0] === 'block') {\n        util.trimPrevNext(node, i);\n      }\n    }\n\n    return node;\n  }\n\n};\n\n},{\"../util.js\":69}],59:[function(require,module,exports){\nvar util = require('../util.js');\n\nmodule.exports = {\n\n  test: function(name, nodes) {\n    return name === 'attrib';\n  },\n\n  process: function(node) {\n    for (var i = 1; i < node.length; i++) {\n      if (node[i][0] === 'attrselector') {\n        util.trimPrevNext(node, i);\n      }\n    }\n    return node;\n  }\n\n};\n\n},{\"../util.js\":69}],60:[function(require,module,exports){\nvar util = require('../util.js');\n\nmodule.exports = {\n\n  test: function(name, nodes) {\n    return name === 'block';\n  },\n\n  process: function(node) {\n    for (var i = 1; i < node.length; i++) {\n      if (node[i][0] === 'decldelim') {\n        util.trimPrevNext(node, i);\n      }\n    }\n    return node;\n  }\n\n};\n\n},{\"../util.js\":69}],61:[function(require,module,exports){\nvar util = require('../util.js');\n\nmodule.exports = {\n\n  test: function(name, nodes) {\n    return name === 'funktion';\n  },\n\n  process: function(node) {\n    util.trim(node[2]);\n\n    for (var i = 1; i < node[2].length; i++) {\n      if (node[2][i][0] === 's') {\n        if (util.aroundOperator(node[2], i)) {\n          node[2].splice(i, 1);\n        }\n      }\n    }\n\n    return node;\n  }\n\n};\n\n},{\"../util.js\":69}],62:[function(require,module,exports){\nvar util = require('../util.js');\n\nmodule.exports = {\n\n  test: function(name, nodes) {\n    return name === 'value';\n  },\n\n  process: function(node) {\n    for (var i = 1; i < node.length; i++) {\n      if (node[i][0] === 'important') {\n        util.trimPrevNext(node, i);\n      }\n    }\n    return node;\n  }\n\n};\n\n},{\"../util.js\":69}],63:[function(require,module,exports){\nvar util = require('../util.js');\n\nmodule.exports = {\n\n  test: function(name, nodes) {\n    return name === 'atrulerq';\n  },\n\n  process: function(node) {\n\n    if (node[1][0] === 's' && node[2][0] === 'braces') {\n      util.trim(node);\n    } else {\n      util.trimRight(node);\n    }\n\n    for (var i = 1; i < node.length; i++) {\n      if (node[i][0] === 'operator') {\n        util.trimPrevNext(node, i);\n      }\n    }\n\n    return node;\n  }\n\n};\n\n},{\"../util.js\":69}],64:[function(require,module,exports){\nvar util = require('../util.js');\n\nmodule.exports = {\n\n  test: function(name, nodes) {\n    return name === 'stylesheet' || name === 'atrulers';\n  },\n\n  process: function(node) {\n    var newnode = [];\n    newnode.push(node[0]);\n    for (var i = 1; i < node.length; i++) {\n      if (node[i][0] !== 's') {\n        newnode.push(node[i]);\n      }\n    }\n    return newnode;\n  }\n\n};\n\n},{\"../util.js\":69}],65:[function(require,module,exports){\nvar util = require('../util.js');\n\nmodule.exports = {\n\n  test: function(name, nodes) {\n    return name === 'simpleselector';\n  },\n\n  process: function(node) {\n    for (var i = 1; i < node.length; i++) {\n      if (node[i][0] === 'combinator') {\n        util.trimPrevNext(node, i);\n      }\n    }\n    return node;\n  }\n\n};\n\n},{\"../util.js\":69}],66:[function(require,module,exports){\nmodule.exports = {\n\n  test: function(name, nodes) {\n    return name === 's';\n  },\n\n  process: function(node) {\n    node[1] = ' ';\n    return node;\n  }\n\n};\n\n},{}],67:[function(require,module,exports){\nvar util = require('../util.js');\n\nmodule.exports = {\n\n  test: function(name, nodes) {\n    return (\n      name === 'stylesheet' ||\n      name === 'ruleset' ||\n      name === 'block' ||\n      name === 'selector' ||\n      name === 'simpleselector' ||\n      name === 'declaration' ||\n      name === 'property' ||\n      name === 'value' ||\n      name === 'atrules' ||\n      name === 'atrulers' ||\n      name === 'atkeyword' ||\n      name === 'braces'\n    );\n  },\n\n  process: function(node) {\n    util.trim(node);\n    \n    // special case, these have two more \"intro\" nodes, namely ( and )\n    if (node[0] === 'braces') { \n      util.trimBraces(node);\n    }\n    \n    return node;\n  }\n\n};\n\n},{\"../util.js\":69}],68:[function(require,module,exports){\nvar util = require('../util.js');\n\nmodule.exports = {\n\n  test: function(name, nodes) {\n    return name === 'value' || name === 'braces';\n  },\n\n  process: function(node) {\n    for (var i = 1; i < node.length; i++) {\n      if (node[i][0] === 's') {\n        if (util.aroundOperator(node, i)) {\n          node.splice(i, 1);\n        }\n      }\n    }\n    return node;\n  }\n\n};\n\n},{\"../util.js\":69}],69:[function(require,module,exports){\nexports.trim = function trim(ast) {\n  if (ast.length < 2) {\n    return; // already empty, nothing to trim\n  }\n  if (ast[ast.length - 1][0] === 's') {\n    ast.pop();\n  }\n  if (ast[1] && ast[1][0] === 's') {\n    ast.splice(1, 1);\n  }\n};\n\nexports.trimRight = function trim(ast) {\n  if (ast.length < 2) {\n    return; // already empty, nothing to trim\n  }\n  if (ast[ast.length - 1][0] === 's') {\n    ast.pop();\n  }\n};\n\nexports.trimBraces = function trim(ast) {\n  if (ast.length < 4) {\n    return; // already empty, nothing to trim\n  }\n  if (ast[3] && ast[3][0] === 's') {\n    ast.splice(3, 1);\n  }\n};\n\nexports.trimPrevNext = function trim(node, i) {\n  var prev = node[i - 1];\n\n  if (prev && prev[0] === 's') {\n    node.splice(i - 1, 1)\n    i--;\n  }\n  var next = node[i + 1];\n  if (next && next[0] === 's') {\n    node.splice(i + 1, 1);\n  }\n};\n\nexports.aroundOperator = function aroundOperator(node, i) {\n  var prev = node[i - 1];\n  var next = node[i + 1];\n  return (\n    (prev && prev[0] === 'operator') ||\n    (next && next[0] === 'operator') ||\n    (prev && prev[0] === 'ident' && prev[1] === '*') ||\n    (next && next[0] === 'ident' && next[1] === '*')\n  );\n};\n\n},{}],70:[function(require,module,exports){\nvar cssshrink = require('../index.js');\nvar prettyugly = require('prettyugly');\nvar bscss = require('bscss');\nvar gzip = require('gzip-js');\n\nshrink = function(css, uglyonly, browser) {\n  if (!css) {\n    return '';\n  }\n  \n  if (browser) {\n    css = bscss.transform(css, browser);\n  }\n\n  return uglyonly\n    ? prettyugly.ugly(css)\n    : cssshrink.shrink(css);\n};\n\npretty = function(css) {\n  return prettyugly.pretty(css);\n};\n\ngz = function(css) {\n  return gzip.zip(css, {level: 9}).length;\n};\n\ngetBrowswerOptions = function() {\n  var opts = [];\n  var me = bscss.stringGetStringIdStringFromUserAgentSring(navigator.userAgent);\n  bscss.browsers.forEach(function(b) {\n    opts.push(\n      '<option name=\"browser\" value=\"%s\" id=\"%s\" %me>%s</option>'\n      .replace(/%s/g, b)\n      .replace(/%me/, b === me ? 'selected' : '')\n    );\n  });\n  return opts;\n};\n\n\n},{\"../index.js\":71,\"bscss\":1,\"gzip-js\":38,\"prettyugly\":43}],71:[function(require,module,exports){\nmodule.exports = require('./lib/shrink.js');\n\n\n},{\"./lib/shrink.js\":72}],72:[function(require,module,exports){\nvar gonzo = require('gonzales-ast');\nvar prettyugly = require('prettyugly');\n\nfunction traverseAST(ast) {\n  // individual values, etc., run once\n  var value_visitors = [\n    require('./visitors/numbers.js'),\n    require('./visitors/zero-dimensions.js'),\n    require('./visitors/unary.js'),\n    require('./visitors/lowercase-props.js'),\n    require('./visitors/lowercase-dimensions.js'),\n    require('./visitors/@keyframes.js'),\n    require('./visitors/pseudo-elements.js'),\n    require('./visitors/color-functions.js'),\n    require('./visitors/color-hex.js'),\n    require('./visitors/color-names.js'),\n    require('./visitors/@charset.js'),\n    require('./visitors/@import.js'), // before url.js and before quotes.js\n    require('./visitors/uri.js'),\n    require('./visitors/quotes.js'),\n    require('./visitors/font-weight.js'),\n    require('./visitors/font-family-unquote.js'),\n    require('./visitors/font-family-generic.js'),\n    require('./visitors/time.js'),\n    require('./visitors/angle.js'),\n    require('./visitors/zero-percentage.js'),\n  ];\n\n  // run while there's improvement\n  var structure_visitors = [\n    // structural transforms\n    require('./visitors/merge-media.js'),\n    require('./visitors/merge-blocks.js'),\n    require('./visitors/merge-blocks-in-blocks.js'),\n\n    // dedup\n    require('./visitors/dedup-selectors.js'),\n    require('./visitors/dedup-declarations.js'),\n    require('./visitors/dedup-keyframes.js'),\n    // again\n    prettyugly.visitors.ugly['dedup-delimiters'],\n    prettyugly.visitors.ugly['last-delimiter'],\n\n    // rm empty\n    require('./visitors/empty-blocks.js'),\n    require('./visitors/empty-media.js'),\n  ];\n\n  ast = prettyugly.uglyAST(ast);\n  ast = gonzo.traverse(ast, value_visitors);\n  var len = JSON.stringify(ast).length;\n  var newlen;\n\n  while (1) {\n    ast = gonzo.traverse(ast, structure_visitors);\n    newlen = JSON.stringify(ast).length;\n    if (newlen === len) {\n      return ast;\n    }\n    len = newlen;\n  }\n}\n\nexports.shrink = function shrink(css) {\n  var ast = gonzo.parse(css);\n  ast = traverseAST(ast);\n  return gonzo.toCSS(ast);\n};\n\nexports.shrinkAST = function shrinkAST(ast) {\n  return traverseAST(ast);\n};\n\n},{\"./visitors/@charset.js\":74,\"./visitors/@import.js\":75,\"./visitors/@keyframes.js\":76,\"./visitors/angle.js\":77,\"./visitors/color-functions.js\":78,\"./visitors/color-hex.js\":79,\"./visitors/color-names.js\":80,\"./visitors/dedup-declarations.js\":81,\"./visitors/dedup-keyframes.js\":82,\"./visitors/dedup-selectors.js\":83,\"./visitors/empty-blocks.js\":84,\"./visitors/empty-media.js\":85,\"./visitors/font-family-generic.js\":86,\"./visitors/font-family-unquote.js\":87,\"./visitors/font-weight.js\":88,\"./visitors/lowercase-dimensions.js\":89,\"./visitors/lowercase-props.js\":90,\"./visitors/merge-blocks-in-blocks.js\":91,\"./visitors/merge-blocks.js\":92,\"./visitors/merge-media.js\":93,\"./visitors/numbers.js\":94,\"./visitors/pseudo-elements.js\":95,\"./visitors/quotes.js\":96,\"./visitors/time.js\":97,\"./visitors/unary.js\":98,\"./visitors/uri.js\":99,\"./visitors/zero-dimensions.js\":100,\"./visitors/zero-percentage.js\":101,\"gonzales-ast\":32,\"prettyugly\":43}],73:[function(require,module,exports){\nfunction stripslashes(str) {\n  return str.replace(/\\\\(.?)/g, function(match, sym) {\n    return sym === '\"' || sym === \"'\"\n      ? sym\n      : match;\n  });\n}\n\nexports.stripslashes = stripslashes;\n\nexports.addslashes = function addslashes(str, q) {\n  str = stripslashes(str);\n  return str.replace(new RegExp(q, 'g'), '\\\\' + q);\n};\n\nexports.unfix = function unfix(str) {\n  return str.toLowerCase().replace(/^\\-(ms|webkit|moz|o)\\-/, '');\n};\n\nexports.stripLeadingZero = function stripLeadingZero(n) {\n  // strip leading 0.\n  if (n > 0 && n < 1) {\n    n = String(n).replace('0.', '.');\n  }\n  return String(n);\n}\n},{}],74:[function(require,module,exports){\n// only one charset allowed per file\n// find the first and hoist it to the top\n// delete all others\n// this is often a side effect of concatenating files\n\nmodule.exports = {\n\n  test: function(name, nodes) {\n    return name === 'stylesheet';\n  },\n\n  process: function(node) {\n    var newnode = [];\n    newnode.push(node[0]);\n    var charsetnode = null;\n\n    for (var i = 1; i < node.length; i++) {\n      if (node[i][0] === 'atrules' && node[i][1][0] === 'atkeyword' && node[i][1][1][1] === 'charset') {\n        if (!charsetnode) {\n          charsetnode = node[i][3];\n        }\n      } else {\n        newnode.push(node[i]);\n      }\n    }\n\n    if (charsetnode) {\n      var ch = [\"atrules\", [\"atkeyword\", [\"ident\", \"charset\"]], [\"s\", \" \"], charsetnode];\n      newnode.splice(1, 0, ch);\n    }\n    return newnode;\n  }\n\n};\n\n},{}],75:[function(require,module,exports){\nvar util = require('../util');\n\nmodule.exports = {\n\n  test: function(name, nodes) {\n    return name === 'atrules' && nodes[1][1] === 'import';\n  },\n\n  process: function(node) {\n    for (var i = 0; i < node.length; i++) {\n      if (node[i][0] === 'uri') {\n        if (node[i][1][0] === 'raw') { // unquoted url\n          var q = '\"';\n          // replace with a string quoted with default \" and escape other \"s\n          // later the quotes visitor optimizes \" vs '\n          node[i] = ['string', [q, util.addslashes(node[i][1][1], q), q].join('')];\n        } else if (node[i][1][0] === 'string') {\n          // rewrite node throwing out url() and leaving string only\n          node[i] = ['string', node[i][1][1]];\n        }\n      }\n    }\n    return node;\n  }\n};\n\n/*\n[ 'atrules',\n  [ 'atkeyword', [ 'ident', 'import' ] ],\n  [ 's', ' ' ],\n  [ 'uri', [ 'string', '\\'landscape.css\\'' ] ],\n  [ 's', ' ' ],\n  [ 'ident', 'screen' ],\n  [ 's', ' ' ],\n  [ 'ident', 'and' ],\n  [ 's', ' ' ],\n  [ 'braces',\n    '(',\n    ')',\n    [ 'ident', 'orientation' ],\n    [ 'operator', ':' ],\n    [ 'ident', 'landscape' ] ] ]\n*/\n},{\"../util\":73}],76:[function(require,module,exports){\nvar unfix = require('../util').unfix;\n\nmodule.exports = {\n\n  test: function(name, nodes) {\n    return name === 'atruler'\n      && nodes[0] === 'atkeyword'\n      && unfix(nodes[1][1]) === 'keyframes';\n  },\n\n  process: function(node) {\n    var atrulers = node[3];\n    for (var i = 0; i < atrulers.length; i++) {\n      var type = atrulers[i][0];\n      if (type === 'ruleset') {\n        if (atrulers[i][1] && atrulers[i][1][0] === 'selector') {\n          if (atrulers[i][1][1] && atrulers[i][1][1][0] === 'simpleselector') {\n            var sel = atrulers[i][1][1][1];\n            if ((sel[0] === 'ident' && sel[1] === 'from') ||\n                (sel[0] === 'percentage' && sel[1][1] === '0')) {\n              sel[0] = 'raw'; // raw, otherwise all 0% turn to 0\n              sel[1] = ['0%'];\n            }\n            if (sel[0] === 'percentage' && sel[1][1] === '100') {\n              sel[0] = 'ident';\n              sel[1] = 'to';\n            }\n          }\n        }\n      }\n    }\n    return node;\n  }\n};\n\n},{\"../util\":73}],77:[function(require,module,exports){\nvar stripLeadingZero = require('../util').stripLeadingZero;\nvar these = ['deg', 'grad', 'turn', 'rad'];\n\nvar PRECISION = 2;\n\n// prefer `deg` if all else is equal\n\nmodule.exports = {\n\n  test: function(name, nodes) {\n    return name === 'dimension';\n  },\n\n  process: function(node) {\n    var value = Number(node[1][1]);\n    var unit = node[2][1];\n    if (isNaN(value) || these.indexOf(unit) === -1) {\n      return node;\n    }\n\n    if (value === 0) {\n      node[1][1] = '0';\n      node[2][1] = 'deg';\n      return node;\n    }\n\n    var all = {\n      deg: 0,\n      grad: 0,\n      turn: 0,\n      rad: 0\n    };\n\n    var min = getMin(populate(value, unit));\n    node[1][1] = min.value;\n    node[2][1] = min.unit;\n    return node;\n  }\n\n};\n\nvar fullcircle = {\n  turn: 1,\n  deg: 360,\n  grad: 400,\n  rad: 2 * Math.PI\n};\n\nfunction populate(v, u) {\n  var all = {}\n  for (var i in fullcircle) {\n    all[i] = 1 * Number(v * fullcircle[i] / fullcircle[u]).toFixed(PRECISION);\n  }\n  return all;\n}\n\nfunction getMin(all) {\n  var win = {\n    value: stripLeadingZero(all.deg),\n    unit: 'deg'\n  };\n  var champion = (win.value + win.unit).length;\n  for (var u in all) {\n    if (u === 'turn') {\n      continue; // lacking browser support\n    }\n    var challenger = (stripLeadingZero(all[u]) + u).length;\n    if (challenger < champion) {\n      champion = challenger;\n      win = {\n        value: stripLeadingZero(all[u]),\n        unit: u\n      };\n    }\n  }\n  return win;\n}\n},{\"../util\":73}],78:[function(require,module,exports){\nvar min = require('csscolormin').min;\n\nfunction stringify(node) {\n  var str = ''\n  for (var i = 1; i < node.length; i++) {\n    if (node[i][0] === 'number') {\n      str += node[i][1];\n    } else if (node[i][0] === 'operator' && node[i][1] === ',') {\n      str += ',';\n    } else if (node[i][0] === 'percentage') {\n      str += node[i][1][1] + '%';\n    }\n  }\n  return str;\n}\n\nvar functions = [\n  'rgb',\n  'rgba',\n  'hsl',\n  'hsla',\n  'cmyk',\n  'hsv',\n  'hsva'\n];\n\nmodule.exports = {\n\n  test: function(name, nodes) {\n    return name === 'funktion' && functions.indexOf(nodes[1]) !== -1;\n  },\n\n  process: function(node) {\n    var colorstr = node[1][1] + '(' + stringify(node[2]) + ')';\n    return [\"raw\", min(colorstr)];\n  }\n\n};\n\n},{\"csscolormin\":17}],79:[function(require,module,exports){\nvar min = require('csscolormin').min;\n\nmodule.exports = {\n\n  test: function(name, nodes) {\n    return name === 'vhash';\n  },\n\n  process: function(node) {\n    return [\"raw\", min('#' + node[1])];\n  }\n\n};\n\n},{\"csscolormin\":17}],80:[function(require,module,exports){\nvar keywords = require('csscolormin').keywords;\n\nvar props = [\n  'color',\n  'background',\n  'background-color',\n  'background-image',\n  'border',\n  'border-color',\n  'border-top',\n  'border-right',\n  'border-bottom',\n  'border-left',\n  'border-top-color',\n  'border-right-color',\n  'border-bottom-color',\n  'border-left-color',\n  'outline',\n  'outline-color',\n  'text-shadow',\n  'box-shadow'\n];\n\nmodule.exports = {\n\n  test: function(name, nodes) {\n    return name === 'declaration' && props.indexOf(nodes[1][1]) !== -1;\n  },\n\n  process: function(node) {\n    for (var i = 1; i < node[2].length; i++) {\n      if (node[2][i][0] === 'ident' && keywords[node[2][i][1]]) {\n        node[2][i] = ['raw', keywords[node[2][i][1]]];\n      } else if (node[2][i][0] === 'funktion' && node[2][i][1][1].indexOf('gradient') !== 1) {\n        node[2][i] = this.process(node[2][i]);\n      }\n    }\n    return node;\n  },\n\n\n};\n\n},{\"csscolormin\":17}],81:[function(require,module,exports){\nmodule.exports = {\n\n  test: function(name, nodes) {\n    return name === 'block';\n  },\n\n  process: function(node) {\n    var cache = {};\n    return node.filter(function(n) {\n      if (n[0] !== 'declaration') {\n        return true;\n      }\n      var str = JSON.stringify(n);\n      if (cache[str]) {\n        return false;\n      }\n      cache[str] = 1;\n      return true;\n    });\n  }\n};\n\n\n/*\n[ 'block',\n [ 'declaration',\n   [ 'property', [Object] ],\n   [ 'value', [Object] ] ],\n [ 'decldelim' ],\n [ 'declaration',\n   [ 'property', [Object] ],\n   [ 'value', [Object] ] ] ]\n*/\n},{}],82:[function(require,module,exports){\nvar unfix = require('../util').unfix;\n\nmodule.exports = {\n\n  test: function(name, nodes) {\n    return name === 'stylesheet';\n  },\n\n  process: function(node) {\n    var map = {};\n    for (var i = 0; i < node.length; i++) {\n      if (node[i][0] === 'atruler'\n        && node[i][1][0] === 'atkeyword'\n        && unfix(node[i][1][1][1]) === 'keyframes') {\n          var at = node[i][1][1][1];\n          var name = node[i][2][2][1];\n          var id = at + ':' + name;\n          if (!map[id]) {\n            map[id] = [];\n          }\n          map[id].push(i);\n        }\n    }\n    \n    var dupes = [];\n    for (var i in map) {\n      map[i].pop();\n      if (map[i].length) {\n        dupes = dupes.concat(map[i]);\n      }\n    }\n\n    return node.filter(function(__, idx) {\n      return dupes.indexOf(idx) === -1\n    });\n  }\n};\n\n},{\"../util\":73}],83:[function(require,module,exports){\nmodule.exports = {\n\n  test: function(name, nodes) {\n    return name === 'selector';\n  },\n\n  process: function(node) {\n    var selectors = {};\n    var newnode = [];\n    newnode.push(node[0]);\n\n    for (var i = 1; i < node.length; i++) {\n      if (node[i][0] === 'simpleselector') {\n        selectors[JSON.stringify(node[i])] = node[i];\n      }\n    }\n\n    var keys = Object.keys(selectors);\n    keys.forEach(function(k, idx) {\n      newnode.push(selectors[k]);\n      if (idx < keys.length - 1) {\n        newnode.push(['delim']);\n      }\n    });\n\n    return newnode;\n  }\n\n};\n\n},{}],84:[function(require,module,exports){\nmodule.exports = {\n\n  test: function(name, nodes) {\n    return name === 'ruleset';\n  },\n\n  /*\n  a {  ; ; ; }\n\n  ['stylesheet',\n    ['ruleset',\n      ['selector',\n        ['simpleselector',\n          ['ident', 'a'],\n          ['s', ' ']]],\n      ['block',\n        ['s', '  '],\n        ['decldelim'],\n        ['s', ' '],\n        ['decldelim'],\n        ['s', ' '],\n        ['decldelim'],\n        ['s', ' ']]]]\n  */\n\n  process: function(node) {\n    // spaces and trailing delims have been stripped\n    // if there's nothing left, it's empty\n    if (node[2].length < 2) { // 1st is the 'block' node\n      return false;\n    }\n    // check for multiple ;s\n    for (var i = 1; i < node[2].length; i++) {\n      if (node[2][i][0] !== 'decldelim' && node[2][i][0] !== 's') {\n        return node;\n      }\n    }\n\n  }\n};\n\n},{}],85:[function(require,module,exports){\nmodule.exports = {\n\n  test: function(name, nodes) {\n    return name === 'atruler' && nodes[0] === 'atkeyword' && nodes[1][1] === 'media';\n  },\n\n  process: function(node) {\n    // node[3] == selectors in the media block\n    if (node[3].length > 1) {\n      return node;\n    }\n  }\n};\n\n\n/*\n[ 'atruler',\n  [ 'atkeyword', [ 'ident', 'media' ] ],\n  [ 'atrulerq', [ 's', ' ' ], [ 'ident', 'print' ], [ 's', ' ' ] ],\n  [ 'atrulers' ] ]\n*/\n},{}],86:[function(require,module,exports){\n// non-generic fonts don't make sense after a generic one\n\nvar generic = [\n  'sans-serif',\n  'serif',\n  'fantasy',\n  'cursive',\n  'monospace'\n];\n\nmodule.exports = {\n\n  test: function(name, nodes) {\n    return name === 'declaration' && nodes[1][1] === \"font-family\";\n  },\n\n  process: function(node) {\n    var newnode = [node[0], node[1], [node[2][0]]];\n    var generic_found = false;\n\n    for (var i = 1; i < node[2].length; i++) {\n\n      if (node[2][i][0] === 'important') {\n        newnode[2].push(node[2][i]);\n        return newnode;\n      }\n\n      var value = node[2][i][1].toLowerCase();\n      if (!generic_found && generic.indexOf(value) !== -1) {\n        generic_found = true;\n        node[2][i][1] = value; // lowercase generic\n        newnode[2].push(node[2][i]);\n      }\n      if (!generic_found) {\n        newnode[2].push(node[2][i]);\n      }\n\n    }\n    return newnode;\n  }\n};\n\n\n},{}],87:[function(require,module,exports){\nmodule.exports = {\n\n  test: function(name, nodes) {\n    return name === 'declaration' && nodes[1][1] === \"font-family\";\n  },\n\n  process: function(node) {\n    for (var i = 1; i < node[2].length; i++) {\n      if (node[2][i][0] === 'string') { // try to unquote\n        var raw = node[2][i][1].slice(1, -1); // sans quotes\n        // strip spaces, the rest should be just letters or -\n        if (/^[a-z-]*$/i.test((raw.replace(/\\s/g, '')))) {\n          node[2][i] = ['raw', raw];\n        }\n      }\n    }\n    return node;\n  }\n};\n\n\n},{}],88:[function(require,module,exports){\nmodule.exports = {\n\n  test: function(name, nodes) {\n    return name === 'declaration' && nodes[1][1] === \"font-weight\";\n  },\n\n  process: function(node) {\n    if (node[2][1][1] === 'bold') {\n      node[2][1][1] = 700;\n    } else if (node[2][1][1] === 'normal') {\n      node[2][1][1] = 400;\n    }\n    return node;\n  }\n};\n\n\n/*\n['stylesheet',\n  ['ruleset',\n    ['selector',\n      ['simpleselector',\n        ['ident', 'a']]],\n    ['block',\n      ['declaration',\n        ['property',\n          ['ident', 'font-weight']],\n        ['value',\n          ['ident', 'bold']]],\n      ['decldelim']]]]\n*/\n},{}],89:[function(require,module,exports){\nmodule.exports = {\n\n  test: function(name, nodes) {\n    return name === 'dimension';\n  },\n\n  process: function(node) {\n    node[2][1] = node[2][1].toLowerCase();\n    return node;\n  }\n\n};\n\n},{}],90:[function(require,module,exports){\nmodule.exports = {\n\n  test: function(name, nodes) {\n    return name === 'property';\n  },\n\n  process: function(node) {\n    node[1][1] = node[1][1].toLowerCase();\n    return node;  \n  }\n\n};\n\n},{}],91:[function(require,module,exports){\n// same as merging blocks in a stylesheet\n// only it's in a media query block\n\nmodule.exports = {\n\n  test: function(name, nodes) {\n    return name === 'atrulers';\n  },\n  process: require('./merge-blocks.js').process\n};\n\n},{\"./merge-blocks.js\":92}],92:[function(require,module,exports){\nmodule.exports = {\n\n  test: function(name, nodes) {\n    return name === 'stylesheet';\n  },\n\n  process: function(node) {\n\n    var prev_s, prev_b;\n    var newnode = [];\n    newnode.push(node[0]);\n\n    for (var i = 1; i < node.length; i++) {\n      if (node[i][0] !== 'ruleset') {\n        prev_s = null;\n        prev_b = null;\n        newnode.push(node[i]);\n        continue;\n      }\n      var selector = JSON.stringify(node[i][1]);\n      var block    = JSON.stringify(node[i][2]);\n      if (prev_b === block) {\n        // drop the block, merge selectors\n        appendSelector(newnode[newnode.length - 1][1], node[i][1]);\n        prev_s = JSON.stringify(newnode[newnode.length - 1][1]);\n      } else if (prev_s === selector) {\n        // merge block to the previous\n        appendBlock(newnode[newnode.length - 1][2], node[i][2]);\n        prev_b = JSON.stringify(newnode[newnode.length - 1][2]);\n      } else {\n        // keep going\n        prev_s = selector;\n        prev_b = block;\n        newnode.push(node[i]);\n      }\n    }\n\n    return newnode;\n  }\n\n};\n\n\nfunction appendSelector(selector1, selector2) {\n  selector1.push(['delim']);\n  for (var i = 1; i < selector2.length; i++) {\n    selector1.push(selector2[i]);\n  }\n}\n\nfunction appendBlock(b1, b2) {\n\n  if (b1[b1.length - 1][0] !== 'decldelim') {\n    b1.push(['decldelim']);\n  }\n\n  for (var i = 1; i < b2.length; i++) {\n    b1.push(b2[i]);\n  }\n}\n},{}],93:[function(require,module,exports){\nmodule.exports = {\n\n  test: function(name, nodes) {\n    return name === 'stylesheet';\n  },\n\n  process: function(node) {\n    var newnode = [];\n    newnode.push(node[0]);\n    var prevq = false;\n    for (var i = 1; i < node.length; i++) {\n      if (node[i][0] === 'atruler' && node[i][1][0] === 'atkeyword' && node[i][1][1][1] === 'media') {\n        var q = JSON.stringify(node[i][2]);\n        if (q === prevq) {\n          // same mq, merge the kids\n          appendRulesets(newnode[newnode.length - 1][3], node[i][3]);\n        } else {\n          newnode.push(node[i]);\n          prevq = q;\n        }\n      } else {\n        newnode.push(node[i]);\n        prevq = false;\n      }\n    }\n    return newnode;\n  }\n};\n\n\nfunction appendRulesets(r1, r2) {\n  for (var i = 1; i < r2.length; i++) {\n    r1.push(r2[i]);\n  }\n}\n},{}],94:[function(require,module,exports){\nvar stripLeadingZero = require('../util').stripLeadingZero;\n\nmodule.exports = {\n\n  test: function(name, nodes) {\n    return name === 'number';\n  },\n\n  process: function(node) {\n    var n = Number(node[1]);\n    if (isNaN(n)) {\n      return; // drop this\n    }\n\n    node[1] = stripLeadingZero(n);\n    return node;\n  }\n\n};\n\n},{\"../util\":73}],95:[function(require,module,exports){\nvar whitelist = [\n  'after',\n  'before',\n  'first-letter',\n  'first-line'\n];\n\nmodule.exports = {\n\n  test: function(name, nodes) {\n    return name === 'pseudoe';\n  },\n\n  process: function(node) {\n    var name = node[1][1];\n    if (whitelist.indexOf(name.trim()) !== -1) {\n      node[0] = 'pseudoc';\n    }\n    return node;\n  }\n};\n\n},{}],96:[function(require,module,exports){\nvar util = require('../util');\n\nmodule.exports = {\n\n  test: function(name, nodes) {\n    return name === 'string';\n  },\n\n  process: function(node) {\n    var str = util.stripslashes(node[1].slice(1, -1));\n\n    // try consistent \" first\n    var q = '\"';\n    var doubles = str.match(/\"/g);\n    if (!doubles) {\n      node[1] = [q, str, q].join('');\n      return node;\n    }\n\n    // go with fewer quotes to escape\n    var singles = str.match(/'/g);\n    if (!singles || (singles.length < doubles.length)) {\n      q = \"'\";\n    }\n\n    node[1] = [q, util.addslashes(str, q), q].join('');\n    return node;\n  }\n\n};\n\n\n},{\"../util\":73}],97:[function(require,module,exports){\nvar stripLeadingZero = require('../util').stripLeadingZero;\n\nmodule.exports = {\n\n  test: function(name, nodes) {\n    return name === 'dimension';\n  },\n\n  process: function(node) {\n    var u = node[2][1];\n    if (u !== 'ms' && u !== 's') {\n      return node;\n    }\n    var ms_value = u === 'ms'\n      ? node[1][1]\n      : node[1][1] * 1000;\n\n    var seconds = stripLeadingZero(ms_value / 1000);\n    var milisec = stripLeadingZero(ms_value);\n    if (milisec.length + 2 > seconds.length + 1) { // ms=2,s=1\n      node[2][1] = 's';\n      node[1][1] = seconds;\n    } else {\n      node[2][1] = 'ms';\n      node[1][1] = milisec;\n    }\n    return node;\n  }\n\n};\n\n},{\"../util\":73}],98:[function(require,module,exports){\nmodule.exports = {\n\n  test: function(name, nodes) {\n    return name === 'value';\n  },\n\n  process: function(node) {\n    var newnode = [];\n\n    for (var i = 0; i < node.length; i++) {\n      var type = node[i][0];\n      var next_type = node[i + 1] && node[i + 1][0];\n\n      if (type !== 'unary') {\n        newnode.push(node[i]);\n        continue; // no changes\n      }\n\n      if (next_type !== 'dimension' && next_type !== 'number') {\n        newnode.push(node[i]);\n        continue; // no changes\n      }\n\n      if (node[i][1] === '+') {\n        continue; //  +101 => 101, +1px => 1px\n      }\n\n      if (next_type === 'number' && node[i + 1][1] === '0') {\n        continue; // -0 => 0\n      }\n\n      newnode.push(node[i]);\n    }\n\n    return newnode;\n  }\n\n};\n\n},{}],99:[function(require,module,exports){\nvar trim = require('prettyugly').util.trim;\n\nmodule.exports = {\n\n  test: function(name, nodes) {\n    return name === 'uri';\n  },\n\n  process: function(node) {\n    trim(node);\n\n    if (node[1][0] === 'string') { // as opposed to \"raw\" which is unquoted url\n      // try to unquote\n      var raw = node[1][1].slice(1, -1);\n      if (/[\\s\\(\\)\"']/.test(raw)) {\n        return node;\n      }\n      node[1] = ['raw', raw];\n    }\n\n    //var colorstr = node[1][1] + '(' + stringify(node[2]) + ')';\n    //return [\"string\", min(colorstr)];\n    return node;\n  }\n\n};\n\n},{\"prettyugly\":43}],100:[function(require,module,exports){\nvar angle = ['deg', 'grad', 'turn', 'rad'];\nvar time = ['ms', 's'];\n\nmodule.exports = {\n\n  test: function(name, nodes) {\n    return name === 'dimension';\n  },\n\n  process: function(node) {\n    if (node[1][1] !== '0') {\n      return node;\n    }\n\n    if (angle.indexOf(node[2][1]) !== -1) {\n      node[2][1] = 'deg';\n      return node;\n    }\n\n    if (time.indexOf(node[2][1]) !== -1) {\n      node[2][1] = 's';\n      return node;\n    }\n\n    return ['number', '0'];\n  }\n\n};\n\n},{}],101:[function(require,module,exports){\nmodule.exports = {\n\n  test: function(name, nodes) {\n    return name === 'percentage';\n  },\n\n  process: function(node) {\n    if (node[1][1] !== '0') {\n      return node;\n    }\n    return ['number', '0'];\n  }\n\n};\n\n},{}]},{},[70])","/home/travis/build/npmtest/node-npmtest-cssshrink/node_modules/cssshrink/demo/demo.js":"var cssshrink = require('../index.js');\nvar prettyugly = require('prettyugly');\nvar bscss = require('bscss');\nvar gzip = require('gzip-js');\n\nshrink = function(css, uglyonly, browser) {\n  if (!css) {\n    return '';\n  }\n  \n  if (browser) {\n    css = bscss.transform(css, browser);\n  }\n\n  return uglyonly\n    ? prettyugly.ugly(css)\n    : cssshrink.shrink(css);\n};\n\npretty = function(css) {\n  return prettyugly.pretty(css);\n};\n\ngz = function(css) {\n  return gzip.zip(css, {level: 9}).length;\n};\n\ngetBrowswerOptions = function() {\n  var opts = [];\n  var me = bscss.stringGetStringIdStringFromUserAgentSring(navigator.userAgent);\n  bscss.browsers.forEach(function(b) {\n    opts.push(\n      '<option name=\"browser\" value=\"%s\" id=\"%s\" %me>%s</option>'\n      .replace(/%s/g, b)\n      .replace(/%me/, b === me ? 'selected' : '')\n    );\n  });\n  return opts;\n};\n\n","/home/travis/build/npmtest/node-npmtest-cssshrink/node_modules/cssshrink/demo/prism.js":"/**\n * Prism: Lightweight, robust, elegant syntax highlighting\n * MIT license http://www.opensource.org/licenses/mit-license.php/\n * @author Lea Verou http://lea.verou.me\n */(function(){var e=/\\blang(?:uage)?-(?!\\*)(\\w+)\\b/i,t=self.Prism={util:{type:function(e){return Object.prototype.toString.call(e).match(/\\[object (\\w+)\\]/)[1]},clone:function(e){var n=t.util.type(e);switch(n){case\"Object\":var r={};for(var i in e)e.hasOwnProperty(i)&&(r[i]=t.util.clone(e[i]));return r;case\"Array\":return e.slice()}return e}},languages:{extend:function(e,n){var r=t.util.clone(t.languages[e]);for(var i in n)r[i]=n[i];return r},insertBefore:function(e,n,r,i){i=i||t.languages;var s=i[e],o={};for(var u in s)if(s.hasOwnProperty(u)){if(u==n)for(var a in r)r.hasOwnProperty(a)&&(o[a]=r[a]);o[u]=s[u]}return i[e]=o},DFS:function(e,n){for(var r in e){n.call(e,r,e[r]);t.util.type(e)===\"Object\"&&t.languages.DFS(e[r],n)}}},highlightAll:function(e,n){var r=document.querySelectorAll('code[class*=\"language-\"], [class*=\"language-\"] code, code[class*=\"lang-\"], [class*=\"lang-\"] code');for(var i=0,s;s=r[i++];)t.highlightElement(s,e===!0,n)},highlightElement:function(r,i,s){var o,u,a=r;while(a&&!e.test(a.className))a=a.parentNode;if(a){o=(a.className.match(e)||[,\"\"])[1];u=t.languages[o]}if(!u)return;r.className=r.className.replace(e,\"\").replace(/\\s+/g,\" \")+\" language-\"+o;a=r.parentNode;/pre/i.test(a.nodeName)&&(a.className=a.className.replace(e,\"\").replace(/\\s+/g,\" \")+\" language-\"+o);var f=r.textContent;if(!f)return;f=f.replace(/&/g,\"&amp;\").replace(/</g,\"&lt;\").replace(/\\u00a0/g,\" \");var l={element:r,language:o,grammar:u,code:f};t.hooks.run(\"before-highlight\",l);if(i&&self.Worker){var c=new Worker(t.filename);c.onmessage=function(e){l.highlightedCode=n.stringify(JSON.parse(e.data),o);t.hooks.run(\"before-insert\",l);l.element.innerHTML=l.highlightedCode;s&&s.call(l.element);t.hooks.run(\"after-highlight\",l)};c.postMessage(JSON.stringify({language:l.language,code:l.code}))}else{l.highlightedCode=t.highlight(l.code,l.grammar,l.language);t.hooks.run(\"before-insert\",l);l.element.innerHTML=l.highlightedCode;s&&s.call(r);t.hooks.run(\"after-highlight\",l)}},highlight:function(e,r,i){return n.stringify(t.tokenize(e,r),i)},tokenize:function(e,n,r){var i=t.Token,s=[e],o=n.rest;if(o){for(var u in o)n[u]=o[u];delete n.rest}e:for(var u in n){if(!n.hasOwnProperty(u)||!n[u])continue;var a=n[u],f=a.inside,l=!!a.lookbehind,c=0;a=a.pattern||a;for(var h=0;h<s.length;h++){var p=s[h];if(s.length>e.length)break e;if(p instanceof i)continue;a.lastIndex=0;var d=a.exec(p);if(d){l&&(c=d[1].length);var v=d.index-1+c,d=d[0].slice(c),m=d.length,g=v+m,y=p.slice(0,v+1),b=p.slice(g+1),w=[h,1];y&&w.push(y);var E=new i(u,f?t.tokenize(d,f):d);w.push(E);b&&w.push(b);Array.prototype.splice.apply(s,w)}}}return s},hooks:{all:{},add:function(e,n){var r=t.hooks.all;r[e]=r[e]||[];r[e].push(n)},run:function(e,n){var r=t.hooks.all[e];if(!r||!r.length)return;for(var i=0,s;s=r[i++];)s(n)}}},n=t.Token=function(e,t){this.type=e;this.content=t};n.stringify=function(e,r,i){if(typeof e==\"string\")return e;if(Object.prototype.toString.call(e)==\"[object Array]\")return e.map(function(t){return n.stringify(t,r,e)}).join(\"\");var s={type:e.type,content:n.stringify(e.content,r,i),tag:\"span\",classes:[\"token\",e.type],attributes:{},language:r,parent:i};s.type==\"comment\"&&(s.attributes.spellcheck=\"true\");t.hooks.run(\"wrap\",s);var o=\"\";for(var u in s.attributes)o+=u+'=\"'+(s.attributes[u]||\"\")+'\"';return\"<\"+s.tag+' class=\"'+s.classes.join(\" \")+'\" '+o+\">\"+s.content+\"</\"+s.tag+\">\"};if(!self.document){self.addEventListener(\"message\",function(e){var n=JSON.parse(e.data),r=n.language,i=n.code;self.postMessage(JSON.stringify(t.tokenize(i,t.languages[r])));self.close()},!1);return}var r=document.getElementsByTagName(\"script\");r=r[r.length-1];if(r){t.filename=r.src;document.addEventListener&&!r.hasAttribute(\"data-manual\")&&document.addEventListener(\"DOMContentLoaded\",t.highlightAll)}})();;\nPrism.languages.markup={comment:/&lt;!--[\\w\\W]*?-->/g,prolog:/&lt;\\?.+?\\?>/,doctype:/&lt;!DOCTYPE.+?>/,cdata:/&lt;!\\[CDATA\\[[\\w\\W]*?]]>/i,tag:{pattern:/&lt;\\/?[\\w:-]+\\s*(?:\\s+[\\w:-]+(?:=(?:(\"|')(\\\\?[\\w\\W])*?\\1|\\w+))?\\s*)*\\/?>/gi,inside:{tag:{pattern:/^&lt;\\/?[\\w:-]+/i,inside:{punctuation:/^&lt;\\/?/,namespace:/^[\\w-]+?:/}},\"attr-value\":{pattern:/=(?:('|\")[\\w\\W]*?(\\1)|[^\\s>]+)/gi,inside:{punctuation:/=|>|\"/g}},punctuation:/\\/?>/g,\"attr-name\":{pattern:/[\\w:-]+/g,inside:{namespace:/^[\\w-]+?:/}}}},entity:/&amp;#?[\\da-z]{1,8};/gi};Prism.hooks.add(\"wrap\",function(e){e.type===\"entity\"&&(e.attributes.title=e.content.replace(/&amp;/,\"&\"))});;\nPrism.languages.css={comment:/\\/\\*[\\w\\W]*?\\*\\//g,atrule:{pattern:/@[\\w-]+?.*?(;|(?=\\s*{))/gi,inside:{punctuation:/[;:]/g}},url:/url\\(([\"']?).*?\\1\\)/gi,selector:/[^\\{\\}\\s][^\\{\\};]*(?=\\s*\\{)/g,property:/(\\b|\\B)[\\w-]+(?=\\s*:)/ig,string:/(\"|')(\\\\?.)*?\\1/g,important:/\\B!important\\b/gi,ignore:/&(lt|gt|amp);/gi,punctuation:/[\\{\\};:]/g};Prism.languages.markup&&Prism.languages.insertBefore(\"markup\",\"tag\",{style:{pattern:/(&lt;|<)style[\\w\\W]*?(>|&gt;)[\\w\\W]*?(&lt;|<)\\/style(>|&gt;)/ig,inside:{tag:{pattern:/(&lt;|<)style[\\w\\W]*?(>|&gt;)|(&lt;|<)\\/style(>|&gt;)/ig,inside:Prism.languages.markup.tag.inside},rest:Prism.languages.css}}});;\nPrism.languages.clike={comment:{pattern:/(^|[^\\\\])(\\/\\*[\\w\\W]*?\\*\\/|(^|[^:])\\/\\/.*?(\\r?\\n|$))/g,lookbehind:!0},string:/(\"|')(\\\\?.)*?\\1/g,\"class-name\":{pattern:/((?:(?:class|interface|extends|implements|trait|instanceof|new)\\s+)|(?:catch\\s+\\())[a-z0-9_\\.\\\\]+/ig,lookbehind:!0,inside:{punctuation:/(\\.|\\\\)/}},keyword:/\\b(if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\\b/g,\"boolean\":/\\b(true|false)\\b/g,\"function\":{pattern:/[a-z0-9_]+\\(/ig,inside:{punctuation:/\\(/}}, number:/\\b-?(0x[\\dA-Fa-f]+|\\d*\\.?\\d+([Ee]-?\\d+)?)\\b/g,operator:/[-+]{1,2}|!|&lt;=?|>=?|={1,3}|(&amp;){1,2}|\\|?\\||\\?|\\*|\\/|\\~|\\^|\\%/g,ignore:/&(lt|gt|amp);/gi,punctuation:/[{}[\\];(),.:]/g};\nPrism.languages.javascript=Prism.languages.extend(\"clike\",{keyword:/\\b(var|let|if|else|while|do|for|return|in|instanceof|function|new|with|typeof|try|throw|catch|finally|null|break|continue)\\b/g,number:/\\b-?(0x[\\dA-Fa-f]+|\\d*\\.?\\d+([Ee]-?\\d+)?|NaN|-?Infinity)\\b/g});Prism.languages.insertBefore(\"javascript\",\"keyword\",{regex:{pattern:/(^|[^/])\\/(?!\\/)(\\[.+?]|\\\\.|[^/\\r\\n])+\\/[gim]{0,3}(?=\\s*($|[\\r\\n,.;})]))/g,lookbehind:!0}});Prism.languages.markup&&Prism.languages.insertBefore(\"markup\",\"tag\",{script:{pattern:/(&lt;|<)script[\\w\\W]*?(>|&gt;)[\\w\\W]*?(&lt;|<)\\/script(>|&gt;)/ig,inside:{tag:{pattern:/(&lt;|<)script[\\w\\W]*?(>|&gt;)|(&lt;|<)\\/script(>|&gt;)/ig,inside:Prism.languages.markup.tag.inside},rest:Prism.languages.javascript}}});\n\n","/home/travis/build/npmtest/node-npmtest-cssshrink/node_modules/cssshrink/lib/util.js":"function stripslashes(str) {\n  return str.replace(/\\\\(.?)/g, function(match, sym) {\n    return sym === '\"' || sym === \"'\"\n      ? sym\n      : match;\n  });\n}\n\nexports.stripslashes = stripslashes;\n\nexports.addslashes = function addslashes(str, q) {\n  str = stripslashes(str);\n  return str.replace(new RegExp(q, 'g'), '\\\\' + q);\n};\n\nexports.unfix = function unfix(str) {\n  return str.toLowerCase().replace(/^\\-(ms|webkit|moz|o)\\-/, '');\n};\n\nexports.stripLeadingZero = function stripLeadingZero(n) {\n  // strip leading 0.\n  if (n > 0 && n < 1) {\n    n = String(n).replace('0.', '.');\n  }\n  return String(n);\n}","/home/travis/build/npmtest/node-npmtest-cssshrink/node_modules/cssshrink/lib/visitors/angle.js":"var stripLeadingZero = require('../util').stripLeadingZero;\nvar these = ['deg', 'grad', 'turn', 'rad'];\n\nvar PRECISION = 2;\n\n// prefer `deg` if all else is equal\n\nmodule.exports = {\n\n  test: function(name, nodes) {\n    return name === 'dimension';\n  },\n\n  process: function(node) {\n    var value = Number(node[1][1]);\n    var unit = node[2][1];\n    if (isNaN(value) || these.indexOf(unit) === -1) {\n      return node;\n    }\n\n    if (value === 0) {\n      node[1][1] = '0';\n      node[2][1] = 'deg';\n      return node;\n    }\n\n    var all = {\n      deg: 0,\n      grad: 0,\n      turn: 0,\n      rad: 0\n    };\n\n    var min = getMin(populate(value, unit));\n    node[1][1] = min.value;\n    node[2][1] = min.unit;\n    return node;\n  }\n\n};\n\nvar fullcircle = {\n  turn: 1,\n  deg: 360,\n  grad: 400,\n  rad: 2 * Math.PI\n};\n\nfunction populate(v, u) {\n  var all = {}\n  for (var i in fullcircle) {\n    all[i] = 1 * Number(v * fullcircle[i] / fullcircle[u]).toFixed(PRECISION);\n  }\n  return all;\n}\n\nfunction getMin(all) {\n  var win = {\n    value: stripLeadingZero(all.deg),\n    unit: 'deg'\n  };\n  var champion = (win.value + win.unit).length;\n  for (var u in all) {\n    if (u === 'turn') {\n      continue; // lacking browser support\n    }\n    var challenger = (stripLeadingZero(all[u]) + u).length;\n    if (challenger < champion) {\n      champion = challenger;\n      win = {\n        value: stripLeadingZero(all[u]),\n        unit: u\n      };\n    }\n  }\n  return win;\n}","/home/travis/build/npmtest/node-npmtest-cssshrink/node_modules/cssshrink/lib/visitors/@charset.js":"// only one charset allowed per file\n// find the first and hoist it to the top\n// delete all others\n// this is often a side effect of concatenating files\n\nmodule.exports = {\n\n  test: function(name, nodes) {\n    return name === 'stylesheet';\n  },\n\n  process: function(node) {\n    var newnode = [];\n    newnode.push(node[0]);\n    var charsetnode = null;\n\n    for (var i = 1; i < node.length; i++) {\n      if (node[i][0] === 'atrules' && node[i][1][0] === 'atkeyword' && node[i][1][1][1] === 'charset') {\n        if (!charsetnode) {\n          charsetnode = node[i][3];\n        }\n      } else {\n        newnode.push(node[i]);\n      }\n    }\n\n    if (charsetnode) {\n      var ch = [\"atrules\", [\"atkeyword\", [\"ident\", \"charset\"]], [\"s\", \" \"], charsetnode];\n      newnode.splice(1, 0, ch);\n    }\n    return newnode;\n  }\n\n};\n","/home/travis/build/npmtest/node-npmtest-cssshrink/node_modules/cssshrink/lib/visitors/color-functions.js":"var min = require('csscolormin').min;\n\nfunction stringify(node) {\n  var str = ''\n  for (var i = 1; i < node.length; i++) {\n    if (node[i][0] === 'number') {\n      str += node[i][1];\n    } else if (node[i][0] === 'operator' && node[i][1] === ',') {\n      str += ',';\n    } else if (node[i][0] === 'percentage') {\n      str += node[i][1][1] + '%';\n    }\n  }\n  return str;\n}\n\nvar functions = [\n  'rgb',\n  'rgba',\n  'hsl',\n  'hsla',\n  'cmyk',\n  'hsv',\n  'hsva'\n];\n\nmodule.exports = {\n\n  test: function(name, nodes) {\n    return name === 'funktion' && functions.indexOf(nodes[1]) !== -1;\n  },\n\n  process: function(node) {\n    var colorstr = node[1][1] + '(' + stringify(node[2]) + ')';\n    return [\"raw\", min(colorstr)];\n  }\n\n};\n","/home/travis/build/npmtest/node-npmtest-cssshrink/node_modules/cssshrink/lib/visitors/color-hex.js":"var min = require('csscolormin').min;\n\nmodule.exports = {\n\n  test: function(name, nodes) {\n    return name === 'vhash';\n  },\n\n  process: function(node) {\n    return [\"raw\", min('#' + node[1])];\n  }\n\n};\n","/home/travis/build/npmtest/node-npmtest-cssshrink/node_modules/cssshrink/lib/visitors/color-names.js":"var keywords = require('csscolormin').keywords;\n\nvar props = [\n  'color',\n  'background',\n  'background-color',\n  'background-image',\n  'border',\n  'border-color',\n  'border-top',\n  'border-right',\n  'border-bottom',\n  'border-left',\n  'border-top-color',\n  'border-right-color',\n  'border-bottom-color',\n  'border-left-color',\n  'outline',\n  'outline-color',\n  'text-shadow',\n  'box-shadow'\n];\n\nmodule.exports = {\n\n  test: function(name, nodes) {\n    return name === 'declaration' && props.indexOf(nodes[1][1]) !== -1;\n  },\n\n  process: function(node) {\n    for (var i = 1; i < node[2].length; i++) {\n      if (node[2][i][0] === 'ident' && keywords[node[2][i][1]]) {\n        node[2][i] = ['raw', keywords[node[2][i][1]]];\n      } else if (node[2][i][0] === 'funktion' && node[2][i][1][1].indexOf('gradient') !== 1) {\n        node[2][i] = this.process(node[2][i]);\n      }\n    }\n    return node;\n  },\n\n\n};\n","/home/travis/build/npmtest/node-npmtest-cssshrink/node_modules/cssshrink/lib/visitors/dedup-declarations.js":"module.exports = {\n\n  test: function(name, nodes) {\n    return name === 'block';\n  },\n\n  process: function(node) {\n    var cache = {};\n    return node.filter(function(n) {\n      if (n[0] !== 'declaration') {\n        return true;\n      }\n      var str = JSON.stringify(n);\n      if (cache[str]) {\n        return false;\n      }\n      cache[str] = 1;\n      return true;\n    });\n  }\n};\n\n\n/*\n[ 'block',\n [ 'declaration',\n   [ 'property', [Object] ],\n   [ 'value', [Object] ] ],\n [ 'decldelim' ],\n [ 'declaration',\n   [ 'property', [Object] ],\n   [ 'value', [Object] ] ] ]\n*/","/home/travis/build/npmtest/node-npmtest-cssshrink/node_modules/cssshrink/lib/visitors/dedup-keyframes.js":"var unfix = require('../util').unfix;\n\nmodule.exports = {\n\n  test: function(name, nodes) {\n    return name === 'stylesheet';\n  },\n\n  process: function(node) {\n    var map = {};\n    for (var i = 0; i < node.length; i++) {\n      if (node[i][0] === 'atruler'\n        && node[i][1][0] === 'atkeyword'\n        && unfix(node[i][1][1][1]) === 'keyframes') {\n          var at = node[i][1][1][1];\n          var name = node[i][2][2][1];\n          var id = at + ':' + name;\n          if (!map[id]) {\n            map[id] = [];\n          }\n          map[id].push(i);\n        }\n    }\n    \n    var dupes = [];\n    for (var i in map) {\n      map[i].pop();\n      if (map[i].length) {\n        dupes = dupes.concat(map[i]);\n      }\n    }\n\n    return node.filter(function(__, idx) {\n      return dupes.indexOf(idx) === -1\n    });\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-cssshrink/node_modules/cssshrink/lib/visitors/dedup-properties.js":"module.exports = {\n\n  test: function(name, nodes) {\n    return name === 'block';\n  },\n\n  process: function(node) {\n    var cache = {};\n    return node.filter(function(n) {\n      if (n[0] !== 'declaration') {\n        return true;\n      }\n      var str = JSON.stringify(n);\n      if (cache[str]) {\n        return false;\n      }\n      cache[str] = 1;\n      return true;\n    });\n  }\n};\n\n\n/*\n[ 'block',\n [ 'declaration',\n   [ 'property', [Object] ],\n   [ 'value', [Object] ] ],\n [ 'decldelim' ],\n [ 'declaration',\n   [ 'property', [Object] ],\n   [ 'value', [Object] ] ] ]\n*/","/home/travis/build/npmtest/node-npmtest-cssshrink/node_modules/cssshrink/lib/visitors/dedup-selectors.js":"module.exports = {\n\n  test: function(name, nodes) {\n    return name === 'selector';\n  },\n\n  process: function(node) {\n    var selectors = {};\n    var newnode = [];\n    newnode.push(node[0]);\n\n    for (var i = 1; i < node.length; i++) {\n      if (node[i][0] === 'simpleselector') {\n        selectors[JSON.stringify(node[i])] = node[i];\n      }\n    }\n\n    var keys = Object.keys(selectors);\n    keys.forEach(function(k, idx) {\n      newnode.push(selectors[k]);\n      if (idx < keys.length - 1) {\n        newnode.push(['delim']);\n      }\n    });\n\n    return newnode;\n  }\n\n};\n","/home/travis/build/npmtest/node-npmtest-cssshrink/node_modules/cssshrink/lib/visitors/empty-blocks.js":"module.exports = {\n\n  test: function(name, nodes) {\n    return name === 'ruleset';\n  },\n\n  /*\n  a {  ; ; ; }\n\n  ['stylesheet',\n    ['ruleset',\n      ['selector',\n        ['simpleselector',\n          ['ident', 'a'],\n          ['s', ' ']]],\n      ['block',\n        ['s', '  '],\n        ['decldelim'],\n        ['s', ' '],\n        ['decldelim'],\n        ['s', ' '],\n        ['decldelim'],\n        ['s', ' ']]]]\n  */\n\n  process: function(node) {\n    // spaces and trailing delims have been stripped\n    // if there's nothing left, it's empty\n    if (node[2].length < 2) { // 1st is the 'block' node\n      return false;\n    }\n    // check for multiple ;s\n    for (var i = 1; i < node[2].length; i++) {\n      if (node[2][i][0] !== 'decldelim' && node[2][i][0] !== 's') {\n        return node;\n      }\n    }\n\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-cssshrink/node_modules/cssshrink/lib/visitors/empty-media.js":"module.exports = {\n\n  test: function(name, nodes) {\n    return name === 'atruler' && nodes[0] === 'atkeyword' && nodes[1][1] === 'media';\n  },\n\n  process: function(node) {\n    // node[3] == selectors in the media block\n    if (node[3].length > 1) {\n      return node;\n    }\n  }\n};\n\n\n/*\n[ 'atruler',\n  [ 'atkeyword', [ 'ident', 'media' ] ],\n  [ 'atrulerq', [ 's', ' ' ], [ 'ident', 'print' ], [ 's', ' ' ] ],\n  [ 'atrulers' ] ]\n*/","/home/travis/build/npmtest/node-npmtest-cssshrink/node_modules/cssshrink/lib/visitors/font-family-generic.js":"// non-generic fonts don't make sense after a generic one\n\nvar generic = [\n  'sans-serif',\n  'serif',\n  'fantasy',\n  'cursive',\n  'monospace'\n];\n\nmodule.exports = {\n\n  test: function(name, nodes) {\n    return name === 'declaration' && nodes[1][1] === \"font-family\";\n  },\n\n  process: function(node) {\n    var newnode = [node[0], node[1], [node[2][0]]];\n    var generic_found = false;\n\n    for (var i = 1; i < node[2].length; i++) {\n\n      if (node[2][i][0] === 'important') {\n        newnode[2].push(node[2][i]);\n        return newnode;\n      }\n\n      var value = node[2][i][1].toLowerCase();\n      if (!generic_found && generic.indexOf(value) !== -1) {\n        generic_found = true;\n        node[2][i][1] = value; // lowercase generic\n        newnode[2].push(node[2][i]);\n      }\n      if (!generic_found) {\n        newnode[2].push(node[2][i]);\n      }\n\n    }\n    return newnode;\n  }\n};\n\n","/home/travis/build/npmtest/node-npmtest-cssshrink/node_modules/cssshrink/lib/visitors/font-family-unquote.js":"module.exports = {\n\n  test: function(name, nodes) {\n    return name === 'declaration' && nodes[1][1] === \"font-family\";\n  },\n\n  process: function(node) {\n    for (var i = 1; i < node[2].length; i++) {\n      if (node[2][i][0] === 'string') { // try to unquote\n        var raw = node[2][i][1].slice(1, -1); // sans quotes\n        // strip spaces, the rest should be just letters or -\n        if (/^[a-z-]*$/i.test((raw.replace(/\\s/g, '')))) {\n          node[2][i] = ['raw', raw];\n        }\n      }\n    }\n    return node;\n  }\n};\n\n","/home/travis/build/npmtest/node-npmtest-cssshrink/node_modules/cssshrink/lib/visitors/font-weight.js":"module.exports = {\n\n  test: function(name, nodes) {\n    return name === 'declaration' && nodes[1][1] === \"font-weight\";\n  },\n\n  process: function(node) {\n    if (node[2][1][1] === 'bold') {\n      node[2][1][1] = 700;\n    } else if (node[2][1][1] === 'normal') {\n      node[2][1][1] = 400;\n    }\n    return node;\n  }\n};\n\n\n/*\n['stylesheet',\n  ['ruleset',\n    ['selector',\n      ['simpleselector',\n        ['ident', 'a']]],\n    ['block',\n      ['declaration',\n        ['property',\n          ['ident', 'font-weight']],\n        ['value',\n          ['ident', 'bold']]],\n      ['decldelim']]]]\n*/","/home/travis/build/npmtest/node-npmtest-cssshrink/node_modules/cssshrink/lib/visitors/@import.js":"var util = require('../util');\n\nmodule.exports = {\n\n  test: function(name, nodes) {\n    return name === 'atrules' && nodes[1][1] === 'import';\n  },\n\n  process: function(node) {\n    for (var i = 0; i < node.length; i++) {\n      if (node[i][0] === 'uri') {\n        if (node[i][1][0] === 'raw') { // unquoted url\n          var q = '\"';\n          // replace with a string quoted with default \" and escape other \"s\n          // later the quotes visitor optimizes \" vs '\n          node[i] = ['string', [q, util.addslashes(node[i][1][1], q), q].join('')];\n        } else if (node[i][1][0] === 'string') {\n          // rewrite node throwing out url() and leaving string only\n          node[i] = ['string', node[i][1][1]];\n        }\n      }\n    }\n    return node;\n  }\n};\n\n/*\n[ 'atrules',\n  [ 'atkeyword', [ 'ident', 'import' ] ],\n  [ 's', ' ' ],\n  [ 'uri', [ 'string', '\\'landscape.css\\'' ] ],\n  [ 's', ' ' ],\n  [ 'ident', 'screen' ],\n  [ 's', ' ' ],\n  [ 'ident', 'and' ],\n  [ 's', ' ' ],\n  [ 'braces',\n    '(',\n    ')',\n    [ 'ident', 'orientation' ],\n    [ 'operator', ':' ],\n    [ 'ident', 'landscape' ] ] ]\n*/","/home/travis/build/npmtest/node-npmtest-cssshrink/node_modules/cssshrink/lib/visitors/@keyframes.js":"var unfix = require('../util').unfix;\n\nmodule.exports = {\n\n  test: function(name, nodes) {\n    return name === 'atruler'\n      && nodes[0] === 'atkeyword'\n      && unfix(nodes[1][1]) === 'keyframes';\n  },\n\n  process: function(node) {\n    var atrulers = node[3];\n    for (var i = 0; i < atrulers.length; i++) {\n      var type = atrulers[i][0];\n      if (type === 'ruleset') {\n        if (atrulers[i][1] && atrulers[i][1][0] === 'selector') {\n          if (atrulers[i][1][1] && atrulers[i][1][1][0] === 'simpleselector') {\n            var sel = atrulers[i][1][1][1];\n            if ((sel[0] === 'ident' && sel[1] === 'from') ||\n                (sel[0] === 'percentage' && sel[1][1] === '0')) {\n              sel[0] = 'raw'; // raw, otherwise all 0% turn to 0\n              sel[1] = ['0%'];\n            }\n            if (sel[0] === 'percentage' && sel[1][1] === '100') {\n              sel[0] = 'ident';\n              sel[1] = 'to';\n            }\n          }\n        }\n      }\n    }\n    return node;\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-cssshrink/node_modules/cssshrink/lib/visitors/lowercase-dimensions.js":"module.exports = {\n\n  test: function(name, nodes) {\n    return name === 'dimension';\n  },\n\n  process: function(node) {\n    node[2][1] = node[2][1].toLowerCase();\n    return node;\n  }\n\n};\n","/home/travis/build/npmtest/node-npmtest-cssshrink/node_modules/cssshrink/lib/visitors/lowercase-props.js":"module.exports = {\n\n  test: function(name, nodes) {\n    return name === 'property';\n  },\n\n  process: function(node) {\n    node[1][1] = node[1][1].toLowerCase();\n    return node;  \n  }\n\n};\n","/home/travis/build/npmtest/node-npmtest-cssshrink/node_modules/cssshrink/lib/visitors/merge-blocks-in-blocks.js":"// same as merging blocks in a stylesheet\n// only it's in a media query block\n\nmodule.exports = {\n\n  test: function(name, nodes) {\n    return name === 'atrulers';\n  },\n  process: require('./merge-blocks.js').process\n};\n","/home/travis/build/npmtest/node-npmtest-cssshrink/node_modules/cssshrink/lib/visitors/merge-blocks.js":"module.exports = {\n\n  test: function(name, nodes) {\n    return name === 'stylesheet';\n  },\n\n  process: function(node) {\n\n    var prev_s, prev_b;\n    var newnode = [];\n    newnode.push(node[0]);\n\n    for (var i = 1; i < node.length; i++) {\n      if (node[i][0] !== 'ruleset') {\n        prev_s = null;\n        prev_b = null;\n        newnode.push(node[i]);\n        continue;\n      }\n      var selector = JSON.stringify(node[i][1]);\n      var block    = JSON.stringify(node[i][2]);\n      if (prev_b === block) {\n        // drop the block, merge selectors\n        appendSelector(newnode[newnode.length - 1][1], node[i][1]);\n        prev_s = JSON.stringify(newnode[newnode.length - 1][1]);\n      } else if (prev_s === selector) {\n        // merge block to the previous\n        appendBlock(newnode[newnode.length - 1][2], node[i][2]);\n        prev_b = JSON.stringify(newnode[newnode.length - 1][2]);\n      } else {\n        // keep going\n        prev_s = selector;\n        prev_b = block;\n        newnode.push(node[i]);\n      }\n    }\n\n    return newnode;\n  }\n\n};\n\n\nfunction appendSelector(selector1, selector2) {\n  selector1.push(['delim']);\n  for (var i = 1; i < selector2.length; i++) {\n    selector1.push(selector2[i]);\n  }\n}\n\nfunction appendBlock(b1, b2) {\n\n  if (b1[b1.length - 1][0] !== 'decldelim') {\n    b1.push(['decldelim']);\n  }\n\n  for (var i = 1; i < b2.length; i++) {\n    b1.push(b2[i]);\n  }\n}","/home/travis/build/npmtest/node-npmtest-cssshrink/node_modules/cssshrink/lib/visitors/merge-media.js":"module.exports = {\n\n  test: function(name, nodes) {\n    return name === 'stylesheet';\n  },\n\n  process: function(node) {\n    var newnode = [];\n    newnode.push(node[0]);\n    var prevq = false;\n    for (var i = 1; i < node.length; i++) {\n      if (node[i][0] === 'atruler' && node[i][1][0] === 'atkeyword' && node[i][1][1][1] === 'media') {\n        var q = JSON.stringify(node[i][2]);\n        if (q === prevq) {\n          // same mq, merge the kids\n          appendRulesets(newnode[newnode.length - 1][3], node[i][3]);\n        } else {\n          newnode.push(node[i]);\n          prevq = q;\n        }\n      } else {\n        newnode.push(node[i]);\n        prevq = false;\n      }\n    }\n    return newnode;\n  }\n};\n\n\nfunction appendRulesets(r1, r2) {\n  for (var i = 1; i < r2.length; i++) {\n    r1.push(r2[i]);\n  }\n}","/home/travis/build/npmtest/node-npmtest-cssshrink/node_modules/cssshrink/lib/visitors/numbers.js":"var stripLeadingZero = require('../util').stripLeadingZero;\n\nmodule.exports = {\n\n  test: function(name, nodes) {\n    return name === 'number';\n  },\n\n  process: function(node) {\n    var n = Number(node[1]);\n    if (isNaN(n)) {\n      return; // drop this\n    }\n\n    node[1] = stripLeadingZero(n);\n    return node;\n  }\n\n};\n","/home/travis/build/npmtest/node-npmtest-cssshrink/node_modules/cssshrink/lib/visitors/pseudo-elements.js":"var whitelist = [\n  'after',\n  'before',\n  'first-letter',\n  'first-line'\n];\n\nmodule.exports = {\n\n  test: function(name, nodes) {\n    return name === 'pseudoe';\n  },\n\n  process: function(node) {\n    var name = node[1][1];\n    if (whitelist.indexOf(name.trim()) !== -1) {\n      node[0] = 'pseudoc';\n    }\n    return node;\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-cssshrink/node_modules/cssshrink/lib/visitors/quotes.js":"var util = require('../util');\n\nmodule.exports = {\n\n  test: function(name, nodes) {\n    return name === 'string';\n  },\n\n  process: function(node) {\n    var str = util.stripslashes(node[1].slice(1, -1));\n\n    // try consistent \" first\n    var q = '\"';\n    var doubles = str.match(/\"/g);\n    if (!doubles) {\n      node[1] = [q, str, q].join('');\n      return node;\n    }\n\n    // go with fewer quotes to escape\n    var singles = str.match(/'/g);\n    if (!singles || (singles.length < doubles.length)) {\n      q = \"'\";\n    }\n\n    node[1] = [q, util.addslashes(str, q), q].join('');\n    return node;\n  }\n\n};\n\n","/home/travis/build/npmtest/node-npmtest-cssshrink/node_modules/cssshrink/lib/visitors/time.js":"var stripLeadingZero = require('../util').stripLeadingZero;\n\nmodule.exports = {\n\n  test: function(name, nodes) {\n    return name === 'dimension';\n  },\n\n  process: function(node) {\n    var u = node[2][1];\n    if (u !== 'ms' && u !== 's') {\n      return node;\n    }\n    var ms_value = u === 'ms'\n      ? node[1][1]\n      : node[1][1] * 1000;\n\n    var seconds = stripLeadingZero(ms_value / 1000);\n    var milisec = stripLeadingZero(ms_value);\n    if (milisec.length + 2 > seconds.length + 1) { // ms=2,s=1\n      node[2][1] = 's';\n      node[1][1] = seconds;\n    } else {\n      node[2][1] = 'ms';\n      node[1][1] = milisec;\n    }\n    return node;\n  }\n\n};\n","/home/travis/build/npmtest/node-npmtest-cssshrink/node_modules/cssshrink/lib/visitors/unary.js":"module.exports = {\n\n  test: function(name, nodes) {\n    return name === 'value';\n  },\n\n  process: function(node) {\n    var newnode = [];\n\n    for (var i = 0; i < node.length; i++) {\n      var type = node[i][0];\n      var next_type = node[i + 1] && node[i + 1][0];\n\n      if (type !== 'unary') {\n        newnode.push(node[i]);\n        continue; // no changes\n      }\n\n      if (next_type !== 'dimension' && next_type !== 'number') {\n        newnode.push(node[i]);\n        continue; // no changes\n      }\n\n      if (node[i][1] === '+') {\n        continue; //  +101 => 101, +1px => 1px\n      }\n\n      if (next_type === 'number' && node[i + 1][1] === '0') {\n        continue; // -0 => 0\n      }\n\n      newnode.push(node[i]);\n    }\n\n    return newnode;\n  }\n\n};\n","/home/travis/build/npmtest/node-npmtest-cssshrink/node_modules/cssshrink/lib/visitors/uri.js":"var trim = require('prettyugly').util.trim;\n\nmodule.exports = {\n\n  test: function(name, nodes) {\n    return name === 'uri';\n  },\n\n  process: function(node) {\n    trim(node);\n\n    if (node[1][0] === 'string') { // as opposed to \"raw\" which is unquoted url\n      // try to unquote\n      var raw = node[1][1].slice(1, -1);\n      if (/[\\s\\(\\)\"']/.test(raw)) {\n        return node;\n      }\n      node[1] = ['raw', raw];\n    }\n\n    //var colorstr = node[1][1] + '(' + stringify(node[2]) + ')';\n    //return [\"string\", min(colorstr)];\n    return node;\n  }\n\n};\n","/home/travis/build/npmtest/node-npmtest-cssshrink/node_modules/cssshrink/lib/visitors/zero-dimensions.js":"var angle = ['deg', 'grad', 'turn', 'rad'];\nvar time = ['ms', 's'];\n\nmodule.exports = {\n\n  test: function(name, nodes) {\n    return name === 'dimension';\n  },\n\n  process: function(node) {\n    if (node[1][1] !== '0') {\n      return node;\n    }\n\n    if (angle.indexOf(node[2][1]) !== -1) {\n      node[2][1] = 'deg';\n      return node;\n    }\n\n    if (time.indexOf(node[2][1]) !== -1) {\n      node[2][1] = 's';\n      return node;\n    }\n\n    return ['number', '0'];\n  }\n\n};\n","/home/travis/build/npmtest/node-npmtest-cssshrink/node_modules/cssshrink/lib/visitors/zero-percentage.js":"module.exports = {\n\n  test: function(name, nodes) {\n    return name === 'percentage';\n  },\n\n  process: function(node) {\n    if (node[1][1] !== '0') {\n      return node;\n    }\n    return ['number', '0'];\n  }\n\n};\n"}